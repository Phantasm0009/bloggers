{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/code.webp","path":"images/code.webp","modified":1,"renderable":0},{"_id":"source/images/flask.webp","path":"images/flask.webp","modified":1,"renderable":0},{"_id":"source/images/git.webp","path":"images/git.webp","modified":1,"renderable":0},{"_id":"source/images/maps.webp","path":"images/maps.webp","modified":1,"renderable":0},{"_id":"source/images/music.webp","path":"images/music.webp","modified":1,"renderable":0},{"_id":"source/images/type.webp","path":"images/type.webp","modified":1,"renderable":0},{"_id":"source/images/react.webp","path":"images/react.webp","modified":1,"renderable":0},{"_id":"source/images/vue.webp","path":"images/vue.webp","modified":1,"renderable":0},{"_id":"themes/claudia/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/claudia/source/js/common.js","path":"js/common.js","modified":1,"renderable":1},{"_id":"themes/claudia/source/js/img_zoom.js","path":"js/img_zoom.js","modified":1,"renderable":1},{"_id":"themes/claudia/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":1,"renderable":1},{"_id":"themes/claudia/source/js/post.js","path":"js/post.js","modified":1,"renderable":1},{"_id":"themes/claudia/source/js/jquery-fancybox.min.js","path":"js/jquery-fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/claudia/source/js/jquery-3.6.1.min.js","path":"js/jquery-3.6.1.min.js","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/about.scss","path":"style/about.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/archive.scss","path":"style/archive.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/base.scss","path":"style/base.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/post.scss","path":"style/post.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/widget-header.scss","path":"style/widget-header.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/widget-post-list.scss","path":"style/widget-post-list.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/common/bulma.css","path":"style/common/bulma.css","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/common/helper.scss","path":"style/common/helper.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/common/jquery.fancybox.min.css","path":"style/common/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/common/variable.scss","path":"style/common/variable.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/themes/default-dark.scss","path":"style/themes/default-dark.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/themes/default-light.scss","path":"style/themes/default-light.scss","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/themes/highlight-theme-light.css","path":"style/themes/highlight-theme-light.css","modified":1,"renderable":1},{"_id":"themes/claudia/source/style/themes/theme.scss","path":"style/themes/theme.scss","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Piano.md","hash":"39c75cec86ad1ecc118703bacfefbeee50e346a0","modified":1671720631614},{"_id":"source/_posts/flask.md","hash":"0734811dc795dcfe0f31e42d24e9d77b5289ebff","modified":1671722125450},{"_id":"source/_posts/git.md","hash":"4160d4bff3884c8aabe365fa2e0df40f6f0863c0","modified":1671722104926},{"_id":"source/_posts/maps.md","hash":"da0dfdf3b18ddef37aae62c5f30b777253fa2bdf","modified":1671722099384},{"_id":"source/_posts/music.md","hash":"1606f2afc301decd6cfbc5291935e8148fc2afd6","modified":1671722084454},{"_id":"source/_posts/search.md","hash":"b20d82e92d0bbf5ca921df3df5d441e0471ed525","modified":1671722056701},{"_id":"source/_posts/react.md","hash":"2790466589eadb97efdbc51ec5b9a292a248267d","modified":1671722064655},{"_id":"source/_posts/typescript.md","hash":"c2b96cdfafa2ca7529bb2c81c7fa3b20692ce422","modified":1671722026930},{"_id":"source/_posts/todo.md","hash":"4a6a4a035d91806509c1579fff13f6d097561fe1","modified":1671722040188},{"_id":"source/_posts/vue-js.md","hash":"5cda436d3d69c894cc577bef36a288affafd1f68","modified":1671721219153},{"_id":"source/images/code.webp","hash":"572bdca8b43248a6b509eab10fbad0f010b7bf73","modified":1671720286025},{"_id":"source/images/flask.webp","hash":"2ff9041b97f146bd111d164536b03bfece2cd4fb","modified":1671721728365},{"_id":"source/images/maps.webp","hash":"84c844a01e60e97b675a6c6cd13b6cf12af095e2","modified":1671721381962},{"_id":"source/images/type.webp","hash":"e47d51169d1e243c5a307f60f405ff7effc5f931","modified":1671721470494},{"_id":"source/images/git.webp","hash":"c65f4d4f2e31845f02180bd558b89753e1e3d6ed","modified":1671721564256},{"_id":"source/images/react.webp","hash":"2108269cf8425f8605998904c0a000246898e9ff","modified":1671721773080},{"_id":"source/images/vue.webp","hash":"da0b403164e28936f35416922813a85bc9d7b30c","modified":1671720764959},{"_id":"source/images/music.webp","hash":"8a6d25a9d63903c325ece57fe2257bc6d00b3b70","modified":1671720940058},{"_id":"themes/claudia/.gitignore","hash":"bd20d54c57507594cd16a21021c3600f9311a1f5","modified":1671719610473},{"_id":"themes/claudia/LICENSE","hash":"9812afb9d0aa8596067b6fd30cf6089345b7b678","modified":1671719610537},{"_id":"themes/claudia/CHANGELOG.md","hash":"59b1995c016ad26343409f7ddff9f5feb75038e2","modified":1671719610492},{"_id":"themes/claudia/CONTRIBUTING.md","hash":"618215987cc9a774c37cc70efa1cb8545457a49c","modified":1671719610522},{"_id":"themes/claudia/README-CN.md","hash":"4688e3f1046585e3d7ae79f63104ed301864a240","modified":1671719610553},{"_id":"themes/claudia/CODE_OF_CONDUCT.md","hash":"787b987cd6079f93c7846b69c3b4dfa41cb3ac03","modified":1671719610508},{"_id":"themes/claudia/README.md","hash":"c6f8d7e06f79a64d18aeee6592dd44abe097cf77","modified":1671719610570},{"_id":"themes/claudia/_config.yml","hash":"63401225ab3646e8e565253714b76f5cf369d2fc","modified":1671723638442},{"_id":"themes/claudia/package.json","hash":"c59cb2089c51ed56deb2df69171d7adc63c1148f","modified":1671719610612},{"_id":"themes/claudia/.github/FUNDING.yml","hash":"dd672081ec4678929f6c1ac3ebbef4d990291ecd","modified":1671719610629},{"_id":"themes/claudia/.github/PULL_REQUEST_TEMPLATE.md","hash":"35751990a36fffe5a5f6fd682452fe5594cadde9","modified":1671719610644},{"_id":"themes/claudia/languages/zh-CN.yml","hash":"dfaa6ca86d6dc041616f09e5e0b16221bdf7e122","modified":1671719610715},{"_id":"themes/claudia/languages/en.yml","hash":"66d680dcaaa2374c8a400c7266e48a4f662a9035","modified":1671719610699},{"_id":"themes/claudia/layout/about.pug","hash":"98dea176f76053d5deaf35ed25518d218d70be7d","modified":1671719610736},{"_id":"themes/claudia/layout/archive.pug","hash":"68c709495bc39a659d9c4b19216714a5ac2b5579","modified":1671719610753},{"_id":"themes/claudia/layout/category.pug","hash":"2147f3d66640bc6604c9b15325a480d196a4df3d","modified":1671719610768},{"_id":"themes/claudia/layout/index.pug","hash":"96b3b857b19b62823f84a164d20293cc16d891aa","modified":1671719610784},{"_id":"themes/claudia/layout/page.pug","hash":"6c5db904a03adb4794b7ada222389da12d395bc7","modified":1671719610799},{"_id":"themes/claudia/layout/post.pug","hash":"ebbb41aa73d3c702b983cfe740261b5b366d1145","modified":1671719610815},{"_id":"themes/claudia/layout/tag.pug","hash":"16dac6e0a6ef939ceb6adb21dfbe0276538ff269","modified":1671719610830},{"_id":"themes/claudia/.github/ISSUE_TEMPLATE/bug_report.md","hash":"b38365fec9b6cac6bbb75441082f041c4efd35bf","modified":1671719610662},{"_id":"themes/claudia/.github/ISSUE_TEMPLATE/feature_request.md","hash":"9d8447814c3ac93d7fbd336015e7ef80c4a32831","modified":1671719610678},{"_id":"themes/claudia/layout/widget/base.pug","hash":"21a5eab68859adedc9997581fc54e848693c17d4","modified":1671719610850},{"_id":"themes/claudia/layout/widget/methods.pug","hash":"fa62f6ad95d1a4cda5038595d19d4d11b4b39e17","modified":1671719610867},{"_id":"themes/claudia/layout/widget/widget-categories.pug","hash":"ea3bcd5f5fb06e26d8b67f30f224e7c129672980","modified":1671719610896},{"_id":"themes/claudia/layout/widget/widget-archives.pug","hash":"e6bcf8b09a5e06119baf3f97f7798ef7600ab65c","modified":1671719610881},{"_id":"themes/claudia/layout/widget/widget-profile.pug","hash":"fbe18f3dd5e8d2850f8e6510da4fbd499d5096f0","modified":1671719610946},{"_id":"themes/claudia/layout/widget/widget-recent.pug","hash":"7512dceae690ea219d562a6e450d633e29916072","modified":1671719610962},{"_id":"themes/claudia/layout/widget/widget-search.pug","hash":"c17612dd4ae2d439d757818ec0e4215d71dd9ad5","modified":1671719610981},{"_id":"themes/claudia/layout/widget/widget-post-list.pug","hash":"f034a4b8231f7933d06e364671b11847c74b9a5c","modified":1671719610927},{"_id":"themes/claudia/layout/widget/widget-header.pug","hash":"5e9b2035b31372c2bb11db6efe0e36b7df64d884","modified":1671719610912},{"_id":"themes/claudia/layout/widget/widget-sns.pug","hash":"8ec154d321b36a5f3bf5974c75668b45ec660c1d","modified":1671719610996},{"_id":"themes/claudia/layout/widget/widget-tag.pug","hash":"714a05148758e1e3cc12635c875cb6ef1753c6ab","modified":1671719611011},{"_id":"themes/claudia/source/images/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1671719611083},{"_id":"themes/claudia/source/js/common.js","hash":"7f62c8c148ee0b528a2bea47b248b2a7f5501142","modified":1671719611100},{"_id":"themes/claudia/source/js/img_zoom.js","hash":"a384c3a60fcbdad813cb8340200dfb07ebbcc48c","modified":1671719611143},{"_id":"themes/claudia/source/js/post.js","hash":"04edd583f103ba444d8174d55e7f45e27b8f2549","modified":1671719611227},{"_id":"themes/claudia/source/style/about.scss","hash":"4a1beebb317c598b11fc4815e70b07bbb6d2aed7","modified":1671719611246},{"_id":"themes/claudia/source/style/archive.scss","hash":"cd1dc16dfa7c482cc88ddabaf8c9a459299a98cf","modified":1671719611260},{"_id":"themes/claudia/source/style/base.scss","hash":"da7457c952b6b433f273d7ecc562d24dcd4aa431","modified":1671719611276},{"_id":"themes/claudia/source/style/post.scss","hash":"8a3520a0ceb22a2fde35b09485e2df6dd5a23b6f","modified":1671719611291},{"_id":"themes/claudia/source/style/widget-header.scss","hash":"18782c2ab206abbeb0ee59632864251acfd20d85","modified":1671719611305},{"_id":"themes/claudia/source/style/widget-post-list.scss","hash":"53ea5dc4fb868f3553a5c117e528082ba3c7961c","modified":1671719611321},{"_id":"themes/claudia/source/style/common/helper.scss","hash":"7cd0982fe839e760523f8f85ea6f06f2b5d2111a","modified":1671719611356},{"_id":"themes/claudia/source/style/common/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1671719611373},{"_id":"themes/claudia/source/style/common/variable.scss","hash":"fffe6eacfa4d814626a1e1d84dc651233eded060","modified":1671719611388},{"_id":"themes/claudia/source/style/themes/default-dark.scss","hash":"0cbdc5738503f55e5b84e1bd00e445c98c7d56d2","modified":1671719611409},{"_id":"themes/claudia/source/style/themes/default-light.scss","hash":"23e7c1f87e252db80d34d36a2129e98dde7b1b55","modified":1671719611428},{"_id":"themes/claudia/source/style/themes/highlight-theme-light.css","hash":"f7b19080f00e10723bc86e6819fc25143a0137c5","modified":1671719611444},{"_id":"themes/claudia/source/style/themes/theme.scss","hash":"caf7517c9200bbf7152a7f5edba4298fbf9ae629","modified":1671719611459},{"_id":"themes/claudia/img.png","hash":"2239d04aa7d31850b024d3ccac609fbf9dcb98d2","modified":1671719610597},{"_id":"themes/claudia/source/js/highlight.pack.js","hash":"2ef9bbbc688ce413686ce0eb64d0b25af4ea34e2","modified":1671719611127},{"_id":"themes/claudia/source/js/jquery-3.6.1.min.js","hash":"0fa72756e48c33a6feeace1ffa5d790d58b53729","modified":1671719611178},{"_id":"themes/claudia/source/js/jquery-fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1671719611208},{"_id":"themes/claudia/screenshot/BuyMeCoffeeQRCode.png","hash":"df14bf998f23f9e8a323e2d79802e887875c8842","modified":1671719611030},{"_id":"themes/claudia/source/style/common/bulma.css","hash":"7ede761951c6f274850a1038416559a8f648c493","modified":1671719611341},{"_id":"themes/claudia/screenshot/claudia-cover.png","hash":"757680cd3648e3569d6a18abaf33180dc427d620","modified":1671719611064},{"_id":"themes/claudia/screenshot/claudia-cover-v2.png","hash":"f477d90d327a638a46b3caa172332e931955a532","modified":1671719611047},{"_id":"public/atom.xml","hash":"7fb306499cb2ab8360a019aaa842e251534fe015","modified":1671723648213},{"_id":"public/search.xml","hash":"f7f11d0dd116ffa5100d67a97634e4b6d2716b79","modified":1671723648213},{"_id":"public/2022/12/17/typescript/index.html","hash":"8f1e680952b2c2302d0e552080ab4defc558bc10","modified":1671723648213},{"_id":"public/2022/12/17/maps/index.html","hash":"1edb47bc1d1a07de1906fcaa4eb603f925ddc1ca","modified":1671723648213},{"_id":"public/2022/12/17/search/index.html","hash":"206b3d51dfe2a463a070cb37f47911a1c923ba9b","modified":1671723648213},{"_id":"public/2022/12/16/vue-js/index.html","hash":"19d67df97bc141a9da3aba12dca14a645c047e5d","modified":1671723648213},{"_id":"public/2022/12/15/Piano/index.html","hash":"43238ca3b7095b8f43589009dc29db1415ff2fcd","modified":1671723648213},{"_id":"public/tags/typography/index.html","hash":"5b84bb3c09cba1441a48ca99861b7ac5f401ea14","modified":1671723648213},{"_id":"public/tags/hexo/index.html","hash":"cc9a5b9fb243440a801e4dc9130fccd95358c1ec","modified":1671723648213},{"_id":"public/tags/Heroku/index.html","hash":"ab23a005b39781db2eeeea11beb1b62f3acb8e26","modified":1671723648213},{"_id":"public/tags/Python-Flask/index.html","hash":"ed14d9f23fd2c7bf9fd91d2a2a9e940da44e8f51","modified":1671723648213},{"_id":"public/tags/Tailwind/index.html","hash":"eb0d750725e3916ef3b59c7044c61a8dae5c33af","modified":1671723648213},{"_id":"public/tags/Application/index.html","hash":"071276a79b2561a127b590e229a21866058f7af4","modified":1671723648213},{"_id":"public/tags/React/index.html","hash":"58466e91e8df25f4490bfdeace86dc3083b73b92","modified":1671723648213},{"_id":"public/tags/Javascript/index.html","hash":"aba767f266528ef2729c8bccf74eab7950bb4f53","modified":1671723648213},{"_id":"public/tags/Html/index.html","hash":"0423ec4245500cffc2c9067751b4db9a6d643c01","modified":1671723648213},{"_id":"public/tags/typescript/index.html","hash":"00d11f07963129a59c4af404ae32bc485796d112","modified":1671723648213},{"_id":"public/tags/Git/index.html","hash":"269daca410966f1e4331152f9a5aee17a72fce41","modified":1671723648213},{"_id":"public/tags/Node-js/index.html","hash":"cfccab94e9bd72ae65b3162361a944e4f15d7956","modified":1671723648213},{"_id":"public/tags/Search/index.html","hash":"1643edf3dcb17551ffc1eef217fd3c213e5908b0","modified":1671723648213},{"_id":"public/tags/API/index.html","hash":"c16a40ddc0a69877d9ef942578726fdeb1c0922c","modified":1671723648213},{"_id":"public/tags/Vue-js/index.html","hash":"b0e4e053cc4362a119e390df7c581016ae322428","modified":1671723648213},{"_id":"public/tags/Firebase/index.html","hash":"fcb695fe905778e48a7e9ad353b1e66aa1c3d8e4","modified":1671723648213},{"_id":"public/2022/12/19/react/index.html","hash":"2c576caa16141d90c7e8c84f670edd7eeb4104c3","modified":1671723648213},{"_id":"public/2022/12/20/flask/index.html","hash":"b67a3f34b7ee596b66623464a2fde6ea351c223a","modified":1671723648213},{"_id":"public/2022/12/18/git/index.html","hash":"3b425f2a9a86a9de6eca792ffea493640fe16579","modified":1671723648213},{"_id":"public/2022/12/16/todo/index.html","hash":"aafef5a811663475f6d70a150cc1a7da2312de0a","modified":1671723648213},{"_id":"public/2022/12/16/music/index.html","hash":"de1e8befe9d7b413736f969f166e8b6a7df64b57","modified":1671723648213},{"_id":"public/archives/2022/index.html","hash":"6e5ce12b4a33c7242ddf594df58b4998f6b3b59e","modified":1671723648213},{"_id":"public/index.html","hash":"f21bedbf1a1096598c6a9bd7777327a790bd46cb","modified":1671723648213},{"_id":"public/archives/index.html","hash":"78af1106e32735865ee8504b7e6ccb0f1a83e087","modified":1671723648213},{"_id":"public/archives/2022/12/index.html","hash":"6e5ce12b4a33c7242ddf594df58b4998f6b3b59e","modified":1671723648213},{"_id":"public/images/code.webp","hash":"572bdca8b43248a6b509eab10fbad0f010b7bf73","modified":1671723648213},{"_id":"public/images/flask.webp","hash":"2ff9041b97f146bd111d164536b03bfece2cd4fb","modified":1671723648213},{"_id":"public/images/music.webp","hash":"8a6d25a9d63903c325ece57fe2257bc6d00b3b70","modified":1671723648213},{"_id":"public/images/maps.webp","hash":"84c844a01e60e97b675a6c6cd13b6cf12af095e2","modified":1671723648213},{"_id":"public/images/react.webp","hash":"2108269cf8425f8605998904c0a000246898e9ff","modified":1671723648213},{"_id":"public/images/git.webp","hash":"c65f4d4f2e31845f02180bd558b89753e1e3d6ed","modified":1671723648213},{"_id":"public/images/type.webp","hash":"e47d51169d1e243c5a307f60f405ff7effc5f931","modified":1671723648213},{"_id":"public/images/vue.webp","hash":"da0b403164e28936f35416922813a85bc9d7b30c","modified":1671723648213},{"_id":"public/images/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1671723648213},{"_id":"public/js/common.js","hash":"7f62c8c148ee0b528a2bea47b248b2a7f5501142","modified":1671723648213},{"_id":"public/js/img_zoom.js","hash":"a384c3a60fcbdad813cb8340200dfb07ebbcc48c","modified":1671723648213},{"_id":"public/js/post.js","hash":"04edd583f103ba444d8174d55e7f45e27b8f2549","modified":1671723648213},{"_id":"public/style/common/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1671723648213},{"_id":"public/js/jquery-fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1671723648213},{"_id":"public/js/highlight.pack.js","hash":"2ef9bbbc688ce413686ce0eb64d0b25af4ea34e2","modified":1671723648213},{"_id":"public/js/jquery-3.6.1.min.js","hash":"0fa72756e48c33a6feeace1ffa5d790d58b53729","modified":1671723648213},{"_id":"public/style/common/bulma.css","hash":"7ede761951c6f274850a1038416559a8f648c493","modified":1671723648213},{"_id":"public/style/archive.css","hash":"fc79cddde5b0ee019889337bb3098d73bb6824cb","modified":1671723648213},{"_id":"public/style/about.css","hash":"54acbee918d1f3fb104e91ca074d397ccd38f5ed","modified":1671723648213},{"_id":"public/style/widget-header.css","hash":"80113d3a162a87b0574b478700242e8bb8cc9cf0","modified":1671723648213},{"_id":"public/style/common/helper.css","hash":"a3e09c0e185f4e960f4a83124306e7589f0a01c1","modified":1671723648213},{"_id":"public/style/post.css","hash":"9e42bd627735bf438d97c1709f76b853f2989a25","modified":1671723648213},{"_id":"public/style/base.css","hash":"e83bb81e864a736a80abe2901485cf43a1d86a87","modified":1671723648213},{"_id":"public/style/widget-post-list.css","hash":"f2b934eb3827d33353661f6480e2c320c0527bd4","modified":1671723648213},{"_id":"public/style/themes/highlight-theme-light.css","hash":"f7b19080f00e10723bc86e6819fc25143a0137c5","modified":1671723648213},{"_id":"public/style/themes/default-dark.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1671723648213},{"_id":"public/style/themes/default-light.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1671723648213},{"_id":"public/style/common/variable.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1671723648213},{"_id":"public/style/themes/theme.css","hash":"a334f9eaa157eda2bce485b22237a5d24cdf7d70","modified":1671723648213}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"How to Build a Piano With Only HTML, CSS, Javascript ?","date":"2022-12-15T23:54:29.000Z","_content":"![$cover](images/code.webp)\n\nIn this post, we’ll learn how to build [this piano](https://javascript-piano-lotfijb.netlify.app) from scratch using simple HTML, CSS, and JavaScript.\n\nFirstly, we’ll structure our web app using HTML. We’ll use the main tag to make a wrapper structure for the piano.\n\nWe will create classes to show white and black keys, and classes will be further used in CSS for designing.\n\nI added a class empty to some black keys because we don't need the same amount of white keys and I tried to do it the simple way.\n\nIn script.js, I grabbed all keys with className to make an array of all keys and created an array of sounds.\n\nI, then, iterated through every single element of array keys and added a click event to play a random sound.\n\nI, also, created a play() function to play a random sound on every keyboard button press on body element (I don't recommend that but I wanted to make it simple).\n\nI created a sounds folder where I stored 21 different sounds of piano keys.\n\n[](#indexhtml)index.html\n------------------------\n\n[![HTML](https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png)\n\n[](#stylecss-click-to-zoom-)style.css ( click to zoom )\n-------------------------------------------------------\n\n[![CSS](https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png)\n\n[](#scriptjs)script.js\n----------------------\n\n[![JS](https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png)\n\nNOTE :  \nThere is room for improvement and this is only for beginners who just started as it covers simple concepts.","source":"_posts/Piano.md","raw":"---\ntitle: How to Build a Piano With Only HTML, CSS, Javascript ?\ndate: 2022-12-15 18:54:29\ntags: \n  - typography\n  - hexo\n---\n![$cover](images/code.webp)\n\nIn this post, we’ll learn how to build [this piano](https://javascript-piano-lotfijb.netlify.app) from scratch using simple HTML, CSS, and JavaScript.\n\nFirstly, we’ll structure our web app using HTML. We’ll use the main tag to make a wrapper structure for the piano.\n\nWe will create classes to show white and black keys, and classes will be further used in CSS for designing.\n\nI added a class empty to some black keys because we don't need the same amount of white keys and I tried to do it the simple way.\n\nIn script.js, I grabbed all keys with className to make an array of all keys and created an array of sounds.\n\nI, then, iterated through every single element of array keys and added a click event to play a random sound.\n\nI, also, created a play() function to play a random sound on every keyboard button press on body element (I don't recommend that but I wanted to make it simple).\n\nI created a sounds folder where I stored 21 different sounds of piano keys.\n\n[](#indexhtml)index.html\n------------------------\n\n[![HTML](https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png)\n\n[](#stylecss-click-to-zoom-)style.css ( click to zoom )\n-------------------------------------------------------\n\n[![CSS](https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png)\n\n[](#scriptjs)script.js\n----------------------\n\n[![JS](https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png)\n\nNOTE :  \nThere is room for improvement and this is only for beginners who just started as it covers simple concepts.","slug":"Piano","published":1,"updated":"2022-12-22T14:50:31.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irg0000twlh05zt02y7","content":"<p><img src=\"/images/code.webp\" alt=\"$cover\"></p>\n<p>In this post, we’ll learn how to build <a href=\"https://javascript-piano-lotfijb.netlify.app/\">this piano</a> from scratch using simple HTML, CSS, and JavaScript.</p>\n<p>Firstly, we’ll structure our web app using HTML. We’ll use the main tag to make a wrapper structure for the piano.</p>\n<p>We will create classes to show white and black keys, and classes will be further used in CSS for designing.</p>\n<p>I added a class empty to some black keys because we don’t need the same amount of white keys and I tried to do it the simple way.</p>\n<p>In script.js, I grabbed all keys with className to make an array of all keys and created an array of sounds.</p>\n<p>I, then, iterated through every single element of array keys and added a click event to play a random sound.</p>\n<p>I, also, created a play() function to play a random sound on every keyboard button press on body element (I don’t recommend that but I wanted to make it simple).</p>\n<p>I created a sounds folder where I stored 21 different sounds of piano keys.</p>\n<h2 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a><a href=\"#indexhtml\"></a>index.html</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png\" alt=\"HTML\"></a></p>\n<h2 id=\"style-css-click-to-zoom\"><a href=\"#style-css-click-to-zoom\" class=\"headerlink\" title=\"style.css ( click to zoom )\"></a><a href=\"#stylecss-click-to-zoom-\"></a>style.css ( click to zoom )</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png\" alt=\"CSS\"></a></p>\n<h2 id=\"script-js\"><a href=\"#script-js\" class=\"headerlink\" title=\"script.js\"></a><a href=\"#scriptjs\"></a>script.js</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png\" alt=\"JS\"></a></p>\n<p>NOTE :<br>There is room for improvement and this is only for beginners who just started as it covers simple concepts.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/code.webp\" alt=\"$cover\"></p>\n<p>In this post, we’ll learn how to build <a href=\"https://javascript-piano-lotfijb.netlify.app/\">this piano</a> from scratch using simple HTML, CSS, and JavaScript.</p>\n<p>Firstly, we’ll structure our web app using HTML. We’ll use the main tag to make a wrapper structure for the piano.</p>\n<p>We will create classes to show white and black keys, and classes will be further used in CSS for designing.</p>\n<p>I added a class empty to some black keys because we don’t need the same amount of white keys and I tried to do it the simple way.</p>\n<p>In script.js, I grabbed all keys with className to make an array of all keys and created an array of sounds.</p>\n<p>I, then, iterated through every single element of array keys and added a click event to play a random sound.</p>\n<p>I, also, created a play() function to play a random sound on every keyboard button press on body element (I don’t recommend that but I wanted to make it simple).</p>\n<p>I created a sounds folder where I stored 21 different sounds of piano keys.</p>\n<h2 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a><a href=\"#indexhtml\"></a>index.html</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--AqHrw2rS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qju1wrknh426chh6en.png\" alt=\"HTML\"></a></p>\n<h2 id=\"style-css-click-to-zoom\"><a href=\"#style-css-click-to-zoom\" class=\"headerlink\" title=\"style.css ( click to zoom )\"></a><a href=\"#stylecss-click-to-zoom-\"></a>style.css ( click to zoom )</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0f-_9Uhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9196a4jg6rna5c89r9e8.png\" alt=\"CSS\"></a></p>\n<h2 id=\"script-js\"><a href=\"#script-js\" class=\"headerlink\" title=\"script.js\"></a><a href=\"#scriptjs\"></a>script.js</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fY-2ba_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptfpfqkuaiamqrsjukb6.png\" alt=\"JS\"></a></p>\n<p>NOTE :<br>There is room for improvement and this is only for beginners who just started as it covers simple concepts.</p>\n"},{"title":"How to Build a Todo Application With Python Flask, Heroku and Tailwind CSS","date":"2022-12-21T00:04:42.000Z","_content":"![$cover](images/flask.webp)\n\n[](#introduction)Introduction\n-----------------------------\n\nFlask is called a **MicroFramework** because it gives you the basic tools you need in order to build a web application in **Python**.  \nWith Flask you can build any kind of Web service or backend application.  \nIf you're beginning using Python for web development i suggest you to start with **Django**.\n\nIn this guide We will build a Todo application from Scratch with **Tailwind** A utility-first CSS framework for rapidly building custom designs.\n\n[](#requirements)Requirements\n-----------------------------\n\nTo follow along with me make sure you've :\n\n*   python3\n*   pip3\n*   pipenv\n*   Tailwind CDN\n\n[](#application-setup)Application Setup\n---------------------------------------\n\nCreate new folder and install the necessary tools.\n\nCreate a new folder  \n\n    $ mkdir flask_tailwind_todo_app\n    $ cd flask_tailwind_todo_app/\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a Virtual environment with **pipenv**  \n\n    $ pipenv shell\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n    Creating a virtualenv for this project…\n    Using /usr/bin/python3 (3.7.5) to create virtualenv…\n    ⠋Already using interpreter /usr/bin/python3\n    Using base prefix '/usr'\n    New python executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python3\n    Also creating executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python\n    Installing setuptools, pip, wheel...\n    done.\n    \n    Virtualenv location: /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD\n    Creating a Pipfile for this project…\n    Spawning environment shell (/usr/bin/zsh). Use 'exit' to leave.\n    . /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\n    username@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n    ╰─$ . /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\n    (flask_tailwind_todo_app-4wPj_lFD) username@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n    ╰─$\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis command will create a new virtual environment and activate it.\n\nYou can learn more about **Pipenv** in this [Post](https://www.ousseynoudiop.com/python-how-to-setup-your-virtualenv-correctly/python-how-to-setup-your-virtualenv-correctly/)\n\nInstall **flask**, **sqlalchemy** and **gunicorn**  \n\n    $ pipenv install flask flask-sqlalchemy gunicorn\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis will install Flask, Sqlalchemy and gunicorn in our virtual environment.\n\n[](#create-our-first-flask-app)Create our first Flask app\n---------------------------------------------------------\n\nCreate new file inside **flask\\_tailwind\\_todo\\_app** directory  \n\n    $ touch app.py\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nAdd  \n\n    from flask import Flask\n    \n    app = Flask(__name__)\n    \n    \n    @app.route(\"/\")\n    def home():\n       return \"Hello Flask\"\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen your terminal and run  \n\n    $ python app.py\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nYou'll see something like this  \n\n    * Serving Flask app \"app\" (lazy loading)\n    * Environment: production\n      WARNING: This is a development server. Do not use it in a production deployment.\n      Use a production WSGI server instead.\n    * Debug mode: on\n    * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n    * Restarting with stat\n    * Debugger is active!\n    * Debugger PIN: 278-921-051\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nGo to **[http://127.0.0.1:5000/](http://127.0.0.1:5000/)** what is the result ?\n\nIf everything work fine you'll see **Hello Flask**  \nLet's make it great by rendering a template\n\n[](#rendering-templates)Rendering Templates\n-------------------------------------------\n\n    from flask import Flask, render_template\n    \n    app = Flask(__name__)\n    \n    \n    @app.route(\"/\")\n    def home():\n       return render_template(\"home.html\")\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIf you run reload your browser you'll see an error like this **jinja2.exceptions.TemplateNotFound**\n\nLet's fix it by creating our **templates** folder\n\nInside **templates** folder create home.html file and add this code.  \n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Flask Todo App with Tailwind</title>\n      </head>\n      <body>\n        <h1>Hello Flask</h1>\n      </body>\n    </html>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nReload your browser what you see ?  \nLet's add some css with tailwind, in this tutorial i will use the **CDN** version.\n\nDon't use the **CDN** if you want to have all **Tailwind** features.  \n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <link\n          href=\"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css\"\n          rel=\"stylesheet\"\n        />\n        <title>Flask Todo App with Tailwind</title>\n      </head>\n      <body>\n        <h1 class=\"text-center\">Hello Flask</h1>\n      </body>\n    </html>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe will use a template from [Tailwind components](https://tailwindcomponents.com/component/todo-list-app) here is the source code\n\nEvery website in some point or other will need some custom **css** files, let's add static files.\n\n[](#static-files)Static files\n-----------------------------\n\nCreate **base.html** file and move all the content of **home.html** into it\n\nbase.html  \n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <link\n          href=\"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css\"\n          rel=\"stylesheet\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"{{ url_for('static', filename='css/style.css') }}\"\n        />\n        <title>\n          {% if title %}\n          {{ title }}\n          {% else %} Flask Todo App with Tailwind\n          {% endif %}\n        </title>\n      </head>\n      <body>\n        <div\n          class=\"h-100 w-full flex items-center justify-center bg-teal-lightest font-sans\"\n        >\n          {% block content %}\n    \n          {% endblock content %}\n        </div>\n      </body>\n    </html>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nhome.html  \n\n    {% extends \"base.html\" %} {% block content %}\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            Add another component to Tailwind Components\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red\"\n          >\n            Remove\n          </button>\n        </div>\n      </div>\n    </div>\n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nEverything here is static, let's add dynamic data...\n\n[](#working-with-database-crud)Working with database (CRUD)\n-----------------------------------------------------------\n\nWe will use **SQlite** as the database adapter  \n\n    from flask import Flask, render_template\n    from flask_sqlalchemy import SQLAlchemy  # add\n    from datetime import datetime  # add\n    \n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'  # add\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # add\n    db = SQLAlchemy(app)  # add\n    \n    # add\n    \n    \n    class Task(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       name = db.Column(db.String(80), nullable=False)\n       created_at = db.Column(db.DateTime, nullable=False,\n                              default=datetime.now)\n    \n       def __repr__(self):\n           return f'Todo : {self.name}'\n    \n    \n    @app.route(\"/\")\n    def home():\n       return render_template(\"home.html\")\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLet's add some data from Python interpreter(**REPL**)  \n\n    $ python\n    Python 3.7.5 (default, Nov 20 2019, 09:21:52)\n    [GCC 9.2.1 20191008] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    \n    >>> from app import db, Task\n    >>> db.create_all()\n    >>> new_task = Task(name=\"Learn Flask\")\n    >>> db.session.add(new_task)\n    >>> db.session.commit()\n    >>> tasks = Task.query.all()\n    >>> tasks\n    [Todo : Learn Flask]\n    >>>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n[](#getting-data)Getting data\n-----------------------------\n\nWe added our fist todo successfully from the **REPL** let's display the in our template **home.html**  \n\n    from flask import Flask, render_template\n    from flask_sqlalchemy import SQLAlchemy  # add\n    from datetime import datetime  # add\n    \n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'  # add\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # add\n    db = SQLAlchemy(app)  # add\n    \n    # add\n    \n    \n    class Task(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       name = db.Column(db.String(80), nullable=False)\n       created_at = db.Column(db.DateTime, nullable=False,\n                              default=datetime.now)\n    \n       def __repr__(self):\n           return f'Todo : {self.name}'\n    \n    \n    @app.route(\"/\")\n    def home():\n       tasks = Task.query.order_by(Task.created_at) # add\n       return render_template(\"home.html\", tasks=tasks) # add\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nChange your **home.html** file  \n\n    {% extends \"base.html\" %}\n    {% block content %}\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        {% if tasks %}\n        {% for task in tasks %}\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">{{ task.name }}</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        {% endfor %}\n        {% else %}\n        <p class=\"text-center\">No Task to display</p>\n        {% endif %}\n      </div>\n    </div>\n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen your browser, you'll see a list of tasks.\n\n[](#add-new-data)Add new data\n-----------------------------\n\nLet's create a new task from html templates\n\nChange the home fonction  \napp.py  \n\n    from flask import Flask, render_template, request, redirect  # add\n    from flask_sqlalchemy import SQLAlchemy  # add\n    from datetime import datetime  # add\n    \n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'  # add\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # add\n    db = SQLAlchemy(app)  # add\n    \n    # add\n    \n    \n    class Task(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       name = db.Column(db.String(80), nullable=False)\n       created_at = db.Column(db.DateTime, nullable=False,\n                              default=datetime.now)\n    \n       def __repr__(self):\n           return f'Todo : {self.name}'\n    \n    \n    @app.route(\"/\", methods=['POST', 'GET'])\n    def home():\n       if request.method == \"POST\": # add\n           name = request.form['name']\n           new_task = Task(name=name)\n           db.session.add(new_task)\n           db.session.commit()\n           return redirect('/')\n       else:\n           tasks = Task.query.order_by(Task.created_at).all()  # add\n       return render_template(\"home.html\", tasks=tasks)  # add\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nhome.html  \n\n    {% extends \"base.html\" %}\n    {% block content %}\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          {% include \"partials/_form.html\" %}\n        </div>\n      </div>\n      <div>\n        {% if tasks %}\n        {% for task in tasks %}\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">{{ task.name }}</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        {% endfor %}\n        {% else %}\n    \n        <p class=\"text-center\">No Task to display</p>\n    \n        {% endif %}\n      </div>\n    </div>\n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a new folder inside **templates**, rename it **partials** and put the form into it.\n\npartials/\\_form.html  \n\n    <form action=\"/\" method=\"post\" class=\"inline-flex\">\n      <input\n        class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n        placeholder=\"Add Todo\"\n        type=\"text\"\n        name=\"name\"\n      />\n      <button\n        class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n        type=\"submit\"\n      >\n        Add\n      </button>\n    </form>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow you can add new task, retrieve all tasks, what about remove a task ?  \nLet's do it\n\n[](#remove-data)Remove data\n---------------------------\n\nIn app.py  \n\n    # remove a task\n    ...\n    @app.route('/delete/<int:id>')\n    def delete(id):\n       task = Task.query.get_or_404(id)\n    \n       try:\n           db.session.delete(task)\n           db.session.commit()\n           return redirect('/')\n       except Exception:\n           return \"There was a problem deleting data.\"\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn home.html  \n\n    ...\n    <a\n      class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n      href=\"/delete/{{ task.id }}\"\n    >\n      Remove\n    </a>\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIt's very simple and intuitive, the last part before moving to production is the update task\n\n[](#update-data)Update data\n---------------------------\n\nIn app.py  \n\n    ...\n    \n    # update task\n    @app.route('/update/<int:id>', methods=['GET', 'POST'])\n    def update(id):\n       task = Task.query.get_or_404(id)\n    \n       if request.method == 'POST':\n           task.name = request.form['name']\n    \n           try:\n               db.session.commit()\n               return redirect('/')\n           except:\n               return \"There was a problem updating data.\"\n    \n       else:\n           title = \"Update Task\"\n           return render_template('update.html', title=title, task=task)\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn update.html  \n\n    {% extends 'base.html' %}\n    {% block content %}\n    <div class=\"mb-4\">\n      <h1 class=\"text-grey-darkest\">{{ title }}</h1>\n      <div class=\"flex mt-4\">\n        <form action=\"/update/{{ task.id }}\" method=\"post\" class=\"inline-flex\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n            type=\"text\"\n            name=\"name\"\n            value=\"{{ task.name }}\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n            type=\"submit\"\n          >\n            Update\n          </button>\n        </form>\n      </div>\n    </div>\n    \n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow we have fully functional **Flask** app, but if we wanna show the world our new app ?\n\nLet's deploy the application using **Heroku**\n\n[](#deploy-to-heroku)Deploy to Heroku\n-------------------------------------\n\nInitialize a new **git** repository  \n\n    $ git init\n    $ touch .gitignore\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn **.gitignore** file add :  \n\n    # Created by https://www.gitignore.io/api/flask\n    # Edit at https://www.gitignore.io/?templates=flask\n    \n    ### Flask ###\n    instance/*\n    !instance/.gitignore\n    .webassets-cache\n    \n    ### Flask.Python Stack ###\n    # Byte-compiled / optimized / DLL files\n    __pycache__/\n    *.py[cod]\n    *$py.class\n    \n    # C extensions\n    *.so\n    \n    # Distribution / packaging\n    .Python\n    build/\n    develop-eggs/\n    dist/\n    downloads/\n    eggs/\n    .eggs/\n    lib/\n    lib64/\n    parts/\n    sdist/\n    var/\n    wheels/\n    pip-wheel-metadata/\n    share/python-wheels/\n    *.egg-info/\n    .installed.cfg\n    *.egg\n    MANIFEST\n    \n    # PyInstaller\n    #  Usually these files are written by a python script from a template\n    #  before PyInstaller builds the exe, so as to inject date/other infos into it.\n    *.manifest\n    *.spec\n    \n    # Installer logs\n    pip-log.txt\n    pip-delete-this-directory.txt\n    \n    # Unit test / coverage reports\n    htmlcov/\n    .tox/\n    .nox/\n    .coverage\n    .coverage.*\n    .cache\n    nosetests.xml\n    coverage.xml\n    *.cover\n    .hypothesis/\n    .pytest_cache/\n    \n    # Translations\n    *.mo\n    *.pot\n    \n    # Scrapy stuff:\n    .scrapy\n    \n    # Sphinx documentation\n    docs/_build/\n    \n    # PyBuilder\n    target/\n    \n    # pyenv\n    .python-version\n    \n    # pipenv\n    #   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n    #   However, in case of collaboration, if having platform-specific dependencies or dependencies\n    #   having no cross-platform support, pipenv may install dependencies that don't work, or not\n    #   install all needed dependencies.\n    #Pipfile.lock\n    \n    # celery beat schedule file\n    celerybeat-schedule\n    \n    # SageMath parsed files\n    *.sage.py\n    \n    # Spyder project settings\n    .spyderproject\n    .spyproject\n    \n    # Rope project settings\n    .ropeproject\n    \n    # Mr Developer\n    .mr.developer.cfg\n    .project\n    .pydevproject\n    \n    # mkdocs documentation\n    /site\n    \n    # mypy\n    .mypy_cache/\n    .dmypy.json\n    dmypy.json\n    \n    # Pyre type checker\n    .pyre/\n    \n    # End of https://www.gitignore.io/api/flask\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate **Procfile** and add :  \n\n    $ touch Procfile\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n    web: gunicorn app:app\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLogin to **Heroku** with your account  \n\n    $ heroku login\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCommit your code to the repository  \n\n    $ git add .\n    $ git commit -m \"Initial commit\"\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a new app on Heroku  \n\n    heroku create flasktailwindtodo\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nDeploy your app to Heroku  \n\n    $ git push heroku master\n    #...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen your browser from the terminal using Heroku  \n\n    $ heroku open\n    #...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCongrats 😍 See you in next Tutorial","source":"_posts/flask.md","raw":"---\ntitle: How to Build a Todo Application With Python Flask, Heroku and Tailwind CSS\ndate: 2022-12-20 19:04:42\ntags:\n    - Python Flask\n    - Heroku\n    - Tailwind \n    - Application\n---\n![$cover](images/flask.webp)\n\n[](#introduction)Introduction\n-----------------------------\n\nFlask is called a **MicroFramework** because it gives you the basic tools you need in order to build a web application in **Python**.  \nWith Flask you can build any kind of Web service or backend application.  \nIf you're beginning using Python for web development i suggest you to start with **Django**.\n\nIn this guide We will build a Todo application from Scratch with **Tailwind** A utility-first CSS framework for rapidly building custom designs.\n\n[](#requirements)Requirements\n-----------------------------\n\nTo follow along with me make sure you've :\n\n*   python3\n*   pip3\n*   pipenv\n*   Tailwind CDN\n\n[](#application-setup)Application Setup\n---------------------------------------\n\nCreate new folder and install the necessary tools.\n\nCreate a new folder  \n\n    $ mkdir flask_tailwind_todo_app\n    $ cd flask_tailwind_todo_app/\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a Virtual environment with **pipenv**  \n\n    $ pipenv shell\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n    Creating a virtualenv for this project…\n    Using /usr/bin/python3 (3.7.5) to create virtualenv…\n    ⠋Already using interpreter /usr/bin/python3\n    Using base prefix '/usr'\n    New python executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python3\n    Also creating executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python\n    Installing setuptools, pip, wheel...\n    done.\n    \n    Virtualenv location: /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD\n    Creating a Pipfile for this project…\n    Spawning environment shell (/usr/bin/zsh). Use 'exit' to leave.\n    . /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\n    username@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n    ╰─$ . /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\n    (flask_tailwind_todo_app-4wPj_lFD) username@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n    ╰─$\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis command will create a new virtual environment and activate it.\n\nYou can learn more about **Pipenv** in this [Post](https://www.ousseynoudiop.com/python-how-to-setup-your-virtualenv-correctly/python-how-to-setup-your-virtualenv-correctly/)\n\nInstall **flask**, **sqlalchemy** and **gunicorn**  \n\n    $ pipenv install flask flask-sqlalchemy gunicorn\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis will install Flask, Sqlalchemy and gunicorn in our virtual environment.\n\n[](#create-our-first-flask-app)Create our first Flask app\n---------------------------------------------------------\n\nCreate new file inside **flask\\_tailwind\\_todo\\_app** directory  \n\n    $ touch app.py\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nAdd  \n\n    from flask import Flask\n    \n    app = Flask(__name__)\n    \n    \n    @app.route(\"/\")\n    def home():\n       return \"Hello Flask\"\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen your terminal and run  \n\n    $ python app.py\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nYou'll see something like this  \n\n    * Serving Flask app \"app\" (lazy loading)\n    * Environment: production\n      WARNING: This is a development server. Do not use it in a production deployment.\n      Use a production WSGI server instead.\n    * Debug mode: on\n    * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n    * Restarting with stat\n    * Debugger is active!\n    * Debugger PIN: 278-921-051\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nGo to **[http://127.0.0.1:5000/](http://127.0.0.1:5000/)** what is the result ?\n\nIf everything work fine you'll see **Hello Flask**  \nLet's make it great by rendering a template\n\n[](#rendering-templates)Rendering Templates\n-------------------------------------------\n\n    from flask import Flask, render_template\n    \n    app = Flask(__name__)\n    \n    \n    @app.route(\"/\")\n    def home():\n       return render_template(\"home.html\")\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIf you run reload your browser you'll see an error like this **jinja2.exceptions.TemplateNotFound**\n\nLet's fix it by creating our **templates** folder\n\nInside **templates** folder create home.html file and add this code.  \n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Flask Todo App with Tailwind</title>\n      </head>\n      <body>\n        <h1>Hello Flask</h1>\n      </body>\n    </html>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nReload your browser what you see ?  \nLet's add some css with tailwind, in this tutorial i will use the **CDN** version.\n\nDon't use the **CDN** if you want to have all **Tailwind** features.  \n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <link\n          href=\"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css\"\n          rel=\"stylesheet\"\n        />\n        <title>Flask Todo App with Tailwind</title>\n      </head>\n      <body>\n        <h1 class=\"text-center\">Hello Flask</h1>\n      </body>\n    </html>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe will use a template from [Tailwind components](https://tailwindcomponents.com/component/todo-list-app) here is the source code\n\nEvery website in some point or other will need some custom **css** files, let's add static files.\n\n[](#static-files)Static files\n-----------------------------\n\nCreate **base.html** file and move all the content of **home.html** into it\n\nbase.html  \n\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <link\n          href=\"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css\"\n          rel=\"stylesheet\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"{{ url_for('static', filename='css/style.css') }}\"\n        />\n        <title>\n          {% if title %}\n          {{ title }}\n          {% else %} Flask Todo App with Tailwind\n          {% endif %}\n        </title>\n      </head>\n      <body>\n        <div\n          class=\"h-100 w-full flex items-center justify-center bg-teal-lightest font-sans\"\n        >\n          {% block content %}\n    \n          {% endblock content %}\n        </div>\n      </body>\n    </html>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nhome.html  \n\n    {% extends \"base.html\" %} {% block content %}\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            Add another component to Tailwind Components\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red\"\n          >\n            Remove\n          </button>\n        </div>\n      </div>\n    </div>\n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nEverything here is static, let's add dynamic data...\n\n[](#working-with-database-crud)Working with database (CRUD)\n-----------------------------------------------------------\n\nWe will use **SQlite** as the database adapter  \n\n    from flask import Flask, render_template\n    from flask_sqlalchemy import SQLAlchemy  # add\n    from datetime import datetime  # add\n    \n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'  # add\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # add\n    db = SQLAlchemy(app)  # add\n    \n    # add\n    \n    \n    class Task(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       name = db.Column(db.String(80), nullable=False)\n       created_at = db.Column(db.DateTime, nullable=False,\n                              default=datetime.now)\n    \n       def __repr__(self):\n           return f'Todo : {self.name}'\n    \n    \n    @app.route(\"/\")\n    def home():\n       return render_template(\"home.html\")\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLet's add some data from Python interpreter(**REPL**)  \n\n    $ python\n    Python 3.7.5 (default, Nov 20 2019, 09:21:52)\n    [GCC 9.2.1 20191008] on linux\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    \n    >>> from app import db, Task\n    >>> db.create_all()\n    >>> new_task = Task(name=\"Learn Flask\")\n    >>> db.session.add(new_task)\n    >>> db.session.commit()\n    >>> tasks = Task.query.all()\n    >>> tasks\n    [Todo : Learn Flask]\n    >>>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n[](#getting-data)Getting data\n-----------------------------\n\nWe added our fist todo successfully from the **REPL** let's display the in our template **home.html**  \n\n    from flask import Flask, render_template\n    from flask_sqlalchemy import SQLAlchemy  # add\n    from datetime import datetime  # add\n    \n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'  # add\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # add\n    db = SQLAlchemy(app)  # add\n    \n    # add\n    \n    \n    class Task(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       name = db.Column(db.String(80), nullable=False)\n       created_at = db.Column(db.DateTime, nullable=False,\n                              default=datetime.now)\n    \n       def __repr__(self):\n           return f'Todo : {self.name}'\n    \n    \n    @app.route(\"/\")\n    def home():\n       tasks = Task.query.order_by(Task.created_at) # add\n       return render_template(\"home.html\", tasks=tasks) # add\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nChange your **home.html** file  \n\n    {% extends \"base.html\" %}\n    {% block content %}\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        {% if tasks %}\n        {% for task in tasks %}\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">{{ task.name }}</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        {% endfor %}\n        {% else %}\n        <p class=\"text-center\">No Task to display</p>\n        {% endif %}\n      </div>\n    </div>\n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen your browser, you'll see a list of tasks.\n\n[](#add-new-data)Add new data\n-----------------------------\n\nLet's create a new task from html templates\n\nChange the home fonction  \napp.py  \n\n    from flask import Flask, render_template, request, redirect  # add\n    from flask_sqlalchemy import SQLAlchemy  # add\n    from datetime import datetime  # add\n    \n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo.db'  # add\n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # add\n    db = SQLAlchemy(app)  # add\n    \n    # add\n    \n    \n    class Task(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       name = db.Column(db.String(80), nullable=False)\n       created_at = db.Column(db.DateTime, nullable=False,\n                              default=datetime.now)\n    \n       def __repr__(self):\n           return f'Todo : {self.name}'\n    \n    \n    @app.route(\"/\", methods=['POST', 'GET'])\n    def home():\n       if request.method == \"POST\": # add\n           name = request.form['name']\n           new_task = Task(name=name)\n           db.session.add(new_task)\n           db.session.commit()\n           return redirect('/')\n       else:\n           tasks = Task.query.order_by(Task.created_at).all()  # add\n       return render_template(\"home.html\", tasks=tasks)  # add\n    \n    \n    if __name__ == \"__main__\":\n       app.run(debug=True)\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nhome.html  \n\n    {% extends \"base.html\" %}\n    {% block content %}\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          {% include \"partials/_form.html\" %}\n        </div>\n      </div>\n      <div>\n        {% if tasks %}\n        {% for task in tasks %}\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">{{ task.name }}</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        {% endfor %}\n        {% else %}\n    \n        <p class=\"text-center\">No Task to display</p>\n    \n        {% endif %}\n      </div>\n    </div>\n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a new folder inside **templates**, rename it **partials** and put the form into it.\n\npartials/\\_form.html  \n\n    <form action=\"/\" method=\"post\" class=\"inline-flex\">\n      <input\n        class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n        placeholder=\"Add Todo\"\n        type=\"text\"\n        name=\"name\"\n      />\n      <button\n        class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n        type=\"submit\"\n      >\n        Add\n      </button>\n    </form>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow you can add new task, retrieve all tasks, what about remove a task ?  \nLet's do it\n\n[](#remove-data)Remove data\n---------------------------\n\nIn app.py  \n\n    # remove a task\n    ...\n    @app.route('/delete/<int:id>')\n    def delete(id):\n       task = Task.query.get_or_404(id)\n    \n       try:\n           db.session.delete(task)\n           db.session.commit()\n           return redirect('/')\n       except Exception:\n           return \"There was a problem deleting data.\"\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn home.html  \n\n    ...\n    <a\n      class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n      href=\"/delete/{{ task.id }}\"\n    >\n      Remove\n    </a>\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIt's very simple and intuitive, the last part before moving to production is the update task\n\n[](#update-data)Update data\n---------------------------\n\nIn app.py  \n\n    ...\n    \n    # update task\n    @app.route('/update/<int:id>', methods=['GET', 'POST'])\n    def update(id):\n       task = Task.query.get_or_404(id)\n    \n       if request.method == 'POST':\n           task.name = request.form['name']\n    \n           try:\n               db.session.commit()\n               return redirect('/')\n           except:\n               return \"There was a problem updating data.\"\n    \n       else:\n           title = \"Update Task\"\n           return render_template('update.html', title=title, task=task)\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn update.html  \n\n    {% extends 'base.html' %}\n    {% block content %}\n    <div class=\"mb-4\">\n      <h1 class=\"text-grey-darkest\">{{ title }}</h1>\n      <div class=\"flex mt-4\">\n        <form action=\"/update/{{ task.id }}\" method=\"post\" class=\"inline-flex\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n            type=\"text\"\n            name=\"name\"\n            value=\"{{ task.name }}\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n            type=\"submit\"\n          >\n            Update\n          </button>\n        </form>\n      </div>\n    </div>\n    \n    {% endblock content %}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow we have fully functional **Flask** app, but if we wanna show the world our new app ?\n\nLet's deploy the application using **Heroku**\n\n[](#deploy-to-heroku)Deploy to Heroku\n-------------------------------------\n\nInitialize a new **git** repository  \n\n    $ git init\n    $ touch .gitignore\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn **.gitignore** file add :  \n\n    # Created by https://www.gitignore.io/api/flask\n    # Edit at https://www.gitignore.io/?templates=flask\n    \n    ### Flask ###\n    instance/*\n    !instance/.gitignore\n    .webassets-cache\n    \n    ### Flask.Python Stack ###\n    # Byte-compiled / optimized / DLL files\n    __pycache__/\n    *.py[cod]\n    *$py.class\n    \n    # C extensions\n    *.so\n    \n    # Distribution / packaging\n    .Python\n    build/\n    develop-eggs/\n    dist/\n    downloads/\n    eggs/\n    .eggs/\n    lib/\n    lib64/\n    parts/\n    sdist/\n    var/\n    wheels/\n    pip-wheel-metadata/\n    share/python-wheels/\n    *.egg-info/\n    .installed.cfg\n    *.egg\n    MANIFEST\n    \n    # PyInstaller\n    #  Usually these files are written by a python script from a template\n    #  before PyInstaller builds the exe, so as to inject date/other infos into it.\n    *.manifest\n    *.spec\n    \n    # Installer logs\n    pip-log.txt\n    pip-delete-this-directory.txt\n    \n    # Unit test / coverage reports\n    htmlcov/\n    .tox/\n    .nox/\n    .coverage\n    .coverage.*\n    .cache\n    nosetests.xml\n    coverage.xml\n    *.cover\n    .hypothesis/\n    .pytest_cache/\n    \n    # Translations\n    *.mo\n    *.pot\n    \n    # Scrapy stuff:\n    .scrapy\n    \n    # Sphinx documentation\n    docs/_build/\n    \n    # PyBuilder\n    target/\n    \n    # pyenv\n    .python-version\n    \n    # pipenv\n    #   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n    #   However, in case of collaboration, if having platform-specific dependencies or dependencies\n    #   having no cross-platform support, pipenv may install dependencies that don't work, or not\n    #   install all needed dependencies.\n    #Pipfile.lock\n    \n    # celery beat schedule file\n    celerybeat-schedule\n    \n    # SageMath parsed files\n    *.sage.py\n    \n    # Spyder project settings\n    .spyderproject\n    .spyproject\n    \n    # Rope project settings\n    .ropeproject\n    \n    # Mr Developer\n    .mr.developer.cfg\n    .project\n    .pydevproject\n    \n    # mkdocs documentation\n    /site\n    \n    # mypy\n    .mypy_cache/\n    .dmypy.json\n    dmypy.json\n    \n    # Pyre type checker\n    .pyre/\n    \n    # End of https://www.gitignore.io/api/flask\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate **Procfile** and add :  \n\n    $ touch Procfile\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n    web: gunicorn app:app\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLogin to **Heroku** with your account  \n\n    $ heroku login\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCommit your code to the repository  \n\n    $ git add .\n    $ git commit -m \"Initial commit\"\n    ...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCreate a new app on Heroku  \n\n    heroku create flasktailwindtodo\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nDeploy your app to Heroku  \n\n    $ git push heroku master\n    #...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOpen your browser from the terminal using Heroku  \n\n    $ heroku open\n    #...\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nCongrats 😍 See you in next Tutorial","slug":"flask","published":1,"updated":"2022-12-22T15:15:25.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irk0001twlh6ul1g6f1","content":"<p><img src=\"/images/flask.webp\" alt=\"$cover\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#introduction\"></a>Introduction</h2><p>Flask is called a <strong>MicroFramework</strong> because it gives you the basic tools you need in order to build a web application in <strong>Python</strong>.<br>With Flask you can build any kind of Web service or backend application.<br>If you’re beginning using Python for web development i suggest you to start with <strong>Django</strong>.</p>\n<p>In this guide We will build a Todo application from Scratch with <strong>Tailwind</strong> A utility-first CSS framework for rapidly building custom designs.</p>\n<h2 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a><a href=\"#requirements\"></a>Requirements</h2><p>To follow along with me make sure you’ve :</p>\n<ul>\n<li>python3</li>\n<li>pip3</li>\n<li>pipenv</li>\n<li>Tailwind CDN</li>\n</ul>\n<h2 id=\"Application-Setup\"><a href=\"#Application-Setup\" class=\"headerlink\" title=\"Application Setup\"></a><a href=\"#application-setup\"></a>Application Setup</h2><p>Create new folder and install the necessary tools.</p>\n<p>Create a new folder  </p>\n<pre><code>$ mkdir flask_tailwind_todo_app\n$ cd flask_tailwind_todo_app/\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create a Virtual environment with <strong>pipenv</strong>  </p>\n<pre><code>$ pipenv shell\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<pre><code>Creating a virtualenv for this project…\nUsing /usr/bin/python3 (3.7.5) to create virtualenv…\n⠋Already using interpreter /usr/bin/python3\nUsing base prefix &#39;/usr&#39;\nNew python executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python3\nAlso creating executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python\nInstalling setuptools, pip, wheel...\ndone.\n\nVirtualenv location: /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD\nCreating a Pipfile for this project…\nSpawning environment shell (/usr/bin/zsh). Use &#39;exit&#39; to leave.\n. /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\nusername@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n╰─$ . /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\n(flask_tailwind_todo_app-4wPj_lFD) username@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n╰─$\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This command will create a new virtual environment and activate it.</p>\n<p>You can learn more about <strong>Pipenv</strong> in this <a href=\"https://www.ousseynoudiop.com/python-how-to-setup-your-virtualenv-correctly/python-how-to-setup-your-virtualenv-correctly/\">Post</a></p>\n<p>Install <strong>flask</strong>, <strong>sqlalchemy</strong> and <strong>gunicorn</strong>  </p>\n<pre><code>$ pipenv install flask flask-sqlalchemy gunicorn\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This will install Flask, Sqlalchemy and gunicorn in our virtual environment.</p>\n<h2 id=\"Create-our-first-Flask-app\"><a href=\"#Create-our-first-Flask-app\" class=\"headerlink\" title=\"Create our first Flask app\"></a><a href=\"#create-our-first-flask-app\"></a>Create our first Flask app</h2><p>Create new file inside <strong>flask_tailwind_todo_app</strong> directory  </p>\n<pre><code>$ touch app.py\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Add  </p>\n<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   return &quot;Hello Flask&quot;\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Open your terminal and run  </p>\n<pre><code>$ python app.py\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>You’ll see something like this  </p>\n<pre><code>* Serving Flask app &quot;app&quot; (lazy loading)\n* Environment: production\n  WARNING: This is a development server. Do not use it in a production deployment.\n  Use a production WSGI server instead.\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 278-921-051\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Go to <strong><a href=\"http://127.0.0.1:5000/\">http://127.0.0.1:5000/</a></strong> what is the result ?</p>\n<p>If everything work fine you’ll see <strong>Hello Flask</strong><br>Let’s make it great by rendering a template</p>\n<h2 id=\"Rendering-Templates\"><a href=\"#Rendering-Templates\" class=\"headerlink\" title=\"Rendering Templates\"></a><a href=\"#rendering-templates\"></a>Rendering Templates</h2><pre><code>from flask import Flask, render_template\n\napp = Flask(__name__)\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   return render_template(&quot;home.html&quot;)\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>If you run reload your browser you’ll see an error like this <strong>jinja2.exceptions.TemplateNotFound</strong></p>\n<p>Let’s fix it by creating our <strong>templates</strong> folder</p>\n<p>Inside <strong>templates</strong> folder create home.html file and add this code.  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;Flask Todo App with Tailwind&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello Flask&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Reload your browser what you see ?<br>Let’s add some css with tailwind, in this tutorial i will use the <strong>CDN</strong> version.</p>\n<p>Don’t use the <strong>CDN</strong> if you want to have all <strong>Tailwind</strong> features.  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;link\n      href=&quot;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n    &lt;title&gt;Flask Todo App with Tailwind&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 class=&quot;text-center&quot;&gt;Hello Flask&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We will use a template from <a href=\"https://tailwindcomponents.com/component/todo-list-app\">Tailwind components</a> here is the source code</p>\n<p>Every website in some point or other will need some custom <strong>css</strong> files, let’s add static files.</p>\n<h2 id=\"Static-files\"><a href=\"#Static-files\" class=\"headerlink\" title=\"Static files\"></a><a href=\"#static-files\"></a>Static files</h2><p>Create <strong>base.html</strong> file and move all the content of <strong>home.html</strong> into it</p>\n<p>base.html  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;link\n      href=&quot;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n    &lt;link\n      rel=&quot;stylesheet&quot;\n      href=&quot;&#123;&#123; url_for('static', filename='css/style.css') &#125;&#125;&quot;\n    /&gt;\n    &lt;title&gt;\n      &#123;% if title %&#125;\n          &#123;&#123; title &#125;&#125;\n          &#123;% else %&#125; Flask Todo App with Tailwind\n          &#123;% endif %&#125;\n    &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div\n      class=&quot;h-100 w-full flex items-center justify-center bg-teal-lightest font-sans&quot;\n    &gt;\n      &#123;% block content %&#125;\n    \n          &#123;% endblock content %&#125;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>home.html  </p>\n<pre><code>&#123;% extends \"base.html\" %&#125; &#123;% block content %&#125;\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            Add another component to Tailwind Components\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red\"\n          >\n            Remove\n          </button>\n        </div>\n      </div>\n    </div>\n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Everything here is static, let’s add dynamic data…</p>\n<h2 id=\"Working-with-database-CRUD\"><a href=\"#Working-with-database-CRUD\" class=\"headerlink\" title=\"Working with database (CRUD)\"></a><a href=\"#working-with-database-crud\"></a>Working with database (CRUD)</h2><p>We will use <strong>SQlite</strong> as the database adapter  </p>\n<pre><code>from flask import Flask, render_template\nfrom flask_sqlalchemy import SQLAlchemy  # add\nfrom datetime import datetime  # add\n\napp = Flask(__name__)\napp.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///todo.db&#39;  # add\napp.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False  # add\ndb = SQLAlchemy(app)  # add\n\n# add\n\n\nclass Task(db.Model):\n   id = db.Column(db.Integer, primary_key=True)\n   name = db.Column(db.String(80), nullable=False)\n   created_at = db.Column(db.DateTime, nullable=False,\n                          default=datetime.now)\n\n   def __repr__(self):\n       return f&#39;Todo : &#123;self.name&#125;&#39;\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   return render_template(&quot;home.html&quot;)\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Let’s add some data from Python interpreter(<strong>REPL</strong>)  </p>\n<pre><code>$ python\nPython 3.7.5 (default, Nov 20 2019, 09:21:52)\n[GCC 9.2.1 20191008] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n\n&gt;&gt;&gt; from app import db, Task\n&gt;&gt;&gt; db.create_all()\n&gt;&gt;&gt; new_task = Task(name=&quot;Learn Flask&quot;)\n&gt;&gt;&gt; db.session.add(new_task)\n&gt;&gt;&gt; db.session.commit()\n&gt;&gt;&gt; tasks = Task.query.all()\n&gt;&gt;&gt; tasks\n[Todo : Learn Flask]\n&gt;&gt;&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h2 id=\"Getting-data\"><a href=\"#Getting-data\" class=\"headerlink\" title=\"Getting data\"></a><a href=\"#getting-data\"></a>Getting data</h2><p>We added our fist todo successfully from the <strong>REPL</strong> let’s display the in our template <strong>home.html</strong>  </p>\n<pre><code>from flask import Flask, render_template\nfrom flask_sqlalchemy import SQLAlchemy  # add\nfrom datetime import datetime  # add\n\napp = Flask(__name__)\napp.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///todo.db&#39;  # add\napp.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False  # add\ndb = SQLAlchemy(app)  # add\n\n# add\n\n\nclass Task(db.Model):\n   id = db.Column(db.Integer, primary_key=True)\n   name = db.Column(db.String(80), nullable=False)\n   created_at = db.Column(db.DateTime, nullable=False,\n                          default=datetime.now)\n\n   def __repr__(self):\n       return f&#39;Todo : &#123;self.name&#125;&#39;\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   tasks = Task.query.order_by(Task.created_at) # add\n   return render_template(&quot;home.html&quot;, tasks=tasks) # add\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Change your <strong>home.html</strong> file  </p>\n<pre><code>&#123;% extends \"base.html\" %&#125;\n&#123;% block content %&#125;\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        &#123;% if tasks %&#125;\n        &#123;% for task in tasks %&#125;\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">&#123;&#123; task.name &#125;&#125;</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        &#123;% endfor %&#125;\n        &#123;% else %&#125;\n        <p class=\"text-center\">No Task to display</p>\n        &#123;% endif %&#125;\n      </div>\n    </div>\n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Open your browser, you’ll see a list of tasks.</p>\n<h2 id=\"Add-new-data\"><a href=\"#Add-new-data\" class=\"headerlink\" title=\"Add new data\"></a><a href=\"#add-new-data\"></a>Add new data</h2><p>Let’s create a new task from html templates</p>\n<p>Change the home fonction<br>app.py  </p>\n<pre><code>from flask import Flask, render_template, request, redirect  # add\nfrom flask_sqlalchemy import SQLAlchemy  # add\nfrom datetime import datetime  # add\n\napp = Flask(__name__)\napp.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///todo.db&#39;  # add\napp.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False  # add\ndb = SQLAlchemy(app)  # add\n\n# add\n\n\nclass Task(db.Model):\n   id = db.Column(db.Integer, primary_key=True)\n   name = db.Column(db.String(80), nullable=False)\n   created_at = db.Column(db.DateTime, nullable=False,\n                          default=datetime.now)\n\n   def __repr__(self):\n       return f&#39;Todo : &#123;self.name&#125;&#39;\n\n\n@app.route(&quot;/&quot;, methods=[&#39;POST&#39;, &#39;GET&#39;])\ndef home():\n   if request.method == &quot;POST&quot;: # add\n       name = request.form[&#39;name&#39;]\n       new_task = Task(name=name)\n       db.session.add(new_task)\n       db.session.commit()\n       return redirect(&#39;/&#39;)\n   else:\n       tasks = Task.query.order_by(Task.created_at).all()  # add\n   return render_template(&quot;home.html&quot;, tasks=tasks)  # add\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>home.html  </p>\n<pre><code>&#123;% extends \"base.html\" %&#125;\n&#123;% block content %&#125;\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          &#123;% include \"partials/_form.html\" %&#125;\n        </div>\n      </div>\n      <div>\n        &#123;% if tasks %&#125;\n        &#123;% for task in tasks %&#125;\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">&#123;&#123; task.name &#125;&#125;</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        &#123;% endfor %&#125;\n        &#123;% else %&#125;\n    \n        <p class=\"text-center\">No Task to display</p>\n    \n        &#123;% endif %&#125;\n      </div>\n    </div>\n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create a new folder inside <strong>templates</strong>, rename it <strong>partials</strong> and put the form into it.</p>\n<p>partials&#x2F;_form.html  </p>\n<pre><code>&lt;form action=&quot;/&quot; method=&quot;post&quot; class=&quot;inline-flex&quot;&gt;\n  &lt;input\n    class=&quot;shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker&quot;\n    placeholder=&quot;Add Todo&quot;\n    type=&quot;text&quot;\n    name=&quot;name&quot;\n  /&gt;\n  &lt;button\n    class=&quot;flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600&quot;\n    type=&quot;submit&quot;\n  &gt;\n    Add\n  &lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now you can add new task, retrieve all tasks, what about remove a task ?<br>Let’s do it</p>\n<h2 id=\"Remove-data\"><a href=\"#Remove-data\" class=\"headerlink\" title=\"Remove data\"></a><a href=\"#remove-data\"></a>Remove data</h2><p>In app.py  </p>\n<pre><code># remove a task\n...\n@app.route(&#39;/delete/&lt;int:id&gt;&#39;)\ndef delete(id):\n   task = Task.query.get_or_404(id)\n\n   try:\n       db.session.delete(task)\n       db.session.commit()\n       return redirect(&#39;/&#39;)\n   except Exception:\n       return &quot;There was a problem deleting data.&quot;\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In home.html  </p>\n<pre><code>...\n&lt;a\n  class=&quot;flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600&quot;\n  href=&quot;/delete/&#123;&#123; task.id &#125;&#125;&quot;\n&gt;\n  Remove\n&lt;/a&gt;\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>It’s very simple and intuitive, the last part before moving to production is the update task</p>\n<h2 id=\"Update-data\"><a href=\"#Update-data\" class=\"headerlink\" title=\"Update data\"></a><a href=\"#update-data\"></a>Update data</h2><p>In app.py  </p>\n<pre><code>...\n\n# update task\n@app.route(&#39;/update/&lt;int:id&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])\ndef update(id):\n   task = Task.query.get_or_404(id)\n\n   if request.method == &#39;POST&#39;:\n       task.name = request.form[&#39;name&#39;]\n\n       try:\n           db.session.commit()\n           return redirect(&#39;/&#39;)\n       except:\n           return &quot;There was a problem updating data.&quot;\n\n   else:\n       title = &quot;Update Task&quot;\n       return render_template(&#39;update.html&#39;, title=title, task=task)\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In update.html  </p>\n<pre><code>&#123;% extends 'base.html' %&#125;\n&#123;% block content %&#125;\n    <div class=\"mb-4\">\n      <h1 class=\"text-grey-darkest\">&#123;&#123; title &#125;&#125;</h1>\n      <div class=\"flex mt-4\">\n        <form action=\"/update/&#123;&#123; task.id &#125;&#125;\" method=\"post\" class=\"inline-flex\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n            type=\"text\"\n            name=\"name\"\n            value=\"&#123;&#123; task.name &#125;&#125;\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n            type=\"submit\"\n          >\n            Update\n          </button>\n        </form>\n      </div>\n    </div>\n    \n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now we have fully functional <strong>Flask</strong> app, but if we wanna show the world our new app ?</p>\n<p>Let’s deploy the application using <strong>Heroku</strong></p>\n<h2 id=\"Deploy-to-Heroku\"><a href=\"#Deploy-to-Heroku\" class=\"headerlink\" title=\"Deploy to Heroku\"></a><a href=\"#deploy-to-heroku\"></a>Deploy to Heroku</h2><p>Initialize a new <strong>git</strong> repository  </p>\n<pre><code>$ git init\n$ touch .gitignore\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In <strong>.gitignore</strong> file add :  </p>\n<pre><code># Created by https://www.gitignore.io/api/flask\n# Edit at https://www.gitignore.io/?templates=flask\n\n### Flask ###\ninstance/*\n!instance/.gitignore\n.webassets-cache\n\n### Flask.Python Stack ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don&#39;t work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# End of https://www.gitignore.io/api/flask\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create <strong>Procfile</strong> and add :  </p>\n<pre><code>$ touch Procfile\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<pre><code>web: gunicorn app:app\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Login to <strong>Heroku</strong> with your account  </p>\n<pre><code>$ heroku login\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Commit your code to the repository  </p>\n<pre><code>$ git add .\n$ git commit -m &quot;Initial commit&quot;\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create a new app on Heroku  </p>\n<pre><code>heroku create flasktailwindtodo\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Deploy your app to Heroku  </p>\n<pre><code>$ git push heroku master\n#...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Open your browser from the terminal using Heroku  </p>\n<pre><code>$ heroku open\n#...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Congrats 😍 See you in next Tutorial</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/flask.webp\" alt=\"$cover\"></p>\n<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#introduction\"></a>Introduction</h2><p>Flask is called a <strong>MicroFramework</strong> because it gives you the basic tools you need in order to build a web application in <strong>Python</strong>.<br>With Flask you can build any kind of Web service or backend application.<br>If you’re beginning using Python for web development i suggest you to start with <strong>Django</strong>.</p>\n<p>In this guide We will build a Todo application from Scratch with <strong>Tailwind</strong> A utility-first CSS framework for rapidly building custom designs.</p>\n<h2 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a><a href=\"#requirements\"></a>Requirements</h2><p>To follow along with me make sure you’ve :</p>\n<ul>\n<li>python3</li>\n<li>pip3</li>\n<li>pipenv</li>\n<li>Tailwind CDN</li>\n</ul>\n<h2 id=\"Application-Setup\"><a href=\"#Application-Setup\" class=\"headerlink\" title=\"Application Setup\"></a><a href=\"#application-setup\"></a>Application Setup</h2><p>Create new folder and install the necessary tools.</p>\n<p>Create a new folder  </p>\n<pre><code>$ mkdir flask_tailwind_todo_app\n$ cd flask_tailwind_todo_app/\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create a Virtual environment with <strong>pipenv</strong>  </p>\n<pre><code>$ pipenv shell\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<pre><code>Creating a virtualenv for this project…\nUsing /usr/bin/python3 (3.7.5) to create virtualenv…\n⠋Already using interpreter /usr/bin/python3\nUsing base prefix &#39;/usr&#39;\nNew python executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python3\nAlso creating executable in /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/python\nInstalling setuptools, pip, wheel...\ndone.\n\nVirtualenv location: /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD\nCreating a Pipfile for this project…\nSpawning environment shell (/usr/bin/zsh). Use &#39;exit&#39; to leave.\n. /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\nusername@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n╰─$ . /home/username/.local/share/virtualenvs/flask_tailwind_todo_app-4wPj_lFD/bin/activate\n(flask_tailwind_todo_app-4wPj_lFD) username@username-Latitude-7480 ~/projects/xarala/source-code/flask_tailwind_todo_app\n╰─$\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This command will create a new virtual environment and activate it.</p>\n<p>You can learn more about <strong>Pipenv</strong> in this <a href=\"https://www.ousseynoudiop.com/python-how-to-setup-your-virtualenv-correctly/python-how-to-setup-your-virtualenv-correctly/\">Post</a></p>\n<p>Install <strong>flask</strong>, <strong>sqlalchemy</strong> and <strong>gunicorn</strong>  </p>\n<pre><code>$ pipenv install flask flask-sqlalchemy gunicorn\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This will install Flask, Sqlalchemy and gunicorn in our virtual environment.</p>\n<h2 id=\"Create-our-first-Flask-app\"><a href=\"#Create-our-first-Flask-app\" class=\"headerlink\" title=\"Create our first Flask app\"></a><a href=\"#create-our-first-flask-app\"></a>Create our first Flask app</h2><p>Create new file inside <strong>flask_tailwind_todo_app</strong> directory  </p>\n<pre><code>$ touch app.py\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Add  </p>\n<pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   return &quot;Hello Flask&quot;\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Open your terminal and run  </p>\n<pre><code>$ python app.py\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>You’ll see something like this  </p>\n<pre><code>* Serving Flask app &quot;app&quot; (lazy loading)\n* Environment: production\n  WARNING: This is a development server. Do not use it in a production deployment.\n  Use a production WSGI server instead.\n* Debug mode: on\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 278-921-051\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Go to <strong><a href=\"http://127.0.0.1:5000/\">http://127.0.0.1:5000/</a></strong> what is the result ?</p>\n<p>If everything work fine you’ll see <strong>Hello Flask</strong><br>Let’s make it great by rendering a template</p>\n<h2 id=\"Rendering-Templates\"><a href=\"#Rendering-Templates\" class=\"headerlink\" title=\"Rendering Templates\"></a><a href=\"#rendering-templates\"></a>Rendering Templates</h2><pre><code>from flask import Flask, render_template\n\napp = Flask(__name__)\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   return render_template(&quot;home.html&quot;)\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>If you run reload your browser you’ll see an error like this <strong>jinja2.exceptions.TemplateNotFound</strong></p>\n<p>Let’s fix it by creating our <strong>templates</strong> folder</p>\n<p>Inside <strong>templates</strong> folder create home.html file and add this code.  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;title&gt;Flask Todo App with Tailwind&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello Flask&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Reload your browser what you see ?<br>Let’s add some css with tailwind, in this tutorial i will use the <strong>CDN</strong> version.</p>\n<p>Don’t use the <strong>CDN</strong> if you want to have all <strong>Tailwind</strong> features.  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;link\n      href=&quot;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n    &lt;title&gt;Flask Todo App with Tailwind&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 class=&quot;text-center&quot;&gt;Hello Flask&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We will use a template from <a href=\"https://tailwindcomponents.com/component/todo-list-app\">Tailwind components</a> here is the source code</p>\n<p>Every website in some point or other will need some custom <strong>css</strong> files, let’s add static files.</p>\n<h2 id=\"Static-files\"><a href=\"#Static-files\" class=\"headerlink\" title=\"Static files\"></a><a href=\"#static-files\"></a>Static files</h2><p>Create <strong>base.html</strong> file and move all the content of <strong>home.html</strong> into it</p>\n<p>base.html  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n    &lt;link\n      href=&quot;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&quot;\n      rel=&quot;stylesheet&quot;\n    /&gt;\n    &lt;link\n      rel=&quot;stylesheet&quot;\n      href=&quot;&#123;&#123; url_for('static', filename='css/style.css') &#125;&#125;&quot;\n    /&gt;\n    &lt;title&gt;\n      &#123;% if title %&#125;\n          &#123;&#123; title &#125;&#125;\n          &#123;% else %&#125; Flask Todo App with Tailwind\n          &#123;% endif %&#125;\n    &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div\n      class=&quot;h-100 w-full flex items-center justify-center bg-teal-lightest font-sans&quot;\n    &gt;\n      &#123;% block content %&#125;\n    \n          &#123;% endblock content %&#125;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>home.html  </p>\n<pre><code>&#123;% extends \"base.html\" %&#125; &#123;% block content %&#125;\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            Add another component to Tailwind Components\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red\"\n          >\n            Remove\n          </button>\n        </div>\n      </div>\n    </div>\n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Everything here is static, let’s add dynamic data…</p>\n<h2 id=\"Working-with-database-CRUD\"><a href=\"#Working-with-database-CRUD\" class=\"headerlink\" title=\"Working with database (CRUD)\"></a><a href=\"#working-with-database-crud\"></a>Working with database (CRUD)</h2><p>We will use <strong>SQlite</strong> as the database adapter  </p>\n<pre><code>from flask import Flask, render_template\nfrom flask_sqlalchemy import SQLAlchemy  # add\nfrom datetime import datetime  # add\n\napp = Flask(__name__)\napp.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///todo.db&#39;  # add\napp.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False  # add\ndb = SQLAlchemy(app)  # add\n\n# add\n\n\nclass Task(db.Model):\n   id = db.Column(db.Integer, primary_key=True)\n   name = db.Column(db.String(80), nullable=False)\n   created_at = db.Column(db.DateTime, nullable=False,\n                          default=datetime.now)\n\n   def __repr__(self):\n       return f&#39;Todo : &#123;self.name&#125;&#39;\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   return render_template(&quot;home.html&quot;)\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Let’s add some data from Python interpreter(<strong>REPL</strong>)  </p>\n<pre><code>$ python\nPython 3.7.5 (default, Nov 20 2019, 09:21:52)\n[GCC 9.2.1 20191008] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n\n&gt;&gt;&gt; from app import db, Task\n&gt;&gt;&gt; db.create_all()\n&gt;&gt;&gt; new_task = Task(name=&quot;Learn Flask&quot;)\n&gt;&gt;&gt; db.session.add(new_task)\n&gt;&gt;&gt; db.session.commit()\n&gt;&gt;&gt; tasks = Task.query.all()\n&gt;&gt;&gt; tasks\n[Todo : Learn Flask]\n&gt;&gt;&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h2 id=\"Getting-data\"><a href=\"#Getting-data\" class=\"headerlink\" title=\"Getting data\"></a><a href=\"#getting-data\"></a>Getting data</h2><p>We added our fist todo successfully from the <strong>REPL</strong> let’s display the in our template <strong>home.html</strong>  </p>\n<pre><code>from flask import Flask, render_template\nfrom flask_sqlalchemy import SQLAlchemy  # add\nfrom datetime import datetime  # add\n\napp = Flask(__name__)\napp.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///todo.db&#39;  # add\napp.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False  # add\ndb = SQLAlchemy(app)  # add\n\n# add\n\n\nclass Task(db.Model):\n   id = db.Column(db.Integer, primary_key=True)\n   name = db.Column(db.String(80), nullable=False)\n   created_at = db.Column(db.DateTime, nullable=False,\n                          default=datetime.now)\n\n   def __repr__(self):\n       return f&#39;Todo : &#123;self.name&#125;&#39;\n\n\n@app.route(&quot;/&quot;)\ndef home():\n   tasks = Task.query.order_by(Task.created_at) # add\n   return render_template(&quot;home.html&quot;, tasks=tasks) # add\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Change your <strong>home.html</strong> file  </p>\n<pre><code>&#123;% extends \"base.html\" %&#125;\n&#123;% block content %&#125;\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n      <div>\n        &#123;% if tasks %&#125;\n        &#123;% for task in tasks %&#125;\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">&#123;&#123; task.name &#125;&#125;</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        &#123;% endfor %&#125;\n        &#123;% else %&#125;\n        <p class=\"text-center\">No Task to display</p>\n        &#123;% endif %&#125;\n      </div>\n    </div>\n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Open your browser, you’ll see a list of tasks.</p>\n<h2 id=\"Add-new-data\"><a href=\"#Add-new-data\" class=\"headerlink\" title=\"Add new data\"></a><a href=\"#add-new-data\"></a>Add new data</h2><p>Let’s create a new task from html templates</p>\n<p>Change the home fonction<br>app.py  </p>\n<pre><code>from flask import Flask, render_template, request, redirect  # add\nfrom flask_sqlalchemy import SQLAlchemy  # add\nfrom datetime import datetime  # add\n\napp = Flask(__name__)\napp.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///todo.db&#39;  # add\napp.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False  # add\ndb = SQLAlchemy(app)  # add\n\n# add\n\n\nclass Task(db.Model):\n   id = db.Column(db.Integer, primary_key=True)\n   name = db.Column(db.String(80), nullable=False)\n   created_at = db.Column(db.DateTime, nullable=False,\n                          default=datetime.now)\n\n   def __repr__(self):\n       return f&#39;Todo : &#123;self.name&#125;&#39;\n\n\n@app.route(&quot;/&quot;, methods=[&#39;POST&#39;, &#39;GET&#39;])\ndef home():\n   if request.method == &quot;POST&quot;: # add\n       name = request.form[&#39;name&#39;]\n       new_task = Task(name=name)\n       db.session.add(new_task)\n       db.session.commit()\n       return redirect(&#39;/&#39;)\n   else:\n       tasks = Task.query.order_by(Task.created_at).all()  # add\n   return render_template(&quot;home.html&quot;, tasks=tasks)  # add\n\n\nif __name__ == &quot;__main__&quot;:\n   app.run(debug=True)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>home.html  </p>\n<pre><code>&#123;% extends \"base.html\" %&#125;\n&#123;% block content %&#125;\n    <div class=\"bg-white rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg\">\n      <div class=\"mb-4\">\n        <h1 class=\"text-grey-darkest\">Flask Todo List</h1>\n        <div class=\"flex mt-4\">\n          &#123;% include \"partials/_form.html\" %&#125;\n        </div>\n      </div>\n      <div>\n        &#123;% if tasks %&#125;\n        &#123;% for task in tasks %&#125;\n        <div class=\"flex mb-4 items-center\">\n          <p class=\"w-full text-grey-darkest\">\n            <a href=\"#\">&#123;&#123; task.name &#125;&#125;</a>\n          </p>\n          <button\n            class=\"flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600\"\n          >\n            Remove\n          </button>\n        </div>\n        &#123;% endfor %&#125;\n        &#123;% else %&#125;\n    \n        <p class=\"text-center\">No Task to display</p>\n    \n        &#123;% endif %&#125;\n      </div>\n    </div>\n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create a new folder inside <strong>templates</strong>, rename it <strong>partials</strong> and put the form into it.</p>\n<p>partials&#x2F;_form.html  </p>\n<pre><code>&lt;form action=&quot;/&quot; method=&quot;post&quot; class=&quot;inline-flex&quot;&gt;\n  &lt;input\n    class=&quot;shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker&quot;\n    placeholder=&quot;Add Todo&quot;\n    type=&quot;text&quot;\n    name=&quot;name&quot;\n  /&gt;\n  &lt;button\n    class=&quot;flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600&quot;\n    type=&quot;submit&quot;\n  &gt;\n    Add\n  &lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now you can add new task, retrieve all tasks, what about remove a task ?<br>Let’s do it</p>\n<h2 id=\"Remove-data\"><a href=\"#Remove-data\" class=\"headerlink\" title=\"Remove data\"></a><a href=\"#remove-data\"></a>Remove data</h2><p>In app.py  </p>\n<pre><code># remove a task\n...\n@app.route(&#39;/delete/&lt;int:id&gt;&#39;)\ndef delete(id):\n   task = Task.query.get_or_404(id)\n\n   try:\n       db.session.delete(task)\n       db.session.commit()\n       return redirect(&#39;/&#39;)\n   except Exception:\n       return &quot;There was a problem deleting data.&quot;\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In home.html  </p>\n<pre><code>...\n&lt;a\n  class=&quot;flex-no-shrink p-2 ml-2 border-2 rounded text-red border-red hover:text-white hover:bg-red bg-red-600&quot;\n  href=&quot;/delete/&#123;&#123; task.id &#125;&#125;&quot;\n&gt;\n  Remove\n&lt;/a&gt;\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>It’s very simple and intuitive, the last part before moving to production is the update task</p>\n<h2 id=\"Update-data\"><a href=\"#Update-data\" class=\"headerlink\" title=\"Update data\"></a><a href=\"#update-data\"></a>Update data</h2><p>In app.py  </p>\n<pre><code>...\n\n# update task\n@app.route(&#39;/update/&lt;int:id&gt;&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])\ndef update(id):\n   task = Task.query.get_or_404(id)\n\n   if request.method == &#39;POST&#39;:\n       task.name = request.form[&#39;name&#39;]\n\n       try:\n           db.session.commit()\n           return redirect(&#39;/&#39;)\n       except:\n           return &quot;There was a problem updating data.&quot;\n\n   else:\n       title = &quot;Update Task&quot;\n       return render_template(&#39;update.html&#39;, title=title, task=task)\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In update.html  </p>\n<pre><code>&#123;% extends 'base.html' %&#125;\n&#123;% block content %&#125;\n    <div class=\"mb-4\">\n      <h1 class=\"text-grey-darkest\">&#123;&#123; title &#125;&#125;</h1>\n      <div class=\"flex mt-4\">\n        <form action=\"/update/&#123;&#123; task.id &#125;&#125;\" method=\"post\" class=\"inline-flex\">\n          <input\n            class=\"shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker\"\n            placeholder=\"Add Todo\"\n            type=\"text\"\n            name=\"name\"\n            value=\"&#123;&#123; task.name &#125;&#125;\"\n          />\n          <button\n            class=\"flex-no-shrink p-2 border-2 rounded text-teal border-teal hover:text-white hover:bg-teal bg-green-600\"\n            type=\"submit\"\n          >\n            Update\n          </button>\n        </form>\n      </div>\n    </div>\n    \n    &#123;% endblock content %&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now we have fully functional <strong>Flask</strong> app, but if we wanna show the world our new app ?</p>\n<p>Let’s deploy the application using <strong>Heroku</strong></p>\n<h2 id=\"Deploy-to-Heroku\"><a href=\"#Deploy-to-Heroku\" class=\"headerlink\" title=\"Deploy to Heroku\"></a><a href=\"#deploy-to-heroku\"></a>Deploy to Heroku</h2><p>Initialize a new <strong>git</strong> repository  </p>\n<pre><code>$ git init\n$ touch .gitignore\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In <strong>.gitignore</strong> file add :  </p>\n<pre><code># Created by https://www.gitignore.io/api/flask\n# Edit at https://www.gitignore.io/?templates=flask\n\n### Flask ###\ninstance/*\n!instance/.gitignore\n.webassets-cache\n\n### Flask.Python Stack ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don&#39;t work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# End of https://www.gitignore.io/api/flask\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create <strong>Procfile</strong> and add :  </p>\n<pre><code>$ touch Procfile\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<pre><code>web: gunicorn app:app\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Login to <strong>Heroku</strong> with your account  </p>\n<pre><code>$ heroku login\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Commit your code to the repository  </p>\n<pre><code>$ git add .\n$ git commit -m &quot;Initial commit&quot;\n...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Create a new app on Heroku  </p>\n<pre><code>heroku create flasktailwindtodo\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Deploy your app to Heroku  </p>\n<pre><code>$ git push heroku master\n#...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Open your browser from the terminal using Heroku  </p>\n<pre><code>$ heroku open\n#...\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Congrats 😍 See you in next Tutorial</p>\n"},{"title":"Building a Music Player in React","date":"2022-12-16T20:06:24.000Z","_content":"![$cover](images/music.webp)\n\n[](#introduction)Introduction\n=============================\n\nWhoever is learning React and wants to build a project with React. There are a variety of blogs and articles to guide a such projects for developers. I do go through those articles but one kind of project is always missing in them. The missing projects are the music player and video player. Both of the projects will give you the opportunity to handle audio and video. You will learn many things such as handling audio for playing and pausing audio.\n\nToday, we are going to build a music player in React. We will look into the following topics:\n\n*   Setting up the environment\n*   Playing/Pausing audio\n*   Handling time of audio(In term of current time and complete duration of audio)\n*   Adding a range slider for the timeline of audio\n\nAfter completing the project, our music player will look like this.\n\nGIF\n\n![React Music Player](https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif)\n\nIf this excites you then let's get started.\n\n[](#prerequisite-and-setting-up-the-environment)Prerequisite and Setting up the Environment\n===========================================================================================\n\nI assume that you have knowledge about the following technologies as prerequisite:\n\n*   JavaScript\n*   HTML/CSS\n*   Basic React\n\nThe environment setup is easy. You should have [node.js](https://nodejs.org/en/) pre-installed for running the node related command in the terminal.\n\nNavigate to the directory in which you want to create the project. Now, run the terminal and enter the below command to install react project.  \n\n    npx create-react-app react-music-player\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nRemove all the boilerplate and unnecessary code. We are now good to go.\n\n[](#dependencies)Dependencies\n=============================\n\nWe need to install the following libraries to our project:\n\n*   [use-sound](https://www.npmjs.com/package/use-sound): This will handle the audio file. It will load, play, and pause the audio along with other features.\n\nInstall with the below command:  \n\n    npm i use-sound\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n*   [react-icons](https://react-icons.github.io/react-icons/): For adding icons of play, pause, next and previous into our player.\n\nInstall it with the below command:  \n\n    npm i react-icons\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n[](#playerjs)Player.js\n======================\n\nCreate a `component` directory in the `src` folder. Inside that create a component with the name `Player.js`. This component will be our music player.\n\n[](#imports)Imports\n-------------------\n\nAs per the library to import in the file. You can look at it here:  \n\n    import { useEffect, useState } from \"react\"; \n    import useSound from \"use-sound\"; // for handling the sound\n    import qala from \"../assets/qala.mp3\"; // importing the music\n    import { AiFillPlayCircle, AiFillPauseCircle } from \"react-icons/ai\"; // icons for play and pause\n    import { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\"; // icons for next and previous track\n    import { IconContext } from \"react-icons\"; // for customazing the icons\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nYou can look into comments for the explanation of the imports.\n\n[](#playing-and-pausing-the-audio)Playing and Pausing the audio\n---------------------------------------------------------------\n\nLet's implement the mandatory feature of the player which is playing and pausing the audio.\n\nAt the top, we have a `isPlaying` state for storing the current status of the player. This will be helpful in conditional rendering the play/pause icon according the status of the player.  \n\n    const [isPlaying, setIsPlaying] = useState(false);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe need to initialize the `useSound` with audio. It will return the play, pause, duration, and sound method.  \n\n    const [play, { pause, duration, sound }] = useSound(qala);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n`play` and `pause` is for playing and pausing the audio. `duration` is for the length of the track in milliseconds. `sound` will provide us with the [howler.js](https://github.com/goldfire/howler.js) method for the sound.\n\nCreate a function for handling the play and pause buttons. Here is the code for it.  \n\n      const playingButton = () => {\n        if (isPlaying) {\n          pause(); // this will pause the audio\n          setIsPlaying(false);\n        } else {\n          play(); // this will play the audio\n          setIsPlaying(true);\n        }\n      };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow, it's time to add the UI component of the player into the `return`. Here is the code for it.  \n\n      return (\n        <div className=\"component\">\n          <h2>Playing Now</h2>\n          <img\n            className=\"musicCover\"\n            src=\"https://picsum.photos/200/200\"\n          />\n          <div>\n            <h3 className=\"title\">Rubaiyyan</h3>\n            <p className=\"subTitle\">Qala</p>\n          </div>\n          <div>\n            <button className=\"playButton\">\n              <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                <BiSkipPrevious />\n              </IconContext.Provider>\n            </button>\n            {!isPlaying ? (\n              <button className=\"playButton\" onClick={playingButton}>\n                <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                  <AiFillPlayCircle />\n                </IconContext.Provider>\n              </button>\n            ) : (\n              <button className=\"playButton\" onClick={playingButton}>\n                <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                  <AiFillPauseCircle />\n                </IconContext.Provider>\n              </button>\n            )}\n            <button className=\"playButton\">\n              <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                <BiSkipNext />\n              </IconContext.Provider>\n            </button>\n          </div>\n        </div>\n      );\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nFor the cover image, I have used the [Loren Picsum](https://picsum.photos/) for generating a random image.\n\nYou can look here for the CSS of the file:  \n\n    body {\n      background-color: #e5e5e5;\n    }\n    \n    .App {\n      font-family: sans-serif;\n      text-align: center;\n    }\n    \n    .component {\n      background-color: white;\n      width: 25%;\n      max-width: 600px;\n      margin: 1em auto;\n      padding-bottom: 2em;\n      border: 0.1px solid black;\n      border-radius: 10px;\n    }\n    \n    .musicCover {\n      border-radius: 10%;\n    }\n    \n    .playButton {\n      background: none;\n      border: none;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .subTitle {\n      margin-top: -1em;\n      color: #4f4f4f;\n    }\n    \n    .time {\n      margin: 0 auto;\n      width: 80%;\n      display: flex;\n      justify-content: space-between;\n      color: #828282;\n      font-size: smaller;\n    }\n    \n    .timeline {\n      width: 80%;\n      background-color: #27ae60;\n    }\n    \n    input[type=\"range\"] {\n      background-color: #27ae60;\n    }\n    \n    @media (max-width: 900px) {\n      .component {\n        width: 50%;\n      }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nRun the react server. If everything goes well you will be able to see the below screen.\n\n[![Screenshot - React Music Player](https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png)\n\nClick on the play button to play the audio.\n\n[](#adding-audio-timeline-with-the-current-time-and-duration-of-the-audio)Adding audio timeline with the current time and duration of the audio\n-----------------------------------------------------------------------------------------------------------------------------------------------\n\nNow, let's add the timeline to the player. The timeline will controllable by the user. Any changes to it will change the audio's current position.\n\nLet's look into the state that we are using. You see the comments for an explanation of each state.  \n\n      const [currTime, setCurrTime] = useState({\n        min: \"\",\n        sec: \"\",\n      }); // current position of the audio in minutes and seconds\n    \n      const [seconds, setSeconds] = useState(); // current position of the audio in seconds\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe are grabbing the duration props from the `useSound`. As the duration is provided in milliseconds, we have converted it into minutes and seconds.  \n\n    useEffect(() => {\n      const sec = duration / 1000;\n      const min = Math.floor(sec / 60);\n      const secRemain = Math.floor(sec % 60);\n      const time = {\n        min: min,\n        sec: secRemain\n      };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow, for the current position of the audio, we have the `sound.seek([])` method. We are running this function every second to change the current position of the audio. After getting the position of the audio which is in seconds. We are converting it into minutes and seconds. After converting, we are setting the state with the current value. Here is the code for it.  \n\n    useEffect(() => {\n        const interval = setInterval(() => {\n          if (sound) {\n            setSeconds(sound.seek([])); // setting the seconds state with the current state\n            const min = Math.floor(sound.seek([]) / 60);\n            const sec = Math.floor(sound.seek([]) % 60);\n            setCurrTime({\n              min,\n              sec,\n            });\n          }\n        }, 1000);\n        return () => clearInterval(interval);\n      }, [sound]);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow for the return. Here is the code.  \n\n          <div>\n            <div className=\"time\">\n              <p>\n                {currTime.min}:{currTime.sec}\n              </p>\n              <p>\n                {time.min}:{time.sec}\n              </p>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max={duration / 1000}\n              default=\"0\"\n              value={seconds}\n              className=\"timeline\"\n              onChange={(e) => {\n                sound.seek([e.target.value]);\n              }}\n            />\n          </div>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThe value of the range input is the `second` state. It will provide us with the current position of the audio. On change in the range by the user. We are calling the `soud.seek()` method to change the current position of the audio.\n\n[](#output)Output\n=================\n\nAfter successfully completing the project, you will be able to see the below output.\n\nGIF\n\n![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif)\n\n> Note: The music is coming into my speaker.\n\nI have created a codesandbox. You can look at it for the complete project with code and the output.\n\n> Note: The song that I used is [Rubaaiyaan](https://www.youtube.com/watch?v=wEkMPeP50Ss) from Qala. All credit to the creator.\n\n[](#additional-features)Additional Features\n===========================================\n\nYou can work on the music player to add more features such as:\n\n*   It currently plays one song and loads many songs into it. Use the next and the previous icons for changing audio.\n*   Change the name and album of the audio as per the song.\n*   Add more features that you wish a music player should have.\n\n[](#conclusion)Conclusion\n=========================\n\nWe have created our own music player. This project will help you in handling audio files in React. We have added features of play and pause with the function. Also added an audio timeline with the range input. Users can change the current position of the audio with the timeline. Feel free to add more features to the project.\n\nI hope this project has helped you in understanding a method of handling music in React. Let me know in the comment if you want a video player tutorial too. Thanks for reading the blog post.","source":"_posts/music.md","raw":"---\ntitle: Building a Music Player in React\ndate: 2022-12-16 15:06:24\ntags:\n    - React\n    - Javascript\n    - Html\n---\n![$cover](images/music.webp)\n\n[](#introduction)Introduction\n=============================\n\nWhoever is learning React and wants to build a project with React. There are a variety of blogs and articles to guide a such projects for developers. I do go through those articles but one kind of project is always missing in them. The missing projects are the music player and video player. Both of the projects will give you the opportunity to handle audio and video. You will learn many things such as handling audio for playing and pausing audio.\n\nToday, we are going to build a music player in React. We will look into the following topics:\n\n*   Setting up the environment\n*   Playing/Pausing audio\n*   Handling time of audio(In term of current time and complete duration of audio)\n*   Adding a range slider for the timeline of audio\n\nAfter completing the project, our music player will look like this.\n\nGIF\n\n![React Music Player](https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif)\n\nIf this excites you then let's get started.\n\n[](#prerequisite-and-setting-up-the-environment)Prerequisite and Setting up the Environment\n===========================================================================================\n\nI assume that you have knowledge about the following technologies as prerequisite:\n\n*   JavaScript\n*   HTML/CSS\n*   Basic React\n\nThe environment setup is easy. You should have [node.js](https://nodejs.org/en/) pre-installed for running the node related command in the terminal.\n\nNavigate to the directory in which you want to create the project. Now, run the terminal and enter the below command to install react project.  \n\n    npx create-react-app react-music-player\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nRemove all the boilerplate and unnecessary code. We are now good to go.\n\n[](#dependencies)Dependencies\n=============================\n\nWe need to install the following libraries to our project:\n\n*   [use-sound](https://www.npmjs.com/package/use-sound): This will handle the audio file. It will load, play, and pause the audio along with other features.\n\nInstall with the below command:  \n\n    npm i use-sound\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n*   [react-icons](https://react-icons.github.io/react-icons/): For adding icons of play, pause, next and previous into our player.\n\nInstall it with the below command:  \n\n    npm i react-icons\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n[](#playerjs)Player.js\n======================\n\nCreate a `component` directory in the `src` folder. Inside that create a component with the name `Player.js`. This component will be our music player.\n\n[](#imports)Imports\n-------------------\n\nAs per the library to import in the file. You can look at it here:  \n\n    import { useEffect, useState } from \"react\"; \n    import useSound from \"use-sound\"; // for handling the sound\n    import qala from \"../assets/qala.mp3\"; // importing the music\n    import { AiFillPlayCircle, AiFillPauseCircle } from \"react-icons/ai\"; // icons for play and pause\n    import { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\"; // icons for next and previous track\n    import { IconContext } from \"react-icons\"; // for customazing the icons\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nYou can look into comments for the explanation of the imports.\n\n[](#playing-and-pausing-the-audio)Playing and Pausing the audio\n---------------------------------------------------------------\n\nLet's implement the mandatory feature of the player which is playing and pausing the audio.\n\nAt the top, we have a `isPlaying` state for storing the current status of the player. This will be helpful in conditional rendering the play/pause icon according the status of the player.  \n\n    const [isPlaying, setIsPlaying] = useState(false);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe need to initialize the `useSound` with audio. It will return the play, pause, duration, and sound method.  \n\n    const [play, { pause, duration, sound }] = useSound(qala);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n`play` and `pause` is for playing and pausing the audio. `duration` is for the length of the track in milliseconds. `sound` will provide us with the [howler.js](https://github.com/goldfire/howler.js) method for the sound.\n\nCreate a function for handling the play and pause buttons. Here is the code for it.  \n\n      const playingButton = () => {\n        if (isPlaying) {\n          pause(); // this will pause the audio\n          setIsPlaying(false);\n        } else {\n          play(); // this will play the audio\n          setIsPlaying(true);\n        }\n      };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow, it's time to add the UI component of the player into the `return`. Here is the code for it.  \n\n      return (\n        <div className=\"component\">\n          <h2>Playing Now</h2>\n          <img\n            className=\"musicCover\"\n            src=\"https://picsum.photos/200/200\"\n          />\n          <div>\n            <h3 className=\"title\">Rubaiyyan</h3>\n            <p className=\"subTitle\">Qala</p>\n          </div>\n          <div>\n            <button className=\"playButton\">\n              <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                <BiSkipPrevious />\n              </IconContext.Provider>\n            </button>\n            {!isPlaying ? (\n              <button className=\"playButton\" onClick={playingButton}>\n                <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                  <AiFillPlayCircle />\n                </IconContext.Provider>\n              </button>\n            ) : (\n              <button className=\"playButton\" onClick={playingButton}>\n                <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                  <AiFillPauseCircle />\n                </IconContext.Provider>\n              </button>\n            )}\n            <button className=\"playButton\">\n              <IconContext.Provider value={{ size: \"3em\", color: \"#27AE60\" }}>\n                <BiSkipNext />\n              </IconContext.Provider>\n            </button>\n          </div>\n        </div>\n      );\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nFor the cover image, I have used the [Loren Picsum](https://picsum.photos/) for generating a random image.\n\nYou can look here for the CSS of the file:  \n\n    body {\n      background-color: #e5e5e5;\n    }\n    \n    .App {\n      font-family: sans-serif;\n      text-align: center;\n    }\n    \n    .component {\n      background-color: white;\n      width: 25%;\n      max-width: 600px;\n      margin: 1em auto;\n      padding-bottom: 2em;\n      border: 0.1px solid black;\n      border-radius: 10px;\n    }\n    \n    .musicCover {\n      border-radius: 10%;\n    }\n    \n    .playButton {\n      background: none;\n      border: none;\n      align-items: center;\n      justify-content: center;\n    }\n    \n    .subTitle {\n      margin-top: -1em;\n      color: #4f4f4f;\n    }\n    \n    .time {\n      margin: 0 auto;\n      width: 80%;\n      display: flex;\n      justify-content: space-between;\n      color: #828282;\n      font-size: smaller;\n    }\n    \n    .timeline {\n      width: 80%;\n      background-color: #27ae60;\n    }\n    \n    input[type=\"range\"] {\n      background-color: #27ae60;\n    }\n    \n    @media (max-width: 900px) {\n      .component {\n        width: 50%;\n      }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nRun the react server. If everything goes well you will be able to see the below screen.\n\n[![Screenshot - React Music Player](https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png)\n\nClick on the play button to play the audio.\n\n[](#adding-audio-timeline-with-the-current-time-and-duration-of-the-audio)Adding audio timeline with the current time and duration of the audio\n-----------------------------------------------------------------------------------------------------------------------------------------------\n\nNow, let's add the timeline to the player. The timeline will controllable by the user. Any changes to it will change the audio's current position.\n\nLet's look into the state that we are using. You see the comments for an explanation of each state.  \n\n      const [currTime, setCurrTime] = useState({\n        min: \"\",\n        sec: \"\",\n      }); // current position of the audio in minutes and seconds\n    \n      const [seconds, setSeconds] = useState(); // current position of the audio in seconds\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe are grabbing the duration props from the `useSound`. As the duration is provided in milliseconds, we have converted it into minutes and seconds.  \n\n    useEffect(() => {\n      const sec = duration / 1000;\n      const min = Math.floor(sec / 60);\n      const secRemain = Math.floor(sec % 60);\n      const time = {\n        min: min,\n        sec: secRemain\n      };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow, for the current position of the audio, we have the `sound.seek([])` method. We are running this function every second to change the current position of the audio. After getting the position of the audio which is in seconds. We are converting it into minutes and seconds. After converting, we are setting the state with the current value. Here is the code for it.  \n\n    useEffect(() => {\n        const interval = setInterval(() => {\n          if (sound) {\n            setSeconds(sound.seek([])); // setting the seconds state with the current state\n            const min = Math.floor(sound.seek([]) / 60);\n            const sec = Math.floor(sound.seek([]) % 60);\n            setCurrTime({\n              min,\n              sec,\n            });\n          }\n        }, 1000);\n        return () => clearInterval(interval);\n      }, [sound]);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow for the return. Here is the code.  \n\n          <div>\n            <div className=\"time\">\n              <p>\n                {currTime.min}:{currTime.sec}\n              </p>\n              <p>\n                {time.min}:{time.sec}\n              </p>\n            </div>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max={duration / 1000}\n              default=\"0\"\n              value={seconds}\n              className=\"timeline\"\n              onChange={(e) => {\n                sound.seek([e.target.value]);\n              }}\n            />\n          </div>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThe value of the range input is the `second` state. It will provide us with the current position of the audio. On change in the range by the user. We are calling the `soud.seek()` method to change the current position of the audio.\n\n[](#output)Output\n=================\n\nAfter successfully completing the project, you will be able to see the below output.\n\nGIF\n\n![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif)\n\n> Note: The music is coming into my speaker.\n\nI have created a codesandbox. You can look at it for the complete project with code and the output.\n\n> Note: The song that I used is [Rubaaiyaan](https://www.youtube.com/watch?v=wEkMPeP50Ss) from Qala. All credit to the creator.\n\n[](#additional-features)Additional Features\n===========================================\n\nYou can work on the music player to add more features such as:\n\n*   It currently plays one song and loads many songs into it. Use the next and the previous icons for changing audio.\n*   Change the name and album of the audio as per the song.\n*   Add more features that you wish a music player should have.\n\n[](#conclusion)Conclusion\n=========================\n\nWe have created our own music player. This project will help you in handling audio files in React. We have added features of play and pause with the function. Also added an audio timeline with the range input. Users can change the current position of the audio with the timeline. Feel free to add more features to the project.\n\nI hope this project has helped you in understanding a method of handling music in React. Let me know in the comment if you want a video player tutorial too. Thanks for reading the blog post.","slug":"music","published":1,"updated":"2022-12-22T15:14:44.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irm0003twlha0n5eage","content":"<p><img src=\"/images/music.webp\" alt=\"$cover\"></p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#introduction\"></a>Introduction</h1><p>Whoever is learning React and wants to build a project with React. There are a variety of blogs and articles to guide a such projects for developers. I do go through those articles but one kind of project is always missing in them. The missing projects are the music player and video player. Both of the projects will give you the opportunity to handle audio and video. You will learn many things such as handling audio for playing and pausing audio.</p>\n<p>Today, we are going to build a music player in React. We will look into the following topics:</p>\n<ul>\n<li>Setting up the environment</li>\n<li>Playing&#x2F;Pausing audio</li>\n<li>Handling time of audio(In term of current time and complete duration of audio)</li>\n<li>Adding a range slider for the timeline of audio</li>\n</ul>\n<p>After completing the project, our music player will look like this.</p>\n<p>GIF</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif\" alt=\"React Music Player\"></p>\n<p>If this excites you then let’s get started.</p>\n<h1 id=\"Prerequisite-and-Setting-up-the-Environment\"><a href=\"#Prerequisite-and-Setting-up-the-Environment\" class=\"headerlink\" title=\"Prerequisite and Setting up the Environment\"></a><a href=\"#prerequisite-and-setting-up-the-environment\"></a>Prerequisite and Setting up the Environment</h1><p>I assume that you have knowledge about the following technologies as prerequisite:</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML&#x2F;CSS</li>\n<li>Basic React</li>\n</ul>\n<p>The environment setup is easy. You should have <a href=\"https://nodejs.org/en/\">node.js</a> pre-installed for running the node related command in the terminal.</p>\n<p>Navigate to the directory in which you want to create the project. Now, run the terminal and enter the below command to install react project.  </p>\n<pre><code>npx create-react-app react-music-player\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Remove all the boilerplate and unnecessary code. We are now good to go.</p>\n<h1 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a><a href=\"#dependencies\"></a>Dependencies</h1><p>We need to install the following libraries to our project:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/use-sound\">use-sound</a>: This will handle the audio file. It will load, play, and pause the audio along with other features.</li>\n</ul>\n<p>Install with the below command:  </p>\n<pre><code>npm i use-sound\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<ul>\n<li><a href=\"https://react-icons.github.io/react-icons/\">react-icons</a>: For adding icons of play, pause, next and previous into our player.</li>\n</ul>\n<p>Install it with the below command:  </p>\n<pre><code>npm i react-icons\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h1 id=\"Player-js\"><a href=\"#Player-js\" class=\"headerlink\" title=\"Player.js\"></a><a href=\"#playerjs\"></a>Player.js</h1><p>Create a <code>component</code> directory in the <code>src</code> folder. Inside that create a component with the name <code>Player.js</code>. This component will be our music player.</p>\n<h2 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a><a href=\"#imports\"></a>Imports</h2><p>As per the library to import in the file. You can look at it here:  </p>\n<pre><code>import &#123; useEffect, useState &#125; from &quot;react&quot;; \nimport useSound from &quot;use-sound&quot;; // for handling the sound\nimport qala from &quot;../assets/qala.mp3&quot;; // importing the music\nimport &#123; AiFillPlayCircle, AiFillPauseCircle &#125; from &quot;react-icons/ai&quot;; // icons for play and pause\nimport &#123; BiSkipNext, BiSkipPrevious &#125; from &quot;react-icons/bi&quot;; // icons for next and previous track\nimport &#123; IconContext &#125; from &quot;react-icons&quot;; // for customazing the icons\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>You can look into comments for the explanation of the imports.</p>\n<h2 id=\"Playing-and-Pausing-the-audio\"><a href=\"#Playing-and-Pausing-the-audio\" class=\"headerlink\" title=\"Playing and Pausing the audio\"></a><a href=\"#playing-and-pausing-the-audio\"></a>Playing and Pausing the audio</h2><p>Let’s implement the mandatory feature of the player which is playing and pausing the audio.</p>\n<p>At the top, we have a <code>isPlaying</code> state for storing the current status of the player. This will be helpful in conditional rendering the play&#x2F;pause icon according the status of the player.  </p>\n<pre><code>const [isPlaying, setIsPlaying] = useState(false);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We need to initialize the <code>useSound</code> with audio. It will return the play, pause, duration, and sound method.  </p>\n<pre><code>const [play, &#123; pause, duration, sound &#125;] = useSound(qala);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p><code>play</code> and <code>pause</code> is for playing and pausing the audio. <code>duration</code> is for the length of the track in milliseconds. <code>sound</code> will provide us with the <a href=\"https://github.com/goldfire/howler.js\">howler.js</a> method for the sound.</p>\n<p>Create a function for handling the play and pause buttons. Here is the code for it.  </p>\n<pre><code>  const playingButton = () =&gt; &#123;\n    if (isPlaying) &#123;\n      pause(); // this will pause the audio\n      setIsPlaying(false);\n    &#125; else &#123;\n      play(); // this will play the audio\n      setIsPlaying(true);\n    &#125;\n  &#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now, it’s time to add the UI component of the player into the <code>return</code>. Here is the code for it.  </p>\n<pre><code>  return (\n    &lt;div className=&quot;component&quot;&gt;\n      &lt;h2&gt;Playing Now&lt;/h2&gt;\n      &lt;img\n        className=&quot;musicCover&quot;\n        src=&quot;https://picsum.photos/200/200&quot;\n      /&gt;\n      &lt;div&gt;\n        &lt;h3 className=&quot;title&quot;&gt;Rubaiyyan&lt;/h3&gt;\n        &lt;p className=&quot;subTitle&quot;&gt;Qala&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;button className=&quot;playButton&quot;&gt;\n          &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n            &lt;BiSkipPrevious /&gt;\n          &lt;/IconContext.Provider&gt;\n        &lt;/button&gt;\n        &#123;!isPlaying ? (\n          &lt;button className=&quot;playButton&quot; onClick=&#123;playingButton&#125;&gt;\n            &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n              &lt;AiFillPlayCircle /&gt;\n            &lt;/IconContext.Provider&gt;\n          &lt;/button&gt;\n        ) : (\n          &lt;button className=&quot;playButton&quot; onClick=&#123;playingButton&#125;&gt;\n            &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n              &lt;AiFillPauseCircle /&gt;\n            &lt;/IconContext.Provider&gt;\n          &lt;/button&gt;\n        )&#125;\n        &lt;button className=&quot;playButton&quot;&gt;\n          &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n            &lt;BiSkipNext /&gt;\n          &lt;/IconContext.Provider&gt;\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>For the cover image, I have used the <a href=\"https://picsum.photos/\">Loren Picsum</a> for generating a random image.</p>\n<p>You can look here for the CSS of the file:  </p>\n<pre><code>body &#123;\n  background-color: #e5e5e5;\n&#125;\n\n.App &#123;\n  font-family: sans-serif;\n  text-align: center;\n&#125;\n\n.component &#123;\n  background-color: white;\n  width: 25%;\n  max-width: 600px;\n  margin: 1em auto;\n  padding-bottom: 2em;\n  border: 0.1px solid black;\n  border-radius: 10px;\n&#125;\n\n.musicCover &#123;\n  border-radius: 10%;\n&#125;\n\n.playButton &#123;\n  background: none;\n  border: none;\n  align-items: center;\n  justify-content: center;\n&#125;\n\n.subTitle &#123;\n  margin-top: -1em;\n  color: #4f4f4f;\n&#125;\n\n.time &#123;\n  margin: 0 auto;\n  width: 80%;\n  display: flex;\n  justify-content: space-between;\n  color: #828282;\n  font-size: smaller;\n&#125;\n\n.timeline &#123;\n  width: 80%;\n  background-color: #27ae60;\n&#125;\n\ninput[type=&quot;range&quot;] &#123;\n  background-color: #27ae60;\n&#125;\n\n@media (max-width: 900px) &#123;\n  .component &#123;\n    width: 50%;\n  &#125;\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Run the react server. If everything goes well you will be able to see the below screen.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png\" alt=\"Screenshot - React Music Player\"></a></p>\n<p>Click on the play button to play the audio.</p>\n<h2 id=\"Adding-audio-timeline-with-the-current-time-and-duration-of-the-audio\"><a href=\"#Adding-audio-timeline-with-the-current-time-and-duration-of-the-audio\" class=\"headerlink\" title=\"Adding audio timeline with the current time and duration of the audio\"></a><a href=\"#adding-audio-timeline-with-the-current-time-and-duration-of-the-audio\"></a>Adding audio timeline with the current time and duration of the audio</h2><p>Now, let’s add the timeline to the player. The timeline will controllable by the user. Any changes to it will change the audio’s current position.</p>\n<p>Let’s look into the state that we are using. You see the comments for an explanation of each state.  </p>\n<pre><code>  const [currTime, setCurrTime] = useState(&#123;\n    min: &quot;&quot;,\n    sec: &quot;&quot;,\n  &#125;); // current position of the audio in minutes and seconds\n\n  const [seconds, setSeconds] = useState(); // current position of the audio in seconds\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We are grabbing the duration props from the <code>useSound</code>. As the duration is provided in milliseconds, we have converted it into minutes and seconds.  </p>\n<pre><code>useEffect(() =&gt; &#123;\n  const sec = duration / 1000;\n  const min = Math.floor(sec / 60);\n  const secRemain = Math.floor(sec % 60);\n  const time = &#123;\n    min: min,\n    sec: secRemain\n  &#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now, for the current position of the audio, we have the <code>sound.seek([])</code> method. We are running this function every second to change the current position of the audio. After getting the position of the audio which is in seconds. We are converting it into minutes and seconds. After converting, we are setting the state with the current value. Here is the code for it.  </p>\n<pre><code>useEffect(() =&gt; &#123;\n    const interval = setInterval(() =&gt; &#123;\n      if (sound) &#123;\n        setSeconds(sound.seek([])); // setting the seconds state with the current state\n        const min = Math.floor(sound.seek([]) / 60);\n        const sec = Math.floor(sound.seek([]) % 60);\n        setCurrTime(&#123;\n          min,\n          sec,\n        &#125;);\n      &#125;\n    &#125;, 1000);\n    return () =&gt; clearInterval(interval);\n  &#125;, [sound]);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now for the return. Here is the code.  </p>\n<pre><code>      &lt;div&gt;\n        &lt;div className=&quot;time&quot;&gt;\n          &lt;p&gt;\n            &#123;currTime.min&#125;:&#123;currTime.sec&#125;\n          &lt;/p&gt;\n          &lt;p&gt;\n            &#123;time.min&#125;:&#123;time.sec&#125;\n          &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;input\n          type=&quot;range&quot;\n          min=&quot;0&quot;\n          max=&#123;duration / 1000&#125;\n          default=&quot;0&quot;\n          value=&#123;seconds&#125;\n          className=&quot;timeline&quot;\n          onChange=&#123;(e) =&gt; &#123;\n            sound.seek([e.target.value]);\n          &#125;&#125;\n        /&gt;\n      &lt;/div&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>The value of the range input is the <code>second</code> state. It will provide us with the current position of the audio. On change in the range by the user. We are calling the <code>soud.seek()</code> method to change the current position of the audio.</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a><a href=\"#output\"></a>Output</h1><p>After successfully completing the project, you will be able to see the below output.</p>\n<p>GIF</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif\" alt=\"Image description\"></p>\n<blockquote>\n<p>Note: The music is coming into my speaker.</p>\n</blockquote>\n<p>I have created a codesandbox. You can look at it for the complete project with code and the output.</p>\n<blockquote>\n<p>Note: The song that I used is <a href=\"https://www.youtube.com/watch?v=wEkMPeP50Ss\">Rubaaiyaan</a> from Qala. All credit to the creator.</p>\n</blockquote>\n<h1 id=\"Additional-Features\"><a href=\"#Additional-Features\" class=\"headerlink\" title=\"Additional Features\"></a><a href=\"#additional-features\"></a>Additional Features</h1><p>You can work on the music player to add more features such as:</p>\n<ul>\n<li>It currently plays one song and loads many songs into it. Use the next and the previous icons for changing audio.</li>\n<li>Change the name and album of the audio as per the song.</li>\n<li>Add more features that you wish a music player should have.</li>\n</ul>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#conclusion\"></a>Conclusion</h1><p>We have created our own music player. This project will help you in handling audio files in React. We have added features of play and pause with the function. Also added an audio timeline with the range input. Users can change the current position of the audio with the timeline. Feel free to add more features to the project.</p>\n<p>I hope this project has helped you in understanding a method of handling music in React. Let me know in the comment if you want a video player tutorial too. Thanks for reading the blog post.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/music.webp\" alt=\"$cover\"></p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a><a href=\"#introduction\"></a>Introduction</h1><p>Whoever is learning React and wants to build a project with React. There are a variety of blogs and articles to guide a such projects for developers. I do go through those articles but one kind of project is always missing in them. The missing projects are the music player and video player. Both of the projects will give you the opportunity to handle audio and video. You will learn many things such as handling audio for playing and pausing audio.</p>\n<p>Today, we are going to build a music player in React. We will look into the following topics:</p>\n<ul>\n<li>Setting up the environment</li>\n<li>Playing&#x2F;Pausing audio</li>\n<li>Handling time of audio(In term of current time and complete duration of audio)</li>\n<li>Adding a range slider for the timeline of audio</li>\n</ul>\n<p>After completing the project, our music player will look like this.</p>\n<p>GIF</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif\" alt=\"React Music Player\"></p>\n<p>If this excites you then let’s get started.</p>\n<h1 id=\"Prerequisite-and-Setting-up-the-Environment\"><a href=\"#Prerequisite-and-Setting-up-the-Environment\" class=\"headerlink\" title=\"Prerequisite and Setting up the Environment\"></a><a href=\"#prerequisite-and-setting-up-the-environment\"></a>Prerequisite and Setting up the Environment</h1><p>I assume that you have knowledge about the following technologies as prerequisite:</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML&#x2F;CSS</li>\n<li>Basic React</li>\n</ul>\n<p>The environment setup is easy. You should have <a href=\"https://nodejs.org/en/\">node.js</a> pre-installed for running the node related command in the terminal.</p>\n<p>Navigate to the directory in which you want to create the project. Now, run the terminal and enter the below command to install react project.  </p>\n<pre><code>npx create-react-app react-music-player\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Remove all the boilerplate and unnecessary code. We are now good to go.</p>\n<h1 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a><a href=\"#dependencies\"></a>Dependencies</h1><p>We need to install the following libraries to our project:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/use-sound\">use-sound</a>: This will handle the audio file. It will load, play, and pause the audio along with other features.</li>\n</ul>\n<p>Install with the below command:  </p>\n<pre><code>npm i use-sound\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<ul>\n<li><a href=\"https://react-icons.github.io/react-icons/\">react-icons</a>: For adding icons of play, pause, next and previous into our player.</li>\n</ul>\n<p>Install it with the below command:  </p>\n<pre><code>npm i react-icons\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h1 id=\"Player-js\"><a href=\"#Player-js\" class=\"headerlink\" title=\"Player.js\"></a><a href=\"#playerjs\"></a>Player.js</h1><p>Create a <code>component</code> directory in the <code>src</code> folder. Inside that create a component with the name <code>Player.js</code>. This component will be our music player.</p>\n<h2 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a><a href=\"#imports\"></a>Imports</h2><p>As per the library to import in the file. You can look at it here:  </p>\n<pre><code>import &#123; useEffect, useState &#125; from &quot;react&quot;; \nimport useSound from &quot;use-sound&quot;; // for handling the sound\nimport qala from &quot;../assets/qala.mp3&quot;; // importing the music\nimport &#123; AiFillPlayCircle, AiFillPauseCircle &#125; from &quot;react-icons/ai&quot;; // icons for play and pause\nimport &#123; BiSkipNext, BiSkipPrevious &#125; from &quot;react-icons/bi&quot;; // icons for next and previous track\nimport &#123; IconContext &#125; from &quot;react-icons&quot;; // for customazing the icons\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>You can look into comments for the explanation of the imports.</p>\n<h2 id=\"Playing-and-Pausing-the-audio\"><a href=\"#Playing-and-Pausing-the-audio\" class=\"headerlink\" title=\"Playing and Pausing the audio\"></a><a href=\"#playing-and-pausing-the-audio\"></a>Playing and Pausing the audio</h2><p>Let’s implement the mandatory feature of the player which is playing and pausing the audio.</p>\n<p>At the top, we have a <code>isPlaying</code> state for storing the current status of the player. This will be helpful in conditional rendering the play&#x2F;pause icon according the status of the player.  </p>\n<pre><code>const [isPlaying, setIsPlaying] = useState(false);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We need to initialize the <code>useSound</code> with audio. It will return the play, pause, duration, and sound method.  </p>\n<pre><code>const [play, &#123; pause, duration, sound &#125;] = useSound(qala);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p><code>play</code> and <code>pause</code> is for playing and pausing the audio. <code>duration</code> is for the length of the track in milliseconds. <code>sound</code> will provide us with the <a href=\"https://github.com/goldfire/howler.js\">howler.js</a> method for the sound.</p>\n<p>Create a function for handling the play and pause buttons. Here is the code for it.  </p>\n<pre><code>  const playingButton = () =&gt; &#123;\n    if (isPlaying) &#123;\n      pause(); // this will pause the audio\n      setIsPlaying(false);\n    &#125; else &#123;\n      play(); // this will play the audio\n      setIsPlaying(true);\n    &#125;\n  &#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now, it’s time to add the UI component of the player into the <code>return</code>. Here is the code for it.  </p>\n<pre><code>  return (\n    &lt;div className=&quot;component&quot;&gt;\n      &lt;h2&gt;Playing Now&lt;/h2&gt;\n      &lt;img\n        className=&quot;musicCover&quot;\n        src=&quot;https://picsum.photos/200/200&quot;\n      /&gt;\n      &lt;div&gt;\n        &lt;h3 className=&quot;title&quot;&gt;Rubaiyyan&lt;/h3&gt;\n        &lt;p className=&quot;subTitle&quot;&gt;Qala&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;button className=&quot;playButton&quot;&gt;\n          &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n            &lt;BiSkipPrevious /&gt;\n          &lt;/IconContext.Provider&gt;\n        &lt;/button&gt;\n        &#123;!isPlaying ? (\n          &lt;button className=&quot;playButton&quot; onClick=&#123;playingButton&#125;&gt;\n            &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n              &lt;AiFillPlayCircle /&gt;\n            &lt;/IconContext.Provider&gt;\n          &lt;/button&gt;\n        ) : (\n          &lt;button className=&quot;playButton&quot; onClick=&#123;playingButton&#125;&gt;\n            &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n              &lt;AiFillPauseCircle /&gt;\n            &lt;/IconContext.Provider&gt;\n          &lt;/button&gt;\n        )&#125;\n        &lt;button className=&quot;playButton&quot;&gt;\n          &lt;IconContext.Provider value=&#123;&#123; size: \"3em\", color: \"#27AE60\" &#125;&#125;&gt;\n            &lt;BiSkipNext /&gt;\n          &lt;/IconContext.Provider&gt;\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>For the cover image, I have used the <a href=\"https://picsum.photos/\">Loren Picsum</a> for generating a random image.</p>\n<p>You can look here for the CSS of the file:  </p>\n<pre><code>body &#123;\n  background-color: #e5e5e5;\n&#125;\n\n.App &#123;\n  font-family: sans-serif;\n  text-align: center;\n&#125;\n\n.component &#123;\n  background-color: white;\n  width: 25%;\n  max-width: 600px;\n  margin: 1em auto;\n  padding-bottom: 2em;\n  border: 0.1px solid black;\n  border-radius: 10px;\n&#125;\n\n.musicCover &#123;\n  border-radius: 10%;\n&#125;\n\n.playButton &#123;\n  background: none;\n  border: none;\n  align-items: center;\n  justify-content: center;\n&#125;\n\n.subTitle &#123;\n  margin-top: -1em;\n  color: #4f4f4f;\n&#125;\n\n.time &#123;\n  margin: 0 auto;\n  width: 80%;\n  display: flex;\n  justify-content: space-between;\n  color: #828282;\n  font-size: smaller;\n&#125;\n\n.timeline &#123;\n  width: 80%;\n  background-color: #27ae60;\n&#125;\n\ninput[type=&quot;range&quot;] &#123;\n  background-color: #27ae60;\n&#125;\n\n@media (max-width: 900px) &#123;\n  .component &#123;\n    width: 50%;\n  &#125;\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Run the react server. If everything goes well you will be able to see the below screen.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DL94VPQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vi5q1apc13fsx3pcn0cp.png\" alt=\"Screenshot - React Music Player\"></a></p>\n<p>Click on the play button to play the audio.</p>\n<h2 id=\"Adding-audio-timeline-with-the-current-time-and-duration-of-the-audio\"><a href=\"#Adding-audio-timeline-with-the-current-time-and-duration-of-the-audio\" class=\"headerlink\" title=\"Adding audio timeline with the current time and duration of the audio\"></a><a href=\"#adding-audio-timeline-with-the-current-time-and-duration-of-the-audio\"></a>Adding audio timeline with the current time and duration of the audio</h2><p>Now, let’s add the timeline to the player. The timeline will controllable by the user. Any changes to it will change the audio’s current position.</p>\n<p>Let’s look into the state that we are using. You see the comments for an explanation of each state.  </p>\n<pre><code>  const [currTime, setCurrTime] = useState(&#123;\n    min: &quot;&quot;,\n    sec: &quot;&quot;,\n  &#125;); // current position of the audio in minutes and seconds\n\n  const [seconds, setSeconds] = useState(); // current position of the audio in seconds\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We are grabbing the duration props from the <code>useSound</code>. As the duration is provided in milliseconds, we have converted it into minutes and seconds.  </p>\n<pre><code>useEffect(() =&gt; &#123;\n  const sec = duration / 1000;\n  const min = Math.floor(sec / 60);\n  const secRemain = Math.floor(sec % 60);\n  const time = &#123;\n    min: min,\n    sec: secRemain\n  &#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now, for the current position of the audio, we have the <code>sound.seek([])</code> method. We are running this function every second to change the current position of the audio. After getting the position of the audio which is in seconds. We are converting it into minutes and seconds. After converting, we are setting the state with the current value. Here is the code for it.  </p>\n<pre><code>useEffect(() =&gt; &#123;\n    const interval = setInterval(() =&gt; &#123;\n      if (sound) &#123;\n        setSeconds(sound.seek([])); // setting the seconds state with the current state\n        const min = Math.floor(sound.seek([]) / 60);\n        const sec = Math.floor(sound.seek([]) % 60);\n        setCurrTime(&#123;\n          min,\n          sec,\n        &#125;);\n      &#125;\n    &#125;, 1000);\n    return () =&gt; clearInterval(interval);\n  &#125;, [sound]);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now for the return. Here is the code.  </p>\n<pre><code>      &lt;div&gt;\n        &lt;div className=&quot;time&quot;&gt;\n          &lt;p&gt;\n            &#123;currTime.min&#125;:&#123;currTime.sec&#125;\n          &lt;/p&gt;\n          &lt;p&gt;\n            &#123;time.min&#125;:&#123;time.sec&#125;\n          &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;input\n          type=&quot;range&quot;\n          min=&quot;0&quot;\n          max=&#123;duration / 1000&#125;\n          default=&quot;0&quot;\n          value=&#123;seconds&#125;\n          className=&quot;timeline&quot;\n          onChange=&#123;(e) =&gt; &#123;\n            sound.seek([e.target.value]);\n          &#125;&#125;\n        /&gt;\n      &lt;/div&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>The value of the range input is the <code>second</code> state. It will provide us with the current position of the audio. On change in the range by the user. We are calling the <code>soud.seek()</code> method to change the current position of the audio.</p>\n<h1 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a><a href=\"#output\"></a>Output</h1><p>After successfully completing the project, you will be able to see the below output.</p>\n<p>GIF</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--sHfL5Oxg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ai4g1rt3oc5y819inkje.gif\" alt=\"Image description\"></p>\n<blockquote>\n<p>Note: The music is coming into my speaker.</p>\n</blockquote>\n<p>I have created a codesandbox. You can look at it for the complete project with code and the output.</p>\n<blockquote>\n<p>Note: The song that I used is <a href=\"https://www.youtube.com/watch?v=wEkMPeP50Ss\">Rubaaiyaan</a> from Qala. All credit to the creator.</p>\n</blockquote>\n<h1 id=\"Additional-Features\"><a href=\"#Additional-Features\" class=\"headerlink\" title=\"Additional Features\"></a><a href=\"#additional-features\"></a>Additional Features</h1><p>You can work on the music player to add more features such as:</p>\n<ul>\n<li>It currently plays one song and loads many songs into it. Use the next and the previous icons for changing audio.</li>\n<li>Change the name and album of the audio as per the song.</li>\n<li>Add more features that you wish a music player should have.</li>\n</ul>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a><a href=\"#conclusion\"></a>Conclusion</h1><p>We have created our own music player. This project will help you in handling audio files in React. We have added features of play and pause with the function. Also added an audio timeline with the range input. Users can change the current position of the audio with the timeline. Feel free to add more features to the project.</p>\n<p>I hope this project has helped you in understanding a method of handling music in React. Let me know in the comment if you want a video player tutorial too. Thanks for reading the blog post.</p>\n"},{"title":"5 Reasons Why Every React Developer Should Learn TypeScript","date":"2022-12-17T22:30:07.000Z","_content":"![$cover](images/type.webp)\n\nAs a React developer, you're always looking for ways to improve the quality and maintainability of your code. That's where learning TypeScript comes in! Here are five reasons why every React developer should consider adding TypeScript to their toolkit:\n\n[](#1-typescript-can-catch-errors-before-you-even-run-your-code)1\\. TypeScript can catch errors before you even run your code\n-----------------------------------------------------------------------------------------------------------------------------\n\n[![TypeScript can catch errors before you even run your code](https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png)\n\nTypeScript's strong type system allows you to specify the expected data types of variables, function arguments, and return values. This can catch type-related errors early on in the development process, saving you time and frustration debugging issues in production.\n\n[](#2-typescript-can-make-your-code-selfexplanatory)2\\. TypeScript can make your code self-explanatory\n------------------------------------------------------------------------------------------------------\n\n[![TypeScript can make your code self-explanatory](https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png)\n\nBy explicitly defining types, your code becomes easier to understand for yourself and other developers. This can make it easier to maintain and modify your codebase over time.\n\n[](#3-typescript-is-becoming-more-popular-among-developers-and-companies)3\\. TypeScript is becoming more popular among developers and companies\n-----------------------------------------------------------------------------------------------------------------------------------------------\n\n[![TypeScript is becoming more popular among developers and companies](https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png)  \n_Source: [https://css-tricks.com/the-relevance-of-typescript-in-2022/](https://css-tricks.com/the-relevance-of-typescript-in-2022/)_\n\nIn recent years, TypeScript has gained widespread adoption among developers and companies. As a result, many employers are now seeking candidates with TypeScript experience. Adding TypeScript to your skillset can make you a more attractive job candidate and open up new opportunities for your career.\n\n[](#4-typescript-can-improve-the-reliability-of-your-tests)4\\. TypeScript can improve the reliability of your tests\n-------------------------------------------------------------------------------------------------------------------\n\n[![TypeScript can improve the reliability of your tests](https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png)\n\nBy specifying the expected inputs and outputs of your functions with TypeScript's type system, you can write more reliable tests for your code. This can give you confidence that your code is working as intended and catch any potential issues before they make it to production.\n\n[](#5-typescript-can-make-refactoring-your-code-easier)5\\. TypeScript can make refactoring your code easier\n-----------------------------------------------------------------------------------------------------------\n\nGIF\n\n![TypeScript can make refactoring your code easier](https://res.cloudinary.com/practicaldev/image/fetch/s--KW4uOkLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/972891/39023162-e2d99498-43ed-11e8-93a2-14287765aad8.gif)\n\nHaving clear type definitions can make it easier to refactor your code with confidence, knowing that you won't accidentally break any important type relationships. This can save you time and effort when making changes to your codebase.\n\nIn conclusion, learning TypeScript as a React developer can bring numerous benefits to your projects and career. Its strong type system and seamless integration with React can improve the quality and maintainability of your code, making you a more valuable and sought-after developer.\n\nTo fully take advantage of the benefits that TypeScript offers as a React developer, here are a few tips to keep in mind:\n\n*   Gradually introduce TypeScript into your workflow by adding it to one or two projects at a time. This will allow you to get a feel for how it works and how it can improve your code.\n*   Make use of TypeScript's interface and class types to create custom types and reusable components.\n*   Don't be afraid to ask for help or consult the TypeScript documentation as you learn. The TypeScript community is very active and helpful, and there are many resources available online to assist you.\n*   Keep an open mind and be willing to experiment with different approaches. As with any new tool, it may take some time to find what works best for you and your projects.\n\nBy following these tips and consistently using TypeScript in your React projects, you'll be well on your way to reaping the benefits of this powerful tool. Happy coding!","source":"_posts/typescript.md","raw":"---\ntitle: 5 Reasons Why Every React Developer Should Learn TypeScript\ndate: 2022-12-17 17:30:07\ntags:\n    - typescript\n---\n![$cover](images/type.webp)\n\nAs a React developer, you're always looking for ways to improve the quality and maintainability of your code. That's where learning TypeScript comes in! Here are five reasons why every React developer should consider adding TypeScript to their toolkit:\n\n[](#1-typescript-can-catch-errors-before-you-even-run-your-code)1\\. TypeScript can catch errors before you even run your code\n-----------------------------------------------------------------------------------------------------------------------------\n\n[![TypeScript can catch errors before you even run your code](https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png)\n\nTypeScript's strong type system allows you to specify the expected data types of variables, function arguments, and return values. This can catch type-related errors early on in the development process, saving you time and frustration debugging issues in production.\n\n[](#2-typescript-can-make-your-code-selfexplanatory)2\\. TypeScript can make your code self-explanatory\n------------------------------------------------------------------------------------------------------\n\n[![TypeScript can make your code self-explanatory](https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png)\n\nBy explicitly defining types, your code becomes easier to understand for yourself and other developers. This can make it easier to maintain and modify your codebase over time.\n\n[](#3-typescript-is-becoming-more-popular-among-developers-and-companies)3\\. TypeScript is becoming more popular among developers and companies\n-----------------------------------------------------------------------------------------------------------------------------------------------\n\n[![TypeScript is becoming more popular among developers and companies](https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png)  \n_Source: [https://css-tricks.com/the-relevance-of-typescript-in-2022/](https://css-tricks.com/the-relevance-of-typescript-in-2022/)_\n\nIn recent years, TypeScript has gained widespread adoption among developers and companies. As a result, many employers are now seeking candidates with TypeScript experience. Adding TypeScript to your skillset can make you a more attractive job candidate and open up new opportunities for your career.\n\n[](#4-typescript-can-improve-the-reliability-of-your-tests)4\\. TypeScript can improve the reliability of your tests\n-------------------------------------------------------------------------------------------------------------------\n\n[![TypeScript can improve the reliability of your tests](https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png)\n\nBy specifying the expected inputs and outputs of your functions with TypeScript's type system, you can write more reliable tests for your code. This can give you confidence that your code is working as intended and catch any potential issues before they make it to production.\n\n[](#5-typescript-can-make-refactoring-your-code-easier)5\\. TypeScript can make refactoring your code easier\n-----------------------------------------------------------------------------------------------------------\n\nGIF\n\n![TypeScript can make refactoring your code easier](https://res.cloudinary.com/practicaldev/image/fetch/s--KW4uOkLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/972891/39023162-e2d99498-43ed-11e8-93a2-14287765aad8.gif)\n\nHaving clear type definitions can make it easier to refactor your code with confidence, knowing that you won't accidentally break any important type relationships. This can save you time and effort when making changes to your codebase.\n\nIn conclusion, learning TypeScript as a React developer can bring numerous benefits to your projects and career. Its strong type system and seamless integration with React can improve the quality and maintainability of your code, making you a more valuable and sought-after developer.\n\nTo fully take advantage of the benefits that TypeScript offers as a React developer, here are a few tips to keep in mind:\n\n*   Gradually introduce TypeScript into your workflow by adding it to one or two projects at a time. This will allow you to get a feel for how it works and how it can improve your code.\n*   Make use of TypeScript's interface and class types to create custom types and reusable components.\n*   Don't be afraid to ask for help or consult the TypeScript documentation as you learn. The TypeScript community is very active and helpful, and there are many resources available online to assist you.\n*   Keep an open mind and be willing to experiment with different approaches. As with any new tool, it may take some time to find what works best for you and your projects.\n\nBy following these tips and consistently using TypeScript in your React projects, you'll be well on your way to reaping the benefits of this powerful tool. Happy coding!","slug":"typescript","published":1,"updated":"2022-12-22T15:13:46.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irn0004twlhebwfbu9r","content":"<p><img src=\"/images/type.webp\" alt=\"$cover\"></p>\n<p>As a React developer, you’re always looking for ways to improve the quality and maintainability of your code. That’s where learning TypeScript comes in! Here are five reasons why every React developer should consider adding TypeScript to their toolkit:</p>\n<h2 id=\"1-TypeScript-can-catch-errors-before-you-even-run-your-code\"><a href=\"#1-TypeScript-can-catch-errors-before-you-even-run-your-code\" class=\"headerlink\" title=\"1. TypeScript can catch errors before you even run your code\"></a><a href=\"#1-typescript-can-catch-errors-before-you-even-run-your-code\"></a>1. TypeScript can catch errors before you even run your code</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png\" alt=\"TypeScript can catch errors before you even run your code\"></a></p>\n<p>TypeScript’s strong type system allows you to specify the expected data types of variables, function arguments, and return values. This can catch type-related errors early on in the development process, saving you time and frustration debugging issues in production.</p>\n<h2 id=\"2-TypeScript-can-make-your-code-self-explanatory\"><a href=\"#2-TypeScript-can-make-your-code-self-explanatory\" class=\"headerlink\" title=\"2. TypeScript can make your code self-explanatory\"></a><a href=\"#2-typescript-can-make-your-code-selfexplanatory\"></a>2. TypeScript can make your code self-explanatory</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png\" alt=\"TypeScript can make your code self-explanatory\"></a></p>\n<p>By explicitly defining types, your code becomes easier to understand for yourself and other developers. This can make it easier to maintain and modify your codebase over time.</p>\n<h2 id=\"3-TypeScript-is-becoming-more-popular-among-developers-and-companies\"><a href=\"#3-TypeScript-is-becoming-more-popular-among-developers-and-companies\" class=\"headerlink\" title=\"3. TypeScript is becoming more popular among developers and companies\"></a><a href=\"#3-typescript-is-becoming-more-popular-among-developers-and-companies\"></a>3. TypeScript is becoming more popular among developers and companies</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png\" alt=\"TypeScript is becoming more popular among developers and companies\"></a><br><em>Source: <a href=\"https://css-tricks.com/the-relevance-of-typescript-in-2022/\">https://css-tricks.com/the-relevance-of-typescript-in-2022/</a></em></p>\n<p>In recent years, TypeScript has gained widespread adoption among developers and companies. As a result, many employers are now seeking candidates with TypeScript experience. Adding TypeScript to your skillset can make you a more attractive job candidate and open up new opportunities for your career.</p>\n<h2 id=\"4-TypeScript-can-improve-the-reliability-of-your-tests\"><a href=\"#4-TypeScript-can-improve-the-reliability-of-your-tests\" class=\"headerlink\" title=\"4. TypeScript can improve the reliability of your tests\"></a><a href=\"#4-typescript-can-improve-the-reliability-of-your-tests\"></a>4. TypeScript can improve the reliability of your tests</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png\" alt=\"TypeScript can improve the reliability of your tests\"></a></p>\n<p>By specifying the expected inputs and outputs of your functions with TypeScript’s type system, you can write more reliable tests for your code. This can give you confidence that your code is working as intended and catch any potential issues before they make it to production.</p>\n<h2 id=\"5-TypeScript-can-make-refactoring-your-code-easier\"><a href=\"#5-TypeScript-can-make-refactoring-your-code-easier\" class=\"headerlink\" title=\"5. TypeScript can make refactoring your code easier\"></a><a href=\"#5-typescript-can-make-refactoring-your-code-easier\"></a>5. TypeScript can make refactoring your code easier</h2><p>GIF</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KW4uOkLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/972891/39023162-e2d99498-43ed-11e8-93a2-14287765aad8.gif\" alt=\"TypeScript can make refactoring your code easier\"></p>\n<p>Having clear type definitions can make it easier to refactor your code with confidence, knowing that you won’t accidentally break any important type relationships. This can save you time and effort when making changes to your codebase.</p>\n<p>In conclusion, learning TypeScript as a React developer can bring numerous benefits to your projects and career. Its strong type system and seamless integration with React can improve the quality and maintainability of your code, making you a more valuable and sought-after developer.</p>\n<p>To fully take advantage of the benefits that TypeScript offers as a React developer, here are a few tips to keep in mind:</p>\n<ul>\n<li>Gradually introduce TypeScript into your workflow by adding it to one or two projects at a time. This will allow you to get a feel for how it works and how it can improve your code.</li>\n<li>Make use of TypeScript’s interface and class types to create custom types and reusable components.</li>\n<li>Don’t be afraid to ask for help or consult the TypeScript documentation as you learn. The TypeScript community is very active and helpful, and there are many resources available online to assist you.</li>\n<li>Keep an open mind and be willing to experiment with different approaches. As with any new tool, it may take some time to find what works best for you and your projects.</li>\n</ul>\n<p>By following these tips and consistently using TypeScript in your React projects, you’ll be well on your way to reaping the benefits of this powerful tool. Happy coding!</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/type.webp\" alt=\"$cover\"></p>\n<p>As a React developer, you’re always looking for ways to improve the quality and maintainability of your code. That’s where learning TypeScript comes in! Here are five reasons why every React developer should consider adding TypeScript to their toolkit:</p>\n<h2 id=\"1-TypeScript-can-catch-errors-before-you-even-run-your-code\"><a href=\"#1-TypeScript-can-catch-errors-before-you-even-run-your-code\" class=\"headerlink\" title=\"1. TypeScript can catch errors before you even run your code\"></a><a href=\"#1-typescript-can-catch-errors-before-you-even-run-your-code\"></a>1. TypeScript can catch errors before you even run your code</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--VWC9quyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynfsq6z8bfdpifjrx1po.png\" alt=\"TypeScript can catch errors before you even run your code\"></a></p>\n<p>TypeScript’s strong type system allows you to specify the expected data types of variables, function arguments, and return values. This can catch type-related errors early on in the development process, saving you time and frustration debugging issues in production.</p>\n<h2 id=\"2-TypeScript-can-make-your-code-self-explanatory\"><a href=\"#2-TypeScript-can-make-your-code-self-explanatory\" class=\"headerlink\" title=\"2. TypeScript can make your code self-explanatory\"></a><a href=\"#2-typescript-can-make-your-code-selfexplanatory\"></a>2. TypeScript can make your code self-explanatory</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O3yMfSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pao7b4iquxjfd6p5kmwi.png\" alt=\"TypeScript can make your code self-explanatory\"></a></p>\n<p>By explicitly defining types, your code becomes easier to understand for yourself and other developers. This can make it easier to maintain and modify your codebase over time.</p>\n<h2 id=\"3-TypeScript-is-becoming-more-popular-among-developers-and-companies\"><a href=\"#3-TypeScript-is-becoming-more-popular-among-developers-and-companies\" class=\"headerlink\" title=\"3. TypeScript is becoming more popular among developers and companies\"></a><a href=\"#3-typescript-is-becoming-more-popular-among-developers-and-companies\"></a>3. TypeScript is becoming more popular among developers and companies</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--XGgUZs5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tbojrx0yzuqwghkat343.png\" alt=\"TypeScript is becoming more popular among developers and companies\"></a><br><em>Source: <a href=\"https://css-tricks.com/the-relevance-of-typescript-in-2022/\">https://css-tricks.com/the-relevance-of-typescript-in-2022/</a></em></p>\n<p>In recent years, TypeScript has gained widespread adoption among developers and companies. As a result, many employers are now seeking candidates with TypeScript experience. Adding TypeScript to your skillset can make you a more attractive job candidate and open up new opportunities for your career.</p>\n<h2 id=\"4-TypeScript-can-improve-the-reliability-of-your-tests\"><a href=\"#4-TypeScript-can-improve-the-reliability-of-your-tests\" class=\"headerlink\" title=\"4. TypeScript can improve the reliability of your tests\"></a><a href=\"#4-typescript-can-improve-the-reliability-of-your-tests\"></a>4. TypeScript can improve the reliability of your tests</h2><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--dUdeubWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw1fmcbf31zzgqbg7ih2.png\" alt=\"TypeScript can improve the reliability of your tests\"></a></p>\n<p>By specifying the expected inputs and outputs of your functions with TypeScript’s type system, you can write more reliable tests for your code. This can give you confidence that your code is working as intended and catch any potential issues before they make it to production.</p>\n<h2 id=\"5-TypeScript-can-make-refactoring-your-code-easier\"><a href=\"#5-TypeScript-can-make-refactoring-your-code-easier\" class=\"headerlink\" title=\"5. TypeScript can make refactoring your code easier\"></a><a href=\"#5-typescript-can-make-refactoring-your-code-easier\"></a>5. TypeScript can make refactoring your code easier</h2><p>GIF</p>\n<p><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KW4uOkLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/972891/39023162-e2d99498-43ed-11e8-93a2-14287765aad8.gif\" alt=\"TypeScript can make refactoring your code easier\"></p>\n<p>Having clear type definitions can make it easier to refactor your code with confidence, knowing that you won’t accidentally break any important type relationships. This can save you time and effort when making changes to your codebase.</p>\n<p>In conclusion, learning TypeScript as a React developer can bring numerous benefits to your projects and career. Its strong type system and seamless integration with React can improve the quality and maintainability of your code, making you a more valuable and sought-after developer.</p>\n<p>To fully take advantage of the benefits that TypeScript offers as a React developer, here are a few tips to keep in mind:</p>\n<ul>\n<li>Gradually introduce TypeScript into your workflow by adding it to one or two projects at a time. This will allow you to get a feel for how it works and how it can improve your code.</li>\n<li>Make use of TypeScript’s interface and class types to create custom types and reusable components.</li>\n<li>Don’t be afraid to ask for help or consult the TypeScript documentation as you learn. The TypeScript community is very active and helpful, and there are many resources available online to assist you.</li>\n<li>Keep an open mind and be willing to experiment with different approaches. As with any new tool, it may take some time to find what works best for you and your projects.</li>\n</ul>\n<p>By following these tips and consistently using TypeScript in your React projects, you’ll be well on your way to reaping the benefits of this powerful tool. Happy coding!</p>\n"},{"title":"20 Git Commands You (Probably) Didn't Know About 🧙‍♂️","date":"2022-12-18T19:48:01.000Z","_content":"![$cover](images/git.webp)\n\nIf you've ever browsed the [git manual](https://git-scm.com/docs) (or run `man git`), then you'll have noticed there's a whole lot more to git than what most of us use on a daily basis. A lot of these commands are incredibly powerful and can make your life a lot easier (others are a bit niche, but still good to know).\n\n> This post outlines 20 of my favourite under-used git features, which you can use to level up your development process, impress your colleagues, help you answer git interview questions, and most importantly - have fun with!\n\n### [](#contents-and-tldr)Contents (and TL;DR)\n\n*   [Git Web](#git-web) - _Open builtin GUI_\n*   [Git Notes](#git-notes) - _Attach extra info to commits_\n*   [Git Bisect](#git-bisect) - _Debug like a pro_\n*   [Git Grep](#git-grep) - _Search for anything_\n*   [Git Archive](#git-archive) - _Compress project for sharing_\n*   [Git Submodules](#git-submodules) - _Import other repos into yours_\n*   [Git Bugreport](#git-bugreport) - _Compile bug report with system info_\n*   [Git Fsck](#git-fsck) - _Verify and recover unreachable objects_\n*   [Git Stripspace](#git-stripspace) - _Remove trailing whitespaces_\n*   [Git Diff](#git-diff) - _Compare changes between two files_\n*   [Git Hooks](#git-hooks) - _Execute script when a git command is run_\n*   [Git Blame](#git-blame) - _Show who wrote a given line_\n*   [Git Large File Storage](#git-lfs) - _Store big files in git_\n*   [Git Garbage Collection](#git-gc) - _Optimize your git repo_\n*   [Git Show](#git-show) - _Easily inspect any git object_\n*   [Git Describe](#git-describe) - _Give readable name based on last tag_\n*   [Git Tag](#git-tag) - _Create version tags at specific points_\n*   [Git Reflog](#git-reflog) - _List all git actions made on a repo_\n*   [Git Log](#git-log) - _View commit log, and branch diagrams_\n*   [Git Cherry Pick](#git-cherry-pick) - _Pull a feature into your branch_\n*   [Git Switch](#git-switch) - _Quickly jump between branches_\n*   [Bonus](#bonus) - _Extend git with more commands!_\n\n* * *\n\n[](#git-web)Git Web\n-------------------\n\n> Run [`git instaweb`](https://git-scm.com/docs/git-instaweb) to instantly browse your working repository in gitweb\n\nGit has a built-in [web-based visualiser](https://git-scm.com/docs/gitweb) for browsing local repositories, which lets you view and manage your repo via a GUI in the browser. It's packed with useful features, including:\n\n*   Browsing and stepping through revisions and inspecting diffs, file contents and metadata\n*   Viewing commit logs, branches, directories, file history, and attached data visually\n*   Generating RSS or Atom feeds of commits and repository activity logs\n*   Searching commits, files, changes and diffs\n\nTo open it, just run `git instaweb` from within your repo. Your browser should pop open, and load `http://localhost:1234`. If you don't have Lighttpd installed, you can specify an alternative web server with the `-d` flag. Other options can be configured either via flags (like `-p` for port, `-b` for the browser to open, etc), or under the `[instaweb]` block in your git config.\n\nThere's also the `git gui` command, which can open up a GUI-based git app\n\n[![Screenshot of Git GUI](https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png)\n\n* * *\n\n[](#git-notes)Git Notes\n-----------------------\n\n> Use [`git notes`](https://git-scm.com/docs/git-notes) to add extra info to commits\n\nSometimes you need to attach additional data to a git commit (beyond just the changes, message, date-time and author info).\n\nThe notes are stored within `.git/refs/notes`, and since that's separate from the commit object data, you can modify the notes associated with a commit at anytime, without the SHA-1 hash changing.\n\nYou can view notes with `git log`, using most git GUI apps, or with the `git notes show` command. Some git hosts also show notes in the commit view (although [GH no longer displays notes](https://github.blog/2010-08-25-git-notes-display/)).\n\n* * *\n\n[](#git-bisect)Git Bisect\n-------------------------\n\n> With [`git bisect`](https://git-scm.com/docs/git-bisect) you can find the commit that introduced a bug using binary search\n\nThis is one of the most powerful, yet easy to use git commands- bisect is an absolute life saver when it comes to debugging. After starting a bisect, it checks out commits for you, and you tell it weather that commit is `good` (no bug), or `bad` (bug introduced), which lets you narrow down the the earliest commit where the bug is present.\n\nTo get started, run `git bisect start` then pass it a known good commit with `git bisect good <commit-hash>` and a known bad one (defaults to current) with `git bisect bad <optional-hash>`. It will then checkout the commit in-between the good and bad commits, then you specify weather the bug is present with either `git bisect good` or `git bisect bad`. It will then repeat the process, checking out a commit in the center of the bad and good, all the way until you've found the exact commit that introduced the bug. Cancel anytime with `git bisect reset`.\n\nThere's much more to the bisect command, including replays, viewing commits, skipping, so it's worth checking out the docs next time your debugging.\n\n* * *\n\n[](#git-grep)Git Grep\n---------------------\n\n> Use [`git grep`](https://git-scm.com/docs/git-grep) to search for code, files, commits or anything else across your repo\n\nEver find yourself needing to search for a string anywhere within a git project? With git grep you can easily search for any string, or RegEx throughout your project, and across branches (like a more powerful Ctrl + F!).\n\n`git grep <regexp> <ref>`\n\nIt includes plenty of [options](https://git-scm.com/docs/git-grep#_options) to narrow down your search, or specify results format. For example, use `-l` to only return file names, `-c` to specify number of matches per file to return, `-e` to exclude results matching a condition, `--and` to specify multiple conditions, `-n` to search with line number.\n\nSince git grep is regex-compatible, you can get much more advanced with the string your searching for.  \nYou can also use it to specify a file extension, like `git grep 'console.log' *.js` which will show all console.logs from within JavaScript files\n\nThe second parameter is a ref, and can be a branch name, commit, range of commits, or anything else. E.g. `git grep \"foo\" HEAD~1` will search the previous commit.\n\n* * *\n\n[](#git-archive)Git Archive\n---------------------------\n\n> Use [`git archive`](https://git-scm.com/docs/git-archive) to combine an entire repo into a single file\n\nWhen sharing or backing up a repository, it's often preferred to store it as a single file. Using git archive will include all repo history, so it can be easily extracted back to it's original form. The command also includes a lot of additional options, so you can customise exactly what files are and aren't included in the archive.  \n\n    git archive --format=tar --output=./my-archive HEAD\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n* * *\n\n[](#git-submodules)Git Submodules\n---------------------------------\n\n> Use [`git submodule`](https://git-scm.com/docs/git-submodule) to pull any other repository into yours\n\nIn git, [submodules](https://git-scm.com/docs/gitsubmodules) let you mount one repo into another, and is commonly used for core dependencies or splitting components into separate repositories. For more info, see [this post](https://notes.aliciasykes.com/17996/quick-tip-git-submodules).\n\nRunning the following command will pull a module into the specified location, and also create a `.gitmodules` file so that it's always downloaded when the repo is cloned. Use the `--recursive` flag to include sub-modules when cloning the repo.  \n\n    git submodule add https://github.com/<user>/<repo> <path/to/save/at>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThere's also [`git subtree`](https://www.atlassian.com/git/tutorials/git-subtree), which does a similar thing, but without the need for metadata files.\n\n* * *\n\n[](#git-bug-report)Git Bug Report\n---------------------------------\n\n> Use [`git bugreport`](https://git-scm.com/docs/git-bugreport) to compose a bug ticket, including git and system info\n\nThis command will capture system info, and then open up a standard bug template (steps to reproduce, actual + expected output, etc). The completed file should be a very complete bug report, with all necessary info captured.\n\nThis is very handy if your a maintainer for an open source package and asking a user (developer) to raise a bug report, as it ensures all necessary data is included.\n\nAnd if you are raising a bug report to the core git system, you can also run the [`git diagnose`](https://git-scm.com/docs/git-diagnose) command, and then raise your issue [here](https://github.com/git/git).\n\n* * *\n\n[](#git-fsck)Git Fsck\n---------------------\n\n> Use [`git fsck`](https://git-scm.com/docs/git-fsck) to check all objects, or recover unreachable ones\n\nAlthough not often needed, sometimes you may have to verify the objects stored by git. This is where fsck (or File System ChecK) comes in, it tests the object database and verifies the SHA-1 ID of all objects and the connections they make.\n\nIt can also be used alongside the `--unreachable` flag to find objects that are no longer reachable from any named reference (since unlike other commands, it includes everything in `.git/objects`).\n\n* * *\n\n[](#git-stripspace)Git Stripspace\n---------------------------------\n\n> Use [`git stripspace`](https://git-scm.com/docs/git-stripspace) to format whitespaces within a given file\n\nBest practice is to avoid trailing whitespaces at the end of lines, avoid having multiple consecutive blank lines, avoid empty lines from beginning and end of an input, and end each file with a new line. There's plenty of language-specific tools which do this automatically for you (like prettier), but Git also has this functionality builtin.\n\nIt's intended for metadata (commit messages, tags, branch descriptions, etc), but also works if you pipe a file to it, then pipe the response back to a file. E.g. `cat ./path-to-file.txt | git stripspace` or `git stripspace < dirty-file.txt > clean-file.txt`\n\nYou can also use this to remove comments (with `--strip-comments`), or even comment out lines (with `--comment-lines`).\n\n* * *\n\n[](#git-diff)Git Diff\n---------------------\n\n> With [`git diff`](https://git-scm.com/docs/git-diff) you can compare the difference between 2 sets of code\n\nYou're probably aware that you you can run `git diff` to show all changes since the last commit, or use `git diff <commit-sha>` to compare either 2 commits, or 1 commit to the HEAD. But there's much more you can do with the diff command.\n\nYou can also use it to compare any two arbitrary files, with `diff file-1.txt file-2.txt` (no more visiting [diffchecker.com](https://www.diffchecker.com/compare/)!)\n\nOr compare 2 branches, or refs with each other, using `git diff branch1..branch2`\n\nNote that a double dot (`..`) is the same as a space and indicates the diff input should be the tip of the branches, but you can also use a triple dot (`...`) to convert the first parameter into a ref of the shared common ancestor commit between the two diff inputs - very useful! If you want to only compare a single file across branches, just pass the files name in as the third argument.\n\nYou may want to see all changes made within a given date range, for this use `git diff HEAD@{7.day.ago} HEAD@{0}` (for the last week), again this can be paired up with a filename, branch names, specific commits or any other ref.\n\nThere's also the [`git range-diff`](https://www.git-scm.com/docs/git-range-diff) command, which provides a simple interface for comparing commit ranges.\n\nThere's much more to the git diff tool (as well as the option of using your own diff checker), so I recommend checking out [the docs](https://git-scm.com/docs/git-diff#_description).\n\n* * *\n\n[](#git-hooks)Git Hooks\n-----------------------\n\n> Use [`hooks`](https://git-scm.com/docs/githooks) to execute command or run scripts when a given get action occurs\n\nHooks let you automate pretty much anything. For example: ensuring standards are met (commit message, branch name, patch size), code quality (tests, lint), appending additional info to a commit (user, device, ticket ID), calling a webhook to record an event or run a pipeline, etc.\n\nThere's pre and post [hooks available](https://git-scm.com/docs/githooks) for most git events, like commit, rebase, merge, push, update, applypatch, etc.\n\nHooks are stored in `.git/hooks` (unless you configure them elsewhere with `git config core.hooksPath`), and can be tested with the [`git hook`](https://git-scm.com/docs/git-hook) command. Since they're just shell files, they can be used to run any command.\n\nHooks aren't pushed to the remote repository, so to share and manage them across your team, you'll need to use a [hook manager](https://github.com/aitemr/awesome-git-hooks#tools), like [lefthook](https://github.com/evilmartians/lefthook) or [husky](https://github.com/typicode/husky). There's also several [3rd-party tools](https://githooks.com/#projects), which make managing hooks easier, I recommend [overcommit](https://github.com/sds/overcommit).\n\nRemember, hooks can always be skipped (with the `--no-verify` flag), so never rely purely on hooks, especially for anything security related.\n\n* * *\n\n[](#git-blame)Git Blame\n-----------------------\n\n> Use [`git blame`](https://git-scm.com/docs/git-blame) to show author info for a specific revision and line\n\nA classic, quickly find out who wrote a specific line of code (aka which of your co-workers to blame for the bug!). But it's also useful to determine at which point in time something changed and inspect that commit and associated metadata.\n\nFor example, to view author and commit info for line 400 to 420 of index.rs, you'd run:  \n\n    git blame -L 400,420 index.rs\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n* * *\n\n[](#git-lfs)Git LFS\n-------------------\n\n> Store large files using [`git lfs`](https://git-lfs.github.com/) to not bog down your repo\n\nOften your project will contain larger files (such as databases, binary assets, archives or media files), which would slow down the git workflow and max out usage limits. That's where [Large File Storage](https://git-lfs.github.com/) comes in - it enables you to store these large assets elsewhere, while keeping them trackable with git and maintaining the same access controls/ permissions. LFS works by replacing these larger files with text pointers that are tracked within git.\n\nTo use it, just run `git lfs track <file glob>`, which will update your `.gitattributes` file. You can specify files by their extension (e.g. `*.psd`), directory, or individually. Running `git lfs ls-files` to view a list of tracked LFS files.\n\n* * *\n\n[](#git-gc)Git GC\n-----------------\n\n> Use [`git gc`](https://git-scm.com/docs/git-gc) to optimize your repository\n\nOver time git repos accumulate various types of garbage, which take up disk space, and slow down actions. That's where the built-in garbage collector comes in. Running `git gc` will remove orphaned and inaccessible commits (with [`git prune`](https://git-scm.com/docs/git-prune)), compress file revisions and stored git objects, as well as some other general house keeping tasks like packing refs, pruning reflog, revere metadata or stale working trees and updating indexes.\n\nAdding the `--aggressive` flag will [aggressively optimize](https://git-scm.com/docs/git-gc#_aggressive) the repository, throwing away any existing deltas and re-computing them, this takes much longer to run but may be needed if you've got a large repository.\n\n* * *\n\n[](#git-show)Git Show\n---------------------\n\n> Use [`git show`](https://git-scm.com/docs/git-show) to easily inspect any git object\n\nOutputs objects (blobs, treees, tags or commits) in an easily readable form. To use, just run `git show <object>`. You'll likely also want to append the `--pretty` flag, for a clearer output, but there's many other options available to customize the output (with `--format`), so this command can be extremely powerful for displaying exactly what you need.\n\nAn instance that this is very useful for, is previewing a file in another branch, without switching branches. Just run `git show branch:file`\n\n* * *\n\n[](#git-describe)Git Describe\n-----------------------------\n\n> Use [`git describe`](https://git-scm.com/docs/git-describe) to find the latest tag reachable from a commit, and give it a human-readable name\n\nRun `git describe` and you'll see a human-readable string made from combining the last tag name, with the current commit, to generate a string. You can also pass a specific tag to it,\n\nNote that you must have created tags for this to work, unless you append the `--all` flag. Git describe will also only use annotated tags by default, so you must specify the `--tags` flag to make it use lightweight tags as well.\n\n* * *\n\n[](#git-tag)Git Tag\n-------------------\n\n> Tag a specific point in your repo's history using [`git tag`](https://git-scm.com/docs/git-tag)\n\nIt's often useful to be able to [tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging) specific, important points in a repository’s history most commonly used to denote versions of releases. Creating a tag is as simple as `git tag <tagname>`, or you can tag a historical commit with `git tag -a v4.2.0 <commit sha>`. Like with commits, you can include a message alongside a tag, using `-m`.\n\nDon't forget to push your tag to remote, with `git push origin <tagname>`.  \nTo list all tags, just run `git tag`, and optionally use `-l` for a wildcard search.  \nYou'll then be able to checkout a specific tag, with `git checkout <tagname>`\n\n* * *\n\n[](#git-reflog)Git Reflog\n-------------------------\n\n> List all updates made on your repo using [`git reflog`](https://git-scm.com/docs/git-reflog)\n\nGit keeps track of updates to the tip of branches using a mechanism called reference logs, or \"reflogs\". Various events are tracked, including: clone, pull, push, commit, checkout and merge. It's often useful to be able to find an events reference, as many commands accept a ref as a parameter. Just run `git reflog` to view recent events on `HEAD`.\n\nOne thing that reflog is really useful for is recovering lost commits. Git never really loses anything, even when rewriting history (like rebasing or commit amending). Reflog allows you to go back to commits even though they are not referenced by any branch or tag.\n\nBy default reflog uses `HEAD` (your current branch), but you can run reflog on any ref. For example `git reflog show <branch name>`, or to see stashed changes with `git reflog stash`. Or show all references with `git reflog show --all`\n\n* * *\n\n[](#git-log)Git Log\n-------------------\n\n> Use [`git log`](https://git-scm.com/docs/git-log) to view a list of commits\n\nYou're likely already familiar with running `git log` to view a list of recent commits on your current branch. But there's a few things more you can do with git log.\n\nUsing `git log --graph --decorate --oneline` will show a nice neat commit graph along with ref pointers.\n\n[![example git log output](https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png)\n\nYou also often need to be able to filter logs based on various parameters, the most useful of which are:\n\n*   `git log --search=\"<anything>\"` - Search logs for specific code changes\n*   `git log --author=\"<pattern>\"` - Show log only for specific author(s)\n*   `git log --grep=\"<pattern>\"` - Filter log using search term or regex\n*   `git log <since>..<until>` - Show all commits between two references\n*   `git log -- <file>` - Show all commits made only to a specific file\n\nOr, just run `git shortlog` for a summerized list of commits.\n\n* * *\n\n[](#git-cherry-pick)Git Cherry Pick\n-----------------------------------\n\n> Use [`git cherry-pick`](https://git-scm.com/docs/git-cherry-pick) to pick specified commit(s) by reference and append them to the working HEAD\n\nSometimes you need to pull a specific commit from elsewhere, into your current branch. This can be very useful for applying hot fixes, undoing changes, restoring lost commits and in certain team collaboration settings. Note that often traditional merges are better practice, since cherry picking commits can cause duplicate commits in the log.\n\nUsage is straightforward, just run `git cherry-pick <commit-hash>`. This will pull the specified commit into your current branch.\n\n* * *\n\n[](#git-switch)Git Switch\n-------------------------\n\n> Use [`git switch`](https://git-scm.com/docs/git-switch)\n\nMoving between branches is something that we do often, the `switch` command is like a simplified version of `git checkout`, it can be used to create and navigate between branches, but unlike checkout does not copy modified files when you move between branches.\n\nSimilar to `checkout -b`, with the switch command you can append the `-c` flag to create a new branch, and jump strait into it, e.g. `git switch -c <new branch>`. And running `git switch -` will discard any experimental changes you've made, and return you to your previous branch.\n\n* * *\n\n[](#git-standup)Git Standup\n---------------------------\n\n> Use [`git standup`](https://github.com/kamranahmedse/git-standup) to recall what you did on the last working day , based on git commits\n\nI've put this one at the end, as it's not included with most git clients, but you can [easily install it](https://github.com/kamranahmedse/git-standup#install) either with your systems package manager, using a 1-line curl script, or by building from source.\n\nIf your boss requires you do a daily standup, to give updates on yesterdays work, but you can never remember what you actually did - this one is for you! It'll show a nicely formatted list of everything done in a given time frame. Usage is simple, just run `git standup`, or use [these options](https://github.com/kamranahmedse/git-standup#options) to specify what data should be shown (author, timeframe, branches, etc.\n\n* * *\n\n[](#bonus)Bonus\n---------------\n\nGit can be easily extended with add-ons, to add extra commands that do useful tasks. One of the most complete extensions is [git-extras](https://github.com/tj/git-extras/blob/master/Commands.md) by [@tj](https://github.com/tj). It gives you 70+ [extra commands](https://github.com/tj/git-extras/blob/master/Commands.md) to automate common git jobs.\n\nFor a list of more useful git add-ons, see [stevemao/awesome-git-addons](https://github.com/stevemao/awesome-git-addons).\n\nIf you're working with GitHub repos, then the [GitHub CLI](https://cli.github.com/) let's you do common tasks (managing PRs, issues, code reviews, etc) from the command line.\n\n* * *\n\nIf you like this kind of stuff,  \nconsider following for more :)\n\n[![Follow Lissy93 on GitHub](https://res.cloudinary.com/practicaldev/image/fetch/s--8_HGggCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-Lissy93-3a3a3a%3Fstyle%3Dflat%26logo%3DGitHub%26logoColor%3Dwhite)](https://github.com/Lissy93)[![Follow Lissy_Sykes on Twitter](https://res.cloudinary.com/practicaldev/image/fetch/s--BhCWBIgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-%40Lissy_Sykes-00acee%3Fstyle%3Dflat%26logo%3DTwitter%26logoColor%3Dwhite)](https://twitter.com/Lissy_Sykes)","source":"_posts/git.md","raw":"---\ntitle: 20 Git Commands You (Probably) Didn't Know About 🧙‍♂️\ndate: 2022-12-18 14:48:01\ntags:\n    - Git\n---\n![$cover](images/git.webp)\n\nIf you've ever browsed the [git manual](https://git-scm.com/docs) (or run `man git`), then you'll have noticed there's a whole lot more to git than what most of us use on a daily basis. A lot of these commands are incredibly powerful and can make your life a lot easier (others are a bit niche, but still good to know).\n\n> This post outlines 20 of my favourite under-used git features, which you can use to level up your development process, impress your colleagues, help you answer git interview questions, and most importantly - have fun with!\n\n### [](#contents-and-tldr)Contents (and TL;DR)\n\n*   [Git Web](#git-web) - _Open builtin GUI_\n*   [Git Notes](#git-notes) - _Attach extra info to commits_\n*   [Git Bisect](#git-bisect) - _Debug like a pro_\n*   [Git Grep](#git-grep) - _Search for anything_\n*   [Git Archive](#git-archive) - _Compress project for sharing_\n*   [Git Submodules](#git-submodules) - _Import other repos into yours_\n*   [Git Bugreport](#git-bugreport) - _Compile bug report with system info_\n*   [Git Fsck](#git-fsck) - _Verify and recover unreachable objects_\n*   [Git Stripspace](#git-stripspace) - _Remove trailing whitespaces_\n*   [Git Diff](#git-diff) - _Compare changes between two files_\n*   [Git Hooks](#git-hooks) - _Execute script when a git command is run_\n*   [Git Blame](#git-blame) - _Show who wrote a given line_\n*   [Git Large File Storage](#git-lfs) - _Store big files in git_\n*   [Git Garbage Collection](#git-gc) - _Optimize your git repo_\n*   [Git Show](#git-show) - _Easily inspect any git object_\n*   [Git Describe](#git-describe) - _Give readable name based on last tag_\n*   [Git Tag](#git-tag) - _Create version tags at specific points_\n*   [Git Reflog](#git-reflog) - _List all git actions made on a repo_\n*   [Git Log](#git-log) - _View commit log, and branch diagrams_\n*   [Git Cherry Pick](#git-cherry-pick) - _Pull a feature into your branch_\n*   [Git Switch](#git-switch) - _Quickly jump between branches_\n*   [Bonus](#bonus) - _Extend git with more commands!_\n\n* * *\n\n[](#git-web)Git Web\n-------------------\n\n> Run [`git instaweb`](https://git-scm.com/docs/git-instaweb) to instantly browse your working repository in gitweb\n\nGit has a built-in [web-based visualiser](https://git-scm.com/docs/gitweb) for browsing local repositories, which lets you view and manage your repo via a GUI in the browser. It's packed with useful features, including:\n\n*   Browsing and stepping through revisions and inspecting diffs, file contents and metadata\n*   Viewing commit logs, branches, directories, file history, and attached data visually\n*   Generating RSS or Atom feeds of commits and repository activity logs\n*   Searching commits, files, changes and diffs\n\nTo open it, just run `git instaweb` from within your repo. Your browser should pop open, and load `http://localhost:1234`. If you don't have Lighttpd installed, you can specify an alternative web server with the `-d` flag. Other options can be configured either via flags (like `-p` for port, `-b` for the browser to open, etc), or under the `[instaweb]` block in your git config.\n\nThere's also the `git gui` command, which can open up a GUI-based git app\n\n[![Screenshot of Git GUI](https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png)\n\n* * *\n\n[](#git-notes)Git Notes\n-----------------------\n\n> Use [`git notes`](https://git-scm.com/docs/git-notes) to add extra info to commits\n\nSometimes you need to attach additional data to a git commit (beyond just the changes, message, date-time and author info).\n\nThe notes are stored within `.git/refs/notes`, and since that's separate from the commit object data, you can modify the notes associated with a commit at anytime, without the SHA-1 hash changing.\n\nYou can view notes with `git log`, using most git GUI apps, or with the `git notes show` command. Some git hosts also show notes in the commit view (although [GH no longer displays notes](https://github.blog/2010-08-25-git-notes-display/)).\n\n* * *\n\n[](#git-bisect)Git Bisect\n-------------------------\n\n> With [`git bisect`](https://git-scm.com/docs/git-bisect) you can find the commit that introduced a bug using binary search\n\nThis is one of the most powerful, yet easy to use git commands- bisect is an absolute life saver when it comes to debugging. After starting a bisect, it checks out commits for you, and you tell it weather that commit is `good` (no bug), or `bad` (bug introduced), which lets you narrow down the the earliest commit where the bug is present.\n\nTo get started, run `git bisect start` then pass it a known good commit with `git bisect good <commit-hash>` and a known bad one (defaults to current) with `git bisect bad <optional-hash>`. It will then checkout the commit in-between the good and bad commits, then you specify weather the bug is present with either `git bisect good` or `git bisect bad`. It will then repeat the process, checking out a commit in the center of the bad and good, all the way until you've found the exact commit that introduced the bug. Cancel anytime with `git bisect reset`.\n\nThere's much more to the bisect command, including replays, viewing commits, skipping, so it's worth checking out the docs next time your debugging.\n\n* * *\n\n[](#git-grep)Git Grep\n---------------------\n\n> Use [`git grep`](https://git-scm.com/docs/git-grep) to search for code, files, commits or anything else across your repo\n\nEver find yourself needing to search for a string anywhere within a git project? With git grep you can easily search for any string, or RegEx throughout your project, and across branches (like a more powerful Ctrl + F!).\n\n`git grep <regexp> <ref>`\n\nIt includes plenty of [options](https://git-scm.com/docs/git-grep#_options) to narrow down your search, or specify results format. For example, use `-l` to only return file names, `-c` to specify number of matches per file to return, `-e` to exclude results matching a condition, `--and` to specify multiple conditions, `-n` to search with line number.\n\nSince git grep is regex-compatible, you can get much more advanced with the string your searching for.  \nYou can also use it to specify a file extension, like `git grep 'console.log' *.js` which will show all console.logs from within JavaScript files\n\nThe second parameter is a ref, and can be a branch name, commit, range of commits, or anything else. E.g. `git grep \"foo\" HEAD~1` will search the previous commit.\n\n* * *\n\n[](#git-archive)Git Archive\n---------------------------\n\n> Use [`git archive`](https://git-scm.com/docs/git-archive) to combine an entire repo into a single file\n\nWhen sharing or backing up a repository, it's often preferred to store it as a single file. Using git archive will include all repo history, so it can be easily extracted back to it's original form. The command also includes a lot of additional options, so you can customise exactly what files are and aren't included in the archive.  \n\n    git archive --format=tar --output=./my-archive HEAD\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n* * *\n\n[](#git-submodules)Git Submodules\n---------------------------------\n\n> Use [`git submodule`](https://git-scm.com/docs/git-submodule) to pull any other repository into yours\n\nIn git, [submodules](https://git-scm.com/docs/gitsubmodules) let you mount one repo into another, and is commonly used for core dependencies or splitting components into separate repositories. For more info, see [this post](https://notes.aliciasykes.com/17996/quick-tip-git-submodules).\n\nRunning the following command will pull a module into the specified location, and also create a `.gitmodules` file so that it's always downloaded when the repo is cloned. Use the `--recursive` flag to include sub-modules when cloning the repo.  \n\n    git submodule add https://github.com/<user>/<repo> <path/to/save/at>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThere's also [`git subtree`](https://www.atlassian.com/git/tutorials/git-subtree), which does a similar thing, but without the need for metadata files.\n\n* * *\n\n[](#git-bug-report)Git Bug Report\n---------------------------------\n\n> Use [`git bugreport`](https://git-scm.com/docs/git-bugreport) to compose a bug ticket, including git and system info\n\nThis command will capture system info, and then open up a standard bug template (steps to reproduce, actual + expected output, etc). The completed file should be a very complete bug report, with all necessary info captured.\n\nThis is very handy if your a maintainer for an open source package and asking a user (developer) to raise a bug report, as it ensures all necessary data is included.\n\nAnd if you are raising a bug report to the core git system, you can also run the [`git diagnose`](https://git-scm.com/docs/git-diagnose) command, and then raise your issue [here](https://github.com/git/git).\n\n* * *\n\n[](#git-fsck)Git Fsck\n---------------------\n\n> Use [`git fsck`](https://git-scm.com/docs/git-fsck) to check all objects, or recover unreachable ones\n\nAlthough not often needed, sometimes you may have to verify the objects stored by git. This is where fsck (or File System ChecK) comes in, it tests the object database and verifies the SHA-1 ID of all objects and the connections they make.\n\nIt can also be used alongside the `--unreachable` flag to find objects that are no longer reachable from any named reference (since unlike other commands, it includes everything in `.git/objects`).\n\n* * *\n\n[](#git-stripspace)Git Stripspace\n---------------------------------\n\n> Use [`git stripspace`](https://git-scm.com/docs/git-stripspace) to format whitespaces within a given file\n\nBest practice is to avoid trailing whitespaces at the end of lines, avoid having multiple consecutive blank lines, avoid empty lines from beginning and end of an input, and end each file with a new line. There's plenty of language-specific tools which do this automatically for you (like prettier), but Git also has this functionality builtin.\n\nIt's intended for metadata (commit messages, tags, branch descriptions, etc), but also works if you pipe a file to it, then pipe the response back to a file. E.g. `cat ./path-to-file.txt | git stripspace` or `git stripspace < dirty-file.txt > clean-file.txt`\n\nYou can also use this to remove comments (with `--strip-comments`), or even comment out lines (with `--comment-lines`).\n\n* * *\n\n[](#git-diff)Git Diff\n---------------------\n\n> With [`git diff`](https://git-scm.com/docs/git-diff) you can compare the difference between 2 sets of code\n\nYou're probably aware that you you can run `git diff` to show all changes since the last commit, or use `git diff <commit-sha>` to compare either 2 commits, or 1 commit to the HEAD. But there's much more you can do with the diff command.\n\nYou can also use it to compare any two arbitrary files, with `diff file-1.txt file-2.txt` (no more visiting [diffchecker.com](https://www.diffchecker.com/compare/)!)\n\nOr compare 2 branches, or refs with each other, using `git diff branch1..branch2`\n\nNote that a double dot (`..`) is the same as a space and indicates the diff input should be the tip of the branches, but you can also use a triple dot (`...`) to convert the first parameter into a ref of the shared common ancestor commit between the two diff inputs - very useful! If you want to only compare a single file across branches, just pass the files name in as the third argument.\n\nYou may want to see all changes made within a given date range, for this use `git diff HEAD@{7.day.ago} HEAD@{0}` (for the last week), again this can be paired up with a filename, branch names, specific commits or any other ref.\n\nThere's also the [`git range-diff`](https://www.git-scm.com/docs/git-range-diff) command, which provides a simple interface for comparing commit ranges.\n\nThere's much more to the git diff tool (as well as the option of using your own diff checker), so I recommend checking out [the docs](https://git-scm.com/docs/git-diff#_description).\n\n* * *\n\n[](#git-hooks)Git Hooks\n-----------------------\n\n> Use [`hooks`](https://git-scm.com/docs/githooks) to execute command or run scripts when a given get action occurs\n\nHooks let you automate pretty much anything. For example: ensuring standards are met (commit message, branch name, patch size), code quality (tests, lint), appending additional info to a commit (user, device, ticket ID), calling a webhook to record an event or run a pipeline, etc.\n\nThere's pre and post [hooks available](https://git-scm.com/docs/githooks) for most git events, like commit, rebase, merge, push, update, applypatch, etc.\n\nHooks are stored in `.git/hooks` (unless you configure them elsewhere with `git config core.hooksPath`), and can be tested with the [`git hook`](https://git-scm.com/docs/git-hook) command. Since they're just shell files, they can be used to run any command.\n\nHooks aren't pushed to the remote repository, so to share and manage them across your team, you'll need to use a [hook manager](https://github.com/aitemr/awesome-git-hooks#tools), like [lefthook](https://github.com/evilmartians/lefthook) or [husky](https://github.com/typicode/husky). There's also several [3rd-party tools](https://githooks.com/#projects), which make managing hooks easier, I recommend [overcommit](https://github.com/sds/overcommit).\n\nRemember, hooks can always be skipped (with the `--no-verify` flag), so never rely purely on hooks, especially for anything security related.\n\n* * *\n\n[](#git-blame)Git Blame\n-----------------------\n\n> Use [`git blame`](https://git-scm.com/docs/git-blame) to show author info for a specific revision and line\n\nA classic, quickly find out who wrote a specific line of code (aka which of your co-workers to blame for the bug!). But it's also useful to determine at which point in time something changed and inspect that commit and associated metadata.\n\nFor example, to view author and commit info for line 400 to 420 of index.rs, you'd run:  \n\n    git blame -L 400,420 index.rs\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n* * *\n\n[](#git-lfs)Git LFS\n-------------------\n\n> Store large files using [`git lfs`](https://git-lfs.github.com/) to not bog down your repo\n\nOften your project will contain larger files (such as databases, binary assets, archives or media files), which would slow down the git workflow and max out usage limits. That's where [Large File Storage](https://git-lfs.github.com/) comes in - it enables you to store these large assets elsewhere, while keeping them trackable with git and maintaining the same access controls/ permissions. LFS works by replacing these larger files with text pointers that are tracked within git.\n\nTo use it, just run `git lfs track <file glob>`, which will update your `.gitattributes` file. You can specify files by their extension (e.g. `*.psd`), directory, or individually. Running `git lfs ls-files` to view a list of tracked LFS files.\n\n* * *\n\n[](#git-gc)Git GC\n-----------------\n\n> Use [`git gc`](https://git-scm.com/docs/git-gc) to optimize your repository\n\nOver time git repos accumulate various types of garbage, which take up disk space, and slow down actions. That's where the built-in garbage collector comes in. Running `git gc` will remove orphaned and inaccessible commits (with [`git prune`](https://git-scm.com/docs/git-prune)), compress file revisions and stored git objects, as well as some other general house keeping tasks like packing refs, pruning reflog, revere metadata or stale working trees and updating indexes.\n\nAdding the `--aggressive` flag will [aggressively optimize](https://git-scm.com/docs/git-gc#_aggressive) the repository, throwing away any existing deltas and re-computing them, this takes much longer to run but may be needed if you've got a large repository.\n\n* * *\n\n[](#git-show)Git Show\n---------------------\n\n> Use [`git show`](https://git-scm.com/docs/git-show) to easily inspect any git object\n\nOutputs objects (blobs, treees, tags or commits) in an easily readable form. To use, just run `git show <object>`. You'll likely also want to append the `--pretty` flag, for a clearer output, but there's many other options available to customize the output (with `--format`), so this command can be extremely powerful for displaying exactly what you need.\n\nAn instance that this is very useful for, is previewing a file in another branch, without switching branches. Just run `git show branch:file`\n\n* * *\n\n[](#git-describe)Git Describe\n-----------------------------\n\n> Use [`git describe`](https://git-scm.com/docs/git-describe) to find the latest tag reachable from a commit, and give it a human-readable name\n\nRun `git describe` and you'll see a human-readable string made from combining the last tag name, with the current commit, to generate a string. You can also pass a specific tag to it,\n\nNote that you must have created tags for this to work, unless you append the `--all` flag. Git describe will also only use annotated tags by default, so you must specify the `--tags` flag to make it use lightweight tags as well.\n\n* * *\n\n[](#git-tag)Git Tag\n-------------------\n\n> Tag a specific point in your repo's history using [`git tag`](https://git-scm.com/docs/git-tag)\n\nIt's often useful to be able to [tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging) specific, important points in a repository’s history most commonly used to denote versions of releases. Creating a tag is as simple as `git tag <tagname>`, or you can tag a historical commit with `git tag -a v4.2.0 <commit sha>`. Like with commits, you can include a message alongside a tag, using `-m`.\n\nDon't forget to push your tag to remote, with `git push origin <tagname>`.  \nTo list all tags, just run `git tag`, and optionally use `-l` for a wildcard search.  \nYou'll then be able to checkout a specific tag, with `git checkout <tagname>`\n\n* * *\n\n[](#git-reflog)Git Reflog\n-------------------------\n\n> List all updates made on your repo using [`git reflog`](https://git-scm.com/docs/git-reflog)\n\nGit keeps track of updates to the tip of branches using a mechanism called reference logs, or \"reflogs\". Various events are tracked, including: clone, pull, push, commit, checkout and merge. It's often useful to be able to find an events reference, as many commands accept a ref as a parameter. Just run `git reflog` to view recent events on `HEAD`.\n\nOne thing that reflog is really useful for is recovering lost commits. Git never really loses anything, even when rewriting history (like rebasing or commit amending). Reflog allows you to go back to commits even though they are not referenced by any branch or tag.\n\nBy default reflog uses `HEAD` (your current branch), but you can run reflog on any ref. For example `git reflog show <branch name>`, or to see stashed changes with `git reflog stash`. Or show all references with `git reflog show --all`\n\n* * *\n\n[](#git-log)Git Log\n-------------------\n\n> Use [`git log`](https://git-scm.com/docs/git-log) to view a list of commits\n\nYou're likely already familiar with running `git log` to view a list of recent commits on your current branch. But there's a few things more you can do with git log.\n\nUsing `git log --graph --decorate --oneline` will show a nice neat commit graph along with ref pointers.\n\n[![example git log output](https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png)\n\nYou also often need to be able to filter logs based on various parameters, the most useful of which are:\n\n*   `git log --search=\"<anything>\"` - Search logs for specific code changes\n*   `git log --author=\"<pattern>\"` - Show log only for specific author(s)\n*   `git log --grep=\"<pattern>\"` - Filter log using search term or regex\n*   `git log <since>..<until>` - Show all commits between two references\n*   `git log -- <file>` - Show all commits made only to a specific file\n\nOr, just run `git shortlog` for a summerized list of commits.\n\n* * *\n\n[](#git-cherry-pick)Git Cherry Pick\n-----------------------------------\n\n> Use [`git cherry-pick`](https://git-scm.com/docs/git-cherry-pick) to pick specified commit(s) by reference and append them to the working HEAD\n\nSometimes you need to pull a specific commit from elsewhere, into your current branch. This can be very useful for applying hot fixes, undoing changes, restoring lost commits and in certain team collaboration settings. Note that often traditional merges are better practice, since cherry picking commits can cause duplicate commits in the log.\n\nUsage is straightforward, just run `git cherry-pick <commit-hash>`. This will pull the specified commit into your current branch.\n\n* * *\n\n[](#git-switch)Git Switch\n-------------------------\n\n> Use [`git switch`](https://git-scm.com/docs/git-switch)\n\nMoving between branches is something that we do often, the `switch` command is like a simplified version of `git checkout`, it can be used to create and navigate between branches, but unlike checkout does not copy modified files when you move between branches.\n\nSimilar to `checkout -b`, with the switch command you can append the `-c` flag to create a new branch, and jump strait into it, e.g. `git switch -c <new branch>`. And running `git switch -` will discard any experimental changes you've made, and return you to your previous branch.\n\n* * *\n\n[](#git-standup)Git Standup\n---------------------------\n\n> Use [`git standup`](https://github.com/kamranahmedse/git-standup) to recall what you did on the last working day , based on git commits\n\nI've put this one at the end, as it's not included with most git clients, but you can [easily install it](https://github.com/kamranahmedse/git-standup#install) either with your systems package manager, using a 1-line curl script, or by building from source.\n\nIf your boss requires you do a daily standup, to give updates on yesterdays work, but you can never remember what you actually did - this one is for you! It'll show a nicely formatted list of everything done in a given time frame. Usage is simple, just run `git standup`, or use [these options](https://github.com/kamranahmedse/git-standup#options) to specify what data should be shown (author, timeframe, branches, etc.\n\n* * *\n\n[](#bonus)Bonus\n---------------\n\nGit can be easily extended with add-ons, to add extra commands that do useful tasks. One of the most complete extensions is [git-extras](https://github.com/tj/git-extras/blob/master/Commands.md) by [@tj](https://github.com/tj). It gives you 70+ [extra commands](https://github.com/tj/git-extras/blob/master/Commands.md) to automate common git jobs.\n\nFor a list of more useful git add-ons, see [stevemao/awesome-git-addons](https://github.com/stevemao/awesome-git-addons).\n\nIf you're working with GitHub repos, then the [GitHub CLI](https://cli.github.com/) let's you do common tasks (managing PRs, issues, code reviews, etc) from the command line.\n\n* * *\n\nIf you like this kind of stuff,  \nconsider following for more :)\n\n[![Follow Lissy93 on GitHub](https://res.cloudinary.com/practicaldev/image/fetch/s--8_HGggCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-Lissy93-3a3a3a%3Fstyle%3Dflat%26logo%3DGitHub%26logoColor%3Dwhite)](https://github.com/Lissy93)[![Follow Lissy_Sykes on Twitter](https://res.cloudinary.com/practicaldev/image/fetch/s--BhCWBIgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-%40Lissy_Sykes-00acee%3Fstyle%3Dflat%26logo%3DTwitter%26logoColor%3Dwhite)](https://twitter.com/Lissy_Sykes)","slug":"git","published":1,"updated":"2022-12-22T15:15:04.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irn0005twlh0yv14ihx","content":"<p><img src=\"/images/git.webp\" alt=\"$cover\"></p>\n<p>If you’ve ever browsed the <a href=\"https://git-scm.com/docs\">git manual</a> (or run <code>man git</code>), then you’ll have noticed there’s a whole lot more to git than what most of us use on a daily basis. A lot of these commands are incredibly powerful and can make your life a lot easier (others are a bit niche, but still good to know).</p>\n<blockquote>\n<p>This post outlines 20 of my favourite under-used git features, which you can use to level up your development process, impress your colleagues, help you answer git interview questions, and most importantly - have fun with!</p>\n</blockquote>\n<h3 id=\"Contents-and-TL-DR\"><a href=\"#Contents-and-TL-DR\" class=\"headerlink\" title=\"Contents (and TL;DR)\"></a><a href=\"#contents-and-tldr\"></a>Contents (and TL;DR)</h3><ul>\n<li><a href=\"#git-web\">Git Web</a> - <em>Open builtin GUI</em></li>\n<li><a href=\"#git-notes\">Git Notes</a> - <em>Attach extra info to commits</em></li>\n<li><a href=\"#git-bisect\">Git Bisect</a> - <em>Debug like a pro</em></li>\n<li><a href=\"#git-grep\">Git Grep</a> - <em>Search for anything</em></li>\n<li><a href=\"#git-archive\">Git Archive</a> - <em>Compress project for sharing</em></li>\n<li><a href=\"#git-submodules\">Git Submodules</a> - <em>Import other repos into yours</em></li>\n<li><a href=\"#git-bugreport\">Git Bugreport</a> - <em>Compile bug report with system info</em></li>\n<li><a href=\"#git-fsck\">Git Fsck</a> - <em>Verify and recover unreachable objects</em></li>\n<li><a href=\"#git-stripspace\">Git Stripspace</a> - <em>Remove trailing whitespaces</em></li>\n<li><a href=\"#git-diff\">Git Diff</a> - <em>Compare changes between two files</em></li>\n<li><a href=\"#git-hooks\">Git Hooks</a> - <em>Execute script when a git command is run</em></li>\n<li><a href=\"#git-blame\">Git Blame</a> - <em>Show who wrote a given line</em></li>\n<li><a href=\"#git-lfs\">Git Large File Storage</a> - <em>Store big files in git</em></li>\n<li><a href=\"#git-gc\">Git Garbage Collection</a> - <em>Optimize your git repo</em></li>\n<li><a href=\"#git-show\">Git Show</a> - <em>Easily inspect any git object</em></li>\n<li><a href=\"#git-describe\">Git Describe</a> - <em>Give readable name based on last tag</em></li>\n<li><a href=\"#git-tag\">Git Tag</a> - <em>Create version tags at specific points</em></li>\n<li><a href=\"#git-reflog\">Git Reflog</a> - <em>List all git actions made on a repo</em></li>\n<li><a href=\"#git-log\">Git Log</a> - <em>View commit log, and branch diagrams</em></li>\n<li><a href=\"#git-cherry-pick\">Git Cherry Pick</a> - <em>Pull a feature into your branch</em></li>\n<li><a href=\"#git-switch\">Git Switch</a> - <em>Quickly jump between branches</em></li>\n<li><a href=\"#bonus\">Bonus</a> - <em>Extend git with more commands!</em></li>\n</ul>\n<hr>\n<h2 id=\"Git-Web\"><a href=\"#Git-Web\" class=\"headerlink\" title=\"Git Web\"></a><a href=\"#git-web\"></a>Git Web</h2><blockquote>\n<p>Run <a href=\"https://git-scm.com/docs/git-instaweb\"><code>git instaweb</code></a> to instantly browse your working repository in gitweb</p>\n</blockquote>\n<p>Git has a built-in <a href=\"https://git-scm.com/docs/gitweb\">web-based visualiser</a> for browsing local repositories, which lets you view and manage your repo via a GUI in the browser. It’s packed with useful features, including:</p>\n<ul>\n<li>Browsing and stepping through revisions and inspecting diffs, file contents and metadata</li>\n<li>Viewing commit logs, branches, directories, file history, and attached data visually</li>\n<li>Generating RSS or Atom feeds of commits and repository activity logs</li>\n<li>Searching commits, files, changes and diffs</li>\n</ul>\n<p>To open it, just run <code>git instaweb</code> from within your repo. Your browser should pop open, and load <code>http://localhost:1234</code>. If you don’t have Lighttpd installed, you can specify an alternative web server with the <code>-d</code> flag. Other options can be configured either via flags (like <code>-p</code> for port, <code>-b</code> for the browser to open, etc), or under the <code>[instaweb]</code> block in your git config.</p>\n<p>There’s also the <code>git gui</code> command, which can open up a GUI-based git app</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png\" alt=\"Screenshot of Git GUI\"></a></p>\n<hr>\n<h2 id=\"Git-Notes\"><a href=\"#Git-Notes\" class=\"headerlink\" title=\"Git Notes\"></a><a href=\"#git-notes\"></a>Git Notes</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-notes\"><code>git notes</code></a> to add extra info to commits</p>\n</blockquote>\n<p>Sometimes you need to attach additional data to a git commit (beyond just the changes, message, date-time and author info).</p>\n<p>The notes are stored within <code>.git/refs/notes</code>, and since that’s separate from the commit object data, you can modify the notes associated with a commit at anytime, without the SHA-1 hash changing.</p>\n<p>You can view notes with <code>git log</code>, using most git GUI apps, or with the <code>git notes show</code> command. Some git hosts also show notes in the commit view (although <a href=\"https://github.blog/2010-08-25-git-notes-display/\">GH no longer displays notes</a>).</p>\n<hr>\n<h2 id=\"Git-Bisect\"><a href=\"#Git-Bisect\" class=\"headerlink\" title=\"Git Bisect\"></a><a href=\"#git-bisect\"></a>Git Bisect</h2><blockquote>\n<p>With <a href=\"https://git-scm.com/docs/git-bisect\"><code>git bisect</code></a> you can find the commit that introduced a bug using binary search</p>\n</blockquote>\n<p>This is one of the most powerful, yet easy to use git commands- bisect is an absolute life saver when it comes to debugging. After starting a bisect, it checks out commits for you, and you tell it weather that commit is <code>good</code> (no bug), or <code>bad</code> (bug introduced), which lets you narrow down the the earliest commit where the bug is present.</p>\n<p>To get started, run <code>git bisect start</code> then pass it a known good commit with <code>git bisect good &lt;commit-hash&gt;</code> and a known bad one (defaults to current) with <code>git bisect bad &lt;optional-hash&gt;</code>. It will then checkout the commit in-between the good and bad commits, then you specify weather the bug is present with either <code>git bisect good</code> or <code>git bisect bad</code>. It will then repeat the process, checking out a commit in the center of the bad and good, all the way until you’ve found the exact commit that introduced the bug. Cancel anytime with <code>git bisect reset</code>.</p>\n<p>There’s much more to the bisect command, including replays, viewing commits, skipping, so it’s worth checking out the docs next time your debugging.</p>\n<hr>\n<h2 id=\"Git-Grep\"><a href=\"#Git-Grep\" class=\"headerlink\" title=\"Git Grep\"></a><a href=\"#git-grep\"></a>Git Grep</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-grep\"><code>git grep</code></a> to search for code, files, commits or anything else across your repo</p>\n</blockquote>\n<p>Ever find yourself needing to search for a string anywhere within a git project? With git grep you can easily search for any string, or RegEx throughout your project, and across branches (like a more powerful Ctrl + F!).</p>\n<p><code>git grep &lt;regexp&gt; &lt;ref&gt;</code></p>\n<p>It includes plenty of <a href=\"https://git-scm.com/docs/git-grep#_options\">options</a> to narrow down your search, or specify results format. For example, use <code>-l</code> to only return file names, <code>-c</code> to specify number of matches per file to return, <code>-e</code> to exclude results matching a condition, <code>--and</code> to specify multiple conditions, <code>-n</code> to search with line number.</p>\n<p>Since git grep is regex-compatible, you can get much more advanced with the string your searching for.<br>You can also use it to specify a file extension, like <code>git grep &#39;console.log&#39; *.js</code> which will show all console.logs from within JavaScript files</p>\n<p>The second parameter is a ref, and can be a branch name, commit, range of commits, or anything else. E.g. <code>git grep &quot;foo&quot; HEAD~1</code> will search the previous commit.</p>\n<hr>\n<h2 id=\"Git-Archive\"><a href=\"#Git-Archive\" class=\"headerlink\" title=\"Git Archive\"></a><a href=\"#git-archive\"></a>Git Archive</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-archive\"><code>git archive</code></a> to combine an entire repo into a single file</p>\n</blockquote>\n<p>When sharing or backing up a repository, it’s often preferred to store it as a single file. Using git archive will include all repo history, so it can be easily extracted back to it’s original form. The command also includes a lot of additional options, so you can customise exactly what files are and aren’t included in the archive.  </p>\n<pre><code>git archive --format=tar --output=./my-archive HEAD\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<hr>\n<h2 id=\"Git-Submodules\"><a href=\"#Git-Submodules\" class=\"headerlink\" title=\"Git Submodules\"></a><a href=\"#git-submodules\"></a>Git Submodules</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-submodule\"><code>git submodule</code></a> to pull any other repository into yours</p>\n</blockquote>\n<p>In git, <a href=\"https://git-scm.com/docs/gitsubmodules\">submodules</a> let you mount one repo into another, and is commonly used for core dependencies or splitting components into separate repositories. For more info, see <a href=\"https://notes.aliciasykes.com/17996/quick-tip-git-submodules\">this post</a>.</p>\n<p>Running the following command will pull a module into the specified location, and also create a <code>.gitmodules</code> file so that it’s always downloaded when the repo is cloned. Use the <code>--recursive</code> flag to include sub-modules when cloning the repo.  </p>\n<pre><code>git submodule add https://github.com/&lt;user&gt;/&lt;repo&gt; &lt;path/to/save/at&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>There’s also <a href=\"https://www.atlassian.com/git/tutorials/git-subtree\"><code>git subtree</code></a>, which does a similar thing, but without the need for metadata files.</p>\n<hr>\n<h2 id=\"Git-Bug-Report\"><a href=\"#Git-Bug-Report\" class=\"headerlink\" title=\"Git Bug Report\"></a><a href=\"#git-bug-report\"></a>Git Bug Report</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-bugreport\"><code>git bugreport</code></a> to compose a bug ticket, including git and system info</p>\n</blockquote>\n<p>This command will capture system info, and then open up a standard bug template (steps to reproduce, actual + expected output, etc). The completed file should be a very complete bug report, with all necessary info captured.</p>\n<p>This is very handy if your a maintainer for an open source package and asking a user (developer) to raise a bug report, as it ensures all necessary data is included.</p>\n<p>And if you are raising a bug report to the core git system, you can also run the <a href=\"https://git-scm.com/docs/git-diagnose\"><code>git diagnose</code></a> command, and then raise your issue <a href=\"https://github.com/git/git\">here</a>.</p>\n<hr>\n<h2 id=\"Git-Fsck\"><a href=\"#Git-Fsck\" class=\"headerlink\" title=\"Git Fsck\"></a><a href=\"#git-fsck\"></a>Git Fsck</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-fsck\"><code>git fsck</code></a> to check all objects, or recover unreachable ones</p>\n</blockquote>\n<p>Although not often needed, sometimes you may have to verify the objects stored by git. This is where fsck (or File System ChecK) comes in, it tests the object database and verifies the SHA-1 ID of all objects and the connections they make.</p>\n<p>It can also be used alongside the <code>--unreachable</code> flag to find objects that are no longer reachable from any named reference (since unlike other commands, it includes everything in <code>.git/objects</code>).</p>\n<hr>\n<h2 id=\"Git-Stripspace\"><a href=\"#Git-Stripspace\" class=\"headerlink\" title=\"Git Stripspace\"></a><a href=\"#git-stripspace\"></a>Git Stripspace</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-stripspace\"><code>git stripspace</code></a> to format whitespaces within a given file</p>\n</blockquote>\n<p>Best practice is to avoid trailing whitespaces at the end of lines, avoid having multiple consecutive blank lines, avoid empty lines from beginning and end of an input, and end each file with a new line. There’s plenty of language-specific tools which do this automatically for you (like prettier), but Git also has this functionality builtin.</p>\n<p>It’s intended for metadata (commit messages, tags, branch descriptions, etc), but also works if you pipe a file to it, then pipe the response back to a file. E.g. <code>cat ./path-to-file.txt | git stripspace</code> or <code>git stripspace &lt; dirty-file.txt &gt; clean-file.txt</code></p>\n<p>You can also use this to remove comments (with <code>--strip-comments</code>), or even comment out lines (with <code>--comment-lines</code>).</p>\n<hr>\n<h2 id=\"Git-Diff\"><a href=\"#Git-Diff\" class=\"headerlink\" title=\"Git Diff\"></a><a href=\"#git-diff\"></a>Git Diff</h2><blockquote>\n<p>With <a href=\"https://git-scm.com/docs/git-diff\"><code>git diff</code></a> you can compare the difference between 2 sets of code</p>\n</blockquote>\n<p>You’re probably aware that you you can run <code>git diff</code> to show all changes since the last commit, or use <code>git diff &lt;commit-sha&gt;</code> to compare either 2 commits, or 1 commit to the HEAD. But there’s much more you can do with the diff command.</p>\n<p>You can also use it to compare any two arbitrary files, with <code>diff file-1.txt file-2.txt</code> (no more visiting <a href=\"https://www.diffchecker.com/compare/\">diffchecker.com</a>!)</p>\n<p>Or compare 2 branches, or refs with each other, using <code>git diff branch1..branch2</code></p>\n<p>Note that a double dot (<code>..</code>) is the same as a space and indicates the diff input should be the tip of the branches, but you can also use a triple dot (<code>...</code>) to convert the first parameter into a ref of the shared common ancestor commit between the two diff inputs - very useful! If you want to only compare a single file across branches, just pass the files name in as the third argument.</p>\n<p>You may want to see all changes made within a given date range, for this use <code>git diff HEAD@&#123;7.day.ago&#125; HEAD@&#123;0&#125;</code> (for the last week), again this can be paired up with a filename, branch names, specific commits or any other ref.</p>\n<p>There’s also the <a href=\"https://www.git-scm.com/docs/git-range-diff\"><code>git range-diff</code></a> command, which provides a simple interface for comparing commit ranges.</p>\n<p>There’s much more to the git diff tool (as well as the option of using your own diff checker), so I recommend checking out <a href=\"https://git-scm.com/docs/git-diff#_description\">the docs</a>.</p>\n<hr>\n<h2 id=\"Git-Hooks\"><a href=\"#Git-Hooks\" class=\"headerlink\" title=\"Git Hooks\"></a><a href=\"#git-hooks\"></a>Git Hooks</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/githooks\"><code>hooks</code></a> to execute command or run scripts when a given get action occurs</p>\n</blockquote>\n<p>Hooks let you automate pretty much anything. For example: ensuring standards are met (commit message, branch name, patch size), code quality (tests, lint), appending additional info to a commit (user, device, ticket ID), calling a webhook to record an event or run a pipeline, etc.</p>\n<p>There’s pre and post <a href=\"https://git-scm.com/docs/githooks\">hooks available</a> for most git events, like commit, rebase, merge, push, update, applypatch, etc.</p>\n<p>Hooks are stored in <code>.git/hooks</code> (unless you configure them elsewhere with <code>git config core.hooksPath</code>), and can be tested with the <a href=\"https://git-scm.com/docs/git-hook\"><code>git hook</code></a> command. Since they’re just shell files, they can be used to run any command.</p>\n<p>Hooks aren’t pushed to the remote repository, so to share and manage them across your team, you’ll need to use a <a href=\"https://github.com/aitemr/awesome-git-hooks#tools\">hook manager</a>, like <a href=\"https://github.com/evilmartians/lefthook\">lefthook</a> or <a href=\"https://github.com/typicode/husky\">husky</a>. There’s also several <a href=\"https://githooks.com/#projects\">3rd-party tools</a>, which make managing hooks easier, I recommend <a href=\"https://github.com/sds/overcommit\">overcommit</a>.</p>\n<p>Remember, hooks can always be skipped (with the <code>--no-verify</code> flag), so never rely purely on hooks, especially for anything security related.</p>\n<hr>\n<h2 id=\"Git-Blame\"><a href=\"#Git-Blame\" class=\"headerlink\" title=\"Git Blame\"></a><a href=\"#git-blame\"></a>Git Blame</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-blame\"><code>git blame</code></a> to show author info for a specific revision and line</p>\n</blockquote>\n<p>A classic, quickly find out who wrote a specific line of code (aka which of your co-workers to blame for the bug!). But it’s also useful to determine at which point in time something changed and inspect that commit and associated metadata.</p>\n<p>For example, to view author and commit info for line 400 to 420 of index.rs, you’d run:  </p>\n<pre><code>git blame -L 400,420 index.rs\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<hr>\n<h2 id=\"Git-LFS\"><a href=\"#Git-LFS\" class=\"headerlink\" title=\"Git LFS\"></a><a href=\"#git-lfs\"></a>Git LFS</h2><blockquote>\n<p>Store large files using <a href=\"https://git-lfs.github.com/\"><code>git lfs</code></a> to not bog down your repo</p>\n</blockquote>\n<p>Often your project will contain larger files (such as databases, binary assets, archives or media files), which would slow down the git workflow and max out usage limits. That’s where <a href=\"https://git-lfs.github.com/\">Large File Storage</a> comes in - it enables you to store these large assets elsewhere, while keeping them trackable with git and maintaining the same access controls&#x2F; permissions. LFS works by replacing these larger files with text pointers that are tracked within git.</p>\n<p>To use it, just run <code>git lfs track &lt;file glob&gt;</code>, which will update your <code>.gitattributes</code> file. You can specify files by their extension (e.g. <code>*.psd</code>), directory, or individually. Running <code>git lfs ls-files</code> to view a list of tracked LFS files.</p>\n<hr>\n<h2 id=\"Git-GC\"><a href=\"#Git-GC\" class=\"headerlink\" title=\"Git GC\"></a><a href=\"#git-gc\"></a>Git GC</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-gc\"><code>git gc</code></a> to optimize your repository</p>\n</blockquote>\n<p>Over time git repos accumulate various types of garbage, which take up disk space, and slow down actions. That’s where the built-in garbage collector comes in. Running <code>git gc</code> will remove orphaned and inaccessible commits (with <a href=\"https://git-scm.com/docs/git-prune\"><code>git prune</code></a>), compress file revisions and stored git objects, as well as some other general house keeping tasks like packing refs, pruning reflog, revere metadata or stale working trees and updating indexes.</p>\n<p>Adding the <code>--aggressive</code> flag will <a href=\"https://git-scm.com/docs/git-gc#_aggressive\">aggressively optimize</a> the repository, throwing away any existing deltas and re-computing them, this takes much longer to run but may be needed if you’ve got a large repository.</p>\n<hr>\n<h2 id=\"Git-Show\"><a href=\"#Git-Show\" class=\"headerlink\" title=\"Git Show\"></a><a href=\"#git-show\"></a>Git Show</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-show\"><code>git show</code></a> to easily inspect any git object</p>\n</blockquote>\n<p>Outputs objects (blobs, treees, tags or commits) in an easily readable form. To use, just run <code>git show &lt;object&gt;</code>. You’ll likely also want to append the <code>--pretty</code> flag, for a clearer output, but there’s many other options available to customize the output (with <code>--format</code>), so this command can be extremely powerful for displaying exactly what you need.</p>\n<p>An instance that this is very useful for, is previewing a file in another branch, without switching branches. Just run <code>git show branch:file</code></p>\n<hr>\n<h2 id=\"Git-Describe\"><a href=\"#Git-Describe\" class=\"headerlink\" title=\"Git Describe\"></a><a href=\"#git-describe\"></a>Git Describe</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-describe\"><code>git describe</code></a> to find the latest tag reachable from a commit, and give it a human-readable name</p>\n</blockquote>\n<p>Run <code>git describe</code> and you’ll see a human-readable string made from combining the last tag name, with the current commit, to generate a string. You can also pass a specific tag to it,</p>\n<p>Note that you must have created tags for this to work, unless you append the <code>--all</code> flag. Git describe will also only use annotated tags by default, so you must specify the <code>--tags</code> flag to make it use lightweight tags as well.</p>\n<hr>\n<h2 id=\"Git-Tag\"><a href=\"#Git-Tag\" class=\"headerlink\" title=\"Git Tag\"></a><a href=\"#git-tag\"></a>Git Tag</h2><blockquote>\n<p>Tag a specific point in your repo’s history using <a href=\"https://git-scm.com/docs/git-tag\"><code>git tag</code></a></p>\n</blockquote>\n<p>It’s often useful to be able to <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\">tag</a> specific, important points in a repository’s history most commonly used to denote versions of releases. Creating a tag is as simple as <code>git tag &lt;tagname&gt;</code>, or you can tag a historical commit with <code>git tag -a v4.2.0 &lt;commit sha&gt;</code>. Like with commits, you can include a message alongside a tag, using <code>-m</code>.</p>\n<p>Don’t forget to push your tag to remote, with <code>git push origin &lt;tagname&gt;</code>.<br>To list all tags, just run <code>git tag</code>, and optionally use <code>-l</code> for a wildcard search.<br>You’ll then be able to checkout a specific tag, with <code>git checkout &lt;tagname&gt;</code></p>\n<hr>\n<h2 id=\"Git-Reflog\"><a href=\"#Git-Reflog\" class=\"headerlink\" title=\"Git Reflog\"></a><a href=\"#git-reflog\"></a>Git Reflog</h2><blockquote>\n<p>List all updates made on your repo using <a href=\"https://git-scm.com/docs/git-reflog\"><code>git reflog</code></a></p>\n</blockquote>\n<p>Git keeps track of updates to the tip of branches using a mechanism called reference logs, or “reflogs”. Various events are tracked, including: clone, pull, push, commit, checkout and merge. It’s often useful to be able to find an events reference, as many commands accept a ref as a parameter. Just run <code>git reflog</code> to view recent events on <code>HEAD</code>.</p>\n<p>One thing that reflog is really useful for is recovering lost commits. Git never really loses anything, even when rewriting history (like rebasing or commit amending). Reflog allows you to go back to commits even though they are not referenced by any branch or tag.</p>\n<p>By default reflog uses <code>HEAD</code> (your current branch), but you can run reflog on any ref. For example <code>git reflog show &lt;branch name&gt;</code>, or to see stashed changes with <code>git reflog stash</code>. Or show all references with <code>git reflog show --all</code></p>\n<hr>\n<h2 id=\"Git-Log\"><a href=\"#Git-Log\" class=\"headerlink\" title=\"Git Log\"></a><a href=\"#git-log\"></a>Git Log</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-log\"><code>git log</code></a> to view a list of commits</p>\n</blockquote>\n<p>You’re likely already familiar with running <code>git log</code> to view a list of recent commits on your current branch. But there’s a few things more you can do with git log.</p>\n<p>Using <code>git log --graph --decorate --oneline</code> will show a nice neat commit graph along with ref pointers.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png\" alt=\"example git log output\"></a></p>\n<p>You also often need to be able to filter logs based on various parameters, the most useful of which are:</p>\n<ul>\n<li><code>git log --search=&quot;&lt;anything&gt;&quot;</code> - Search logs for specific code changes</li>\n<li><code>git log --author=&quot;&lt;pattern&gt;&quot;</code> - Show log only for specific author(s)</li>\n<li><code>git log --grep=&quot;&lt;pattern&gt;&quot;</code> - Filter log using search term or regex</li>\n<li><code>git log &lt;since&gt;..&lt;until&gt;</code> - Show all commits between two references</li>\n<li><code>git log -- &lt;file&gt;</code> - Show all commits made only to a specific file</li>\n</ul>\n<p>Or, just run <code>git shortlog</code> for a summerized list of commits.</p>\n<hr>\n<h2 id=\"Git-Cherry-Pick\"><a href=\"#Git-Cherry-Pick\" class=\"headerlink\" title=\"Git Cherry Pick\"></a><a href=\"#git-cherry-pick\"></a>Git Cherry Pick</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-cherry-pick\"><code>git cherry-pick</code></a> to pick specified commit(s) by reference and append them to the working HEAD</p>\n</blockquote>\n<p>Sometimes you need to pull a specific commit from elsewhere, into your current branch. This can be very useful for applying hot fixes, undoing changes, restoring lost commits and in certain team collaboration settings. Note that often traditional merges are better practice, since cherry picking commits can cause duplicate commits in the log.</p>\n<p>Usage is straightforward, just run <code>git cherry-pick &lt;commit-hash&gt;</code>. This will pull the specified commit into your current branch.</p>\n<hr>\n<h2 id=\"Git-Switch\"><a href=\"#Git-Switch\" class=\"headerlink\" title=\"Git Switch\"></a><a href=\"#git-switch\"></a>Git Switch</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-switch\"><code>git switch</code></a></p>\n</blockquote>\n<p>Moving between branches is something that we do often, the <code>switch</code> command is like a simplified version of <code>git checkout</code>, it can be used to create and navigate between branches, but unlike checkout does not copy modified files when you move between branches.</p>\n<p>Similar to <code>checkout -b</code>, with the switch command you can append the <code>-c</code> flag to create a new branch, and jump strait into it, e.g. <code>git switch -c &lt;new branch&gt;</code>. And running <code>git switch -</code> will discard any experimental changes you’ve made, and return you to your previous branch.</p>\n<hr>\n<h2 id=\"Git-Standup\"><a href=\"#Git-Standup\" class=\"headerlink\" title=\"Git Standup\"></a><a href=\"#git-standup\"></a>Git Standup</h2><blockquote>\n<p>Use <a href=\"https://github.com/kamranahmedse/git-standup\"><code>git standup</code></a> to recall what you did on the last working day , based on git commits</p>\n</blockquote>\n<p>I’ve put this one at the end, as it’s not included with most git clients, but you can <a href=\"https://github.com/kamranahmedse/git-standup#install\">easily install it</a> either with your systems package manager, using a 1-line curl script, or by building from source.</p>\n<p>If your boss requires you do a daily standup, to give updates on yesterdays work, but you can never remember what you actually did - this one is for you! It’ll show a nicely formatted list of everything done in a given time frame. Usage is simple, just run <code>git standup</code>, or use <a href=\"https://github.com/kamranahmedse/git-standup#options\">these options</a> to specify what data should be shown (author, timeframe, branches, etc.</p>\n<hr>\n<h2 id=\"Bonus\"><a href=\"#Bonus\" class=\"headerlink\" title=\"Bonus\"></a><a href=\"#bonus\"></a>Bonus</h2><p>Git can be easily extended with add-ons, to add extra commands that do useful tasks. One of the most complete extensions is <a href=\"https://github.com/tj/git-extras/blob/master/Commands.md\">git-extras</a> by <a href=\"https://github.com/tj\">@tj</a>. It gives you 70+ <a href=\"https://github.com/tj/git-extras/blob/master/Commands.md\">extra commands</a> to automate common git jobs.</p>\n<p>For a list of more useful git add-ons, see <a href=\"https://github.com/stevemao/awesome-git-addons\">stevemao&#x2F;awesome-git-addons</a>.</p>\n<p>If you’re working with GitHub repos, then the <a href=\"https://cli.github.com/\">GitHub CLI</a> let’s you do common tasks (managing PRs, issues, code reviews, etc) from the command line.</p>\n<hr>\n<p>If you like this kind of stuff,<br>consider following for more :)</p>\n<p><a href=\"https://github.com/Lissy93\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8_HGggCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-Lissy93-3a3a3a%3Fstyle%3Dflat%26logo%3DGitHub%26logoColor%3Dwhite\" alt=\"Follow Lissy93 on GitHub\"></a><a href=\"https://twitter.com/Lissy_Sykes\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BhCWBIgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-%40Lissy_Sykes-00acee%3Fstyle%3Dflat%26logo%3DTwitter%26logoColor%3Dwhite\" alt=\"Follow Lissy_Sykes on Twitter\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/git.webp\" alt=\"$cover\"></p>\n<p>If you’ve ever browsed the <a href=\"https://git-scm.com/docs\">git manual</a> (or run <code>man git</code>), then you’ll have noticed there’s a whole lot more to git than what most of us use on a daily basis. A lot of these commands are incredibly powerful and can make your life a lot easier (others are a bit niche, but still good to know).</p>\n<blockquote>\n<p>This post outlines 20 of my favourite under-used git features, which you can use to level up your development process, impress your colleagues, help you answer git interview questions, and most importantly - have fun with!</p>\n</blockquote>\n<h3 id=\"Contents-and-TL-DR\"><a href=\"#Contents-and-TL-DR\" class=\"headerlink\" title=\"Contents (and TL;DR)\"></a><a href=\"#contents-and-tldr\"></a>Contents (and TL;DR)</h3><ul>\n<li><a href=\"#git-web\">Git Web</a> - <em>Open builtin GUI</em></li>\n<li><a href=\"#git-notes\">Git Notes</a> - <em>Attach extra info to commits</em></li>\n<li><a href=\"#git-bisect\">Git Bisect</a> - <em>Debug like a pro</em></li>\n<li><a href=\"#git-grep\">Git Grep</a> - <em>Search for anything</em></li>\n<li><a href=\"#git-archive\">Git Archive</a> - <em>Compress project for sharing</em></li>\n<li><a href=\"#git-submodules\">Git Submodules</a> - <em>Import other repos into yours</em></li>\n<li><a href=\"#git-bugreport\">Git Bugreport</a> - <em>Compile bug report with system info</em></li>\n<li><a href=\"#git-fsck\">Git Fsck</a> - <em>Verify and recover unreachable objects</em></li>\n<li><a href=\"#git-stripspace\">Git Stripspace</a> - <em>Remove trailing whitespaces</em></li>\n<li><a href=\"#git-diff\">Git Diff</a> - <em>Compare changes between two files</em></li>\n<li><a href=\"#git-hooks\">Git Hooks</a> - <em>Execute script when a git command is run</em></li>\n<li><a href=\"#git-blame\">Git Blame</a> - <em>Show who wrote a given line</em></li>\n<li><a href=\"#git-lfs\">Git Large File Storage</a> - <em>Store big files in git</em></li>\n<li><a href=\"#git-gc\">Git Garbage Collection</a> - <em>Optimize your git repo</em></li>\n<li><a href=\"#git-show\">Git Show</a> - <em>Easily inspect any git object</em></li>\n<li><a href=\"#git-describe\">Git Describe</a> - <em>Give readable name based on last tag</em></li>\n<li><a href=\"#git-tag\">Git Tag</a> - <em>Create version tags at specific points</em></li>\n<li><a href=\"#git-reflog\">Git Reflog</a> - <em>List all git actions made on a repo</em></li>\n<li><a href=\"#git-log\">Git Log</a> - <em>View commit log, and branch diagrams</em></li>\n<li><a href=\"#git-cherry-pick\">Git Cherry Pick</a> - <em>Pull a feature into your branch</em></li>\n<li><a href=\"#git-switch\">Git Switch</a> - <em>Quickly jump between branches</em></li>\n<li><a href=\"#bonus\">Bonus</a> - <em>Extend git with more commands!</em></li>\n</ul>\n<hr>\n<h2 id=\"Git-Web\"><a href=\"#Git-Web\" class=\"headerlink\" title=\"Git Web\"></a><a href=\"#git-web\"></a>Git Web</h2><blockquote>\n<p>Run <a href=\"https://git-scm.com/docs/git-instaweb\"><code>git instaweb</code></a> to instantly browse your working repository in gitweb</p>\n</blockquote>\n<p>Git has a built-in <a href=\"https://git-scm.com/docs/gitweb\">web-based visualiser</a> for browsing local repositories, which lets you view and manage your repo via a GUI in the browser. It’s packed with useful features, including:</p>\n<ul>\n<li>Browsing and stepping through revisions and inspecting diffs, file contents and metadata</li>\n<li>Viewing commit logs, branches, directories, file history, and attached data visually</li>\n<li>Generating RSS or Atom feeds of commits and repository activity logs</li>\n<li>Searching commits, files, changes and diffs</li>\n</ul>\n<p>To open it, just run <code>git instaweb</code> from within your repo. Your browser should pop open, and load <code>http://localhost:1234</code>. If you don’t have Lighttpd installed, you can specify an alternative web server with the <code>-d</code> flag. Other options can be configured either via flags (like <code>-p</code> for port, <code>-b</code> for the browser to open, etc), or under the <code>[instaweb]</code> block in your git config.</p>\n<p>There’s also the <code>git gui</code> command, which can open up a GUI-based git app</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ATnCqGFm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0DrmcWG/Screenshot-from-2022-12-17-20-26-30.png\" alt=\"Screenshot of Git GUI\"></a></p>\n<hr>\n<h2 id=\"Git-Notes\"><a href=\"#Git-Notes\" class=\"headerlink\" title=\"Git Notes\"></a><a href=\"#git-notes\"></a>Git Notes</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-notes\"><code>git notes</code></a> to add extra info to commits</p>\n</blockquote>\n<p>Sometimes you need to attach additional data to a git commit (beyond just the changes, message, date-time and author info).</p>\n<p>The notes are stored within <code>.git/refs/notes</code>, and since that’s separate from the commit object data, you can modify the notes associated with a commit at anytime, without the SHA-1 hash changing.</p>\n<p>You can view notes with <code>git log</code>, using most git GUI apps, or with the <code>git notes show</code> command. Some git hosts also show notes in the commit view (although <a href=\"https://github.blog/2010-08-25-git-notes-display/\">GH no longer displays notes</a>).</p>\n<hr>\n<h2 id=\"Git-Bisect\"><a href=\"#Git-Bisect\" class=\"headerlink\" title=\"Git Bisect\"></a><a href=\"#git-bisect\"></a>Git Bisect</h2><blockquote>\n<p>With <a href=\"https://git-scm.com/docs/git-bisect\"><code>git bisect</code></a> you can find the commit that introduced a bug using binary search</p>\n</blockquote>\n<p>This is one of the most powerful, yet easy to use git commands- bisect is an absolute life saver when it comes to debugging. After starting a bisect, it checks out commits for you, and you tell it weather that commit is <code>good</code> (no bug), or <code>bad</code> (bug introduced), which lets you narrow down the the earliest commit where the bug is present.</p>\n<p>To get started, run <code>git bisect start</code> then pass it a known good commit with <code>git bisect good &lt;commit-hash&gt;</code> and a known bad one (defaults to current) with <code>git bisect bad &lt;optional-hash&gt;</code>. It will then checkout the commit in-between the good and bad commits, then you specify weather the bug is present with either <code>git bisect good</code> or <code>git bisect bad</code>. It will then repeat the process, checking out a commit in the center of the bad and good, all the way until you’ve found the exact commit that introduced the bug. Cancel anytime with <code>git bisect reset</code>.</p>\n<p>There’s much more to the bisect command, including replays, viewing commits, skipping, so it’s worth checking out the docs next time your debugging.</p>\n<hr>\n<h2 id=\"Git-Grep\"><a href=\"#Git-Grep\" class=\"headerlink\" title=\"Git Grep\"></a><a href=\"#git-grep\"></a>Git Grep</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-grep\"><code>git grep</code></a> to search for code, files, commits or anything else across your repo</p>\n</blockquote>\n<p>Ever find yourself needing to search for a string anywhere within a git project? With git grep you can easily search for any string, or RegEx throughout your project, and across branches (like a more powerful Ctrl + F!).</p>\n<p><code>git grep &lt;regexp&gt; &lt;ref&gt;</code></p>\n<p>It includes plenty of <a href=\"https://git-scm.com/docs/git-grep#_options\">options</a> to narrow down your search, or specify results format. For example, use <code>-l</code> to only return file names, <code>-c</code> to specify number of matches per file to return, <code>-e</code> to exclude results matching a condition, <code>--and</code> to specify multiple conditions, <code>-n</code> to search with line number.</p>\n<p>Since git grep is regex-compatible, you can get much more advanced with the string your searching for.<br>You can also use it to specify a file extension, like <code>git grep &#39;console.log&#39; *.js</code> which will show all console.logs from within JavaScript files</p>\n<p>The second parameter is a ref, and can be a branch name, commit, range of commits, or anything else. E.g. <code>git grep &quot;foo&quot; HEAD~1</code> will search the previous commit.</p>\n<hr>\n<h2 id=\"Git-Archive\"><a href=\"#Git-Archive\" class=\"headerlink\" title=\"Git Archive\"></a><a href=\"#git-archive\"></a>Git Archive</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-archive\"><code>git archive</code></a> to combine an entire repo into a single file</p>\n</blockquote>\n<p>When sharing or backing up a repository, it’s often preferred to store it as a single file. Using git archive will include all repo history, so it can be easily extracted back to it’s original form. The command also includes a lot of additional options, so you can customise exactly what files are and aren’t included in the archive.  </p>\n<pre><code>git archive --format=tar --output=./my-archive HEAD\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<hr>\n<h2 id=\"Git-Submodules\"><a href=\"#Git-Submodules\" class=\"headerlink\" title=\"Git Submodules\"></a><a href=\"#git-submodules\"></a>Git Submodules</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-submodule\"><code>git submodule</code></a> to pull any other repository into yours</p>\n</blockquote>\n<p>In git, <a href=\"https://git-scm.com/docs/gitsubmodules\">submodules</a> let you mount one repo into another, and is commonly used for core dependencies or splitting components into separate repositories. For more info, see <a href=\"https://notes.aliciasykes.com/17996/quick-tip-git-submodules\">this post</a>.</p>\n<p>Running the following command will pull a module into the specified location, and also create a <code>.gitmodules</code> file so that it’s always downloaded when the repo is cloned. Use the <code>--recursive</code> flag to include sub-modules when cloning the repo.  </p>\n<pre><code>git submodule add https://github.com/&lt;user&gt;/&lt;repo&gt; &lt;path/to/save/at&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>There’s also <a href=\"https://www.atlassian.com/git/tutorials/git-subtree\"><code>git subtree</code></a>, which does a similar thing, but without the need for metadata files.</p>\n<hr>\n<h2 id=\"Git-Bug-Report\"><a href=\"#Git-Bug-Report\" class=\"headerlink\" title=\"Git Bug Report\"></a><a href=\"#git-bug-report\"></a>Git Bug Report</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-bugreport\"><code>git bugreport</code></a> to compose a bug ticket, including git and system info</p>\n</blockquote>\n<p>This command will capture system info, and then open up a standard bug template (steps to reproduce, actual + expected output, etc). The completed file should be a very complete bug report, with all necessary info captured.</p>\n<p>This is very handy if your a maintainer for an open source package and asking a user (developer) to raise a bug report, as it ensures all necessary data is included.</p>\n<p>And if you are raising a bug report to the core git system, you can also run the <a href=\"https://git-scm.com/docs/git-diagnose\"><code>git diagnose</code></a> command, and then raise your issue <a href=\"https://github.com/git/git\">here</a>.</p>\n<hr>\n<h2 id=\"Git-Fsck\"><a href=\"#Git-Fsck\" class=\"headerlink\" title=\"Git Fsck\"></a><a href=\"#git-fsck\"></a>Git Fsck</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-fsck\"><code>git fsck</code></a> to check all objects, or recover unreachable ones</p>\n</blockquote>\n<p>Although not often needed, sometimes you may have to verify the objects stored by git. This is where fsck (or File System ChecK) comes in, it tests the object database and verifies the SHA-1 ID of all objects and the connections they make.</p>\n<p>It can also be used alongside the <code>--unreachable</code> flag to find objects that are no longer reachable from any named reference (since unlike other commands, it includes everything in <code>.git/objects</code>).</p>\n<hr>\n<h2 id=\"Git-Stripspace\"><a href=\"#Git-Stripspace\" class=\"headerlink\" title=\"Git Stripspace\"></a><a href=\"#git-stripspace\"></a>Git Stripspace</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-stripspace\"><code>git stripspace</code></a> to format whitespaces within a given file</p>\n</blockquote>\n<p>Best practice is to avoid trailing whitespaces at the end of lines, avoid having multiple consecutive blank lines, avoid empty lines from beginning and end of an input, and end each file with a new line. There’s plenty of language-specific tools which do this automatically for you (like prettier), but Git also has this functionality builtin.</p>\n<p>It’s intended for metadata (commit messages, tags, branch descriptions, etc), but also works if you pipe a file to it, then pipe the response back to a file. E.g. <code>cat ./path-to-file.txt | git stripspace</code> or <code>git stripspace &lt; dirty-file.txt &gt; clean-file.txt</code></p>\n<p>You can also use this to remove comments (with <code>--strip-comments</code>), or even comment out lines (with <code>--comment-lines</code>).</p>\n<hr>\n<h2 id=\"Git-Diff\"><a href=\"#Git-Diff\" class=\"headerlink\" title=\"Git Diff\"></a><a href=\"#git-diff\"></a>Git Diff</h2><blockquote>\n<p>With <a href=\"https://git-scm.com/docs/git-diff\"><code>git diff</code></a> you can compare the difference between 2 sets of code</p>\n</blockquote>\n<p>You’re probably aware that you you can run <code>git diff</code> to show all changes since the last commit, or use <code>git diff &lt;commit-sha&gt;</code> to compare either 2 commits, or 1 commit to the HEAD. But there’s much more you can do with the diff command.</p>\n<p>You can also use it to compare any two arbitrary files, with <code>diff file-1.txt file-2.txt</code> (no more visiting <a href=\"https://www.diffchecker.com/compare/\">diffchecker.com</a>!)</p>\n<p>Or compare 2 branches, or refs with each other, using <code>git diff branch1..branch2</code></p>\n<p>Note that a double dot (<code>..</code>) is the same as a space and indicates the diff input should be the tip of the branches, but you can also use a triple dot (<code>...</code>) to convert the first parameter into a ref of the shared common ancestor commit between the two diff inputs - very useful! If you want to only compare a single file across branches, just pass the files name in as the third argument.</p>\n<p>You may want to see all changes made within a given date range, for this use <code>git diff HEAD@&#123;7.day.ago&#125; HEAD@&#123;0&#125;</code> (for the last week), again this can be paired up with a filename, branch names, specific commits or any other ref.</p>\n<p>There’s also the <a href=\"https://www.git-scm.com/docs/git-range-diff\"><code>git range-diff</code></a> command, which provides a simple interface for comparing commit ranges.</p>\n<p>There’s much more to the git diff tool (as well as the option of using your own diff checker), so I recommend checking out <a href=\"https://git-scm.com/docs/git-diff#_description\">the docs</a>.</p>\n<hr>\n<h2 id=\"Git-Hooks\"><a href=\"#Git-Hooks\" class=\"headerlink\" title=\"Git Hooks\"></a><a href=\"#git-hooks\"></a>Git Hooks</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/githooks\"><code>hooks</code></a> to execute command or run scripts when a given get action occurs</p>\n</blockquote>\n<p>Hooks let you automate pretty much anything. For example: ensuring standards are met (commit message, branch name, patch size), code quality (tests, lint), appending additional info to a commit (user, device, ticket ID), calling a webhook to record an event or run a pipeline, etc.</p>\n<p>There’s pre and post <a href=\"https://git-scm.com/docs/githooks\">hooks available</a> for most git events, like commit, rebase, merge, push, update, applypatch, etc.</p>\n<p>Hooks are stored in <code>.git/hooks</code> (unless you configure them elsewhere with <code>git config core.hooksPath</code>), and can be tested with the <a href=\"https://git-scm.com/docs/git-hook\"><code>git hook</code></a> command. Since they’re just shell files, they can be used to run any command.</p>\n<p>Hooks aren’t pushed to the remote repository, so to share and manage them across your team, you’ll need to use a <a href=\"https://github.com/aitemr/awesome-git-hooks#tools\">hook manager</a>, like <a href=\"https://github.com/evilmartians/lefthook\">lefthook</a> or <a href=\"https://github.com/typicode/husky\">husky</a>. There’s also several <a href=\"https://githooks.com/#projects\">3rd-party tools</a>, which make managing hooks easier, I recommend <a href=\"https://github.com/sds/overcommit\">overcommit</a>.</p>\n<p>Remember, hooks can always be skipped (with the <code>--no-verify</code> flag), so never rely purely on hooks, especially for anything security related.</p>\n<hr>\n<h2 id=\"Git-Blame\"><a href=\"#Git-Blame\" class=\"headerlink\" title=\"Git Blame\"></a><a href=\"#git-blame\"></a>Git Blame</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-blame\"><code>git blame</code></a> to show author info for a specific revision and line</p>\n</blockquote>\n<p>A classic, quickly find out who wrote a specific line of code (aka which of your co-workers to blame for the bug!). But it’s also useful to determine at which point in time something changed and inspect that commit and associated metadata.</p>\n<p>For example, to view author and commit info for line 400 to 420 of index.rs, you’d run:  </p>\n<pre><code>git blame -L 400,420 index.rs\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<hr>\n<h2 id=\"Git-LFS\"><a href=\"#Git-LFS\" class=\"headerlink\" title=\"Git LFS\"></a><a href=\"#git-lfs\"></a>Git LFS</h2><blockquote>\n<p>Store large files using <a href=\"https://git-lfs.github.com/\"><code>git lfs</code></a> to not bog down your repo</p>\n</blockquote>\n<p>Often your project will contain larger files (such as databases, binary assets, archives or media files), which would slow down the git workflow and max out usage limits. That’s where <a href=\"https://git-lfs.github.com/\">Large File Storage</a> comes in - it enables you to store these large assets elsewhere, while keeping them trackable with git and maintaining the same access controls&#x2F; permissions. LFS works by replacing these larger files with text pointers that are tracked within git.</p>\n<p>To use it, just run <code>git lfs track &lt;file glob&gt;</code>, which will update your <code>.gitattributes</code> file. You can specify files by their extension (e.g. <code>*.psd</code>), directory, or individually. Running <code>git lfs ls-files</code> to view a list of tracked LFS files.</p>\n<hr>\n<h2 id=\"Git-GC\"><a href=\"#Git-GC\" class=\"headerlink\" title=\"Git GC\"></a><a href=\"#git-gc\"></a>Git GC</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-gc\"><code>git gc</code></a> to optimize your repository</p>\n</blockquote>\n<p>Over time git repos accumulate various types of garbage, which take up disk space, and slow down actions. That’s where the built-in garbage collector comes in. Running <code>git gc</code> will remove orphaned and inaccessible commits (with <a href=\"https://git-scm.com/docs/git-prune\"><code>git prune</code></a>), compress file revisions and stored git objects, as well as some other general house keeping tasks like packing refs, pruning reflog, revere metadata or stale working trees and updating indexes.</p>\n<p>Adding the <code>--aggressive</code> flag will <a href=\"https://git-scm.com/docs/git-gc#_aggressive\">aggressively optimize</a> the repository, throwing away any existing deltas and re-computing them, this takes much longer to run but may be needed if you’ve got a large repository.</p>\n<hr>\n<h2 id=\"Git-Show\"><a href=\"#Git-Show\" class=\"headerlink\" title=\"Git Show\"></a><a href=\"#git-show\"></a>Git Show</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-show\"><code>git show</code></a> to easily inspect any git object</p>\n</blockquote>\n<p>Outputs objects (blobs, treees, tags or commits) in an easily readable form. To use, just run <code>git show &lt;object&gt;</code>. You’ll likely also want to append the <code>--pretty</code> flag, for a clearer output, but there’s many other options available to customize the output (with <code>--format</code>), so this command can be extremely powerful for displaying exactly what you need.</p>\n<p>An instance that this is very useful for, is previewing a file in another branch, without switching branches. Just run <code>git show branch:file</code></p>\n<hr>\n<h2 id=\"Git-Describe\"><a href=\"#Git-Describe\" class=\"headerlink\" title=\"Git Describe\"></a><a href=\"#git-describe\"></a>Git Describe</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-describe\"><code>git describe</code></a> to find the latest tag reachable from a commit, and give it a human-readable name</p>\n</blockquote>\n<p>Run <code>git describe</code> and you’ll see a human-readable string made from combining the last tag name, with the current commit, to generate a string. You can also pass a specific tag to it,</p>\n<p>Note that you must have created tags for this to work, unless you append the <code>--all</code> flag. Git describe will also only use annotated tags by default, so you must specify the <code>--tags</code> flag to make it use lightweight tags as well.</p>\n<hr>\n<h2 id=\"Git-Tag\"><a href=\"#Git-Tag\" class=\"headerlink\" title=\"Git Tag\"></a><a href=\"#git-tag\"></a>Git Tag</h2><blockquote>\n<p>Tag a specific point in your repo’s history using <a href=\"https://git-scm.com/docs/git-tag\"><code>git tag</code></a></p>\n</blockquote>\n<p>It’s often useful to be able to <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Tagging\">tag</a> specific, important points in a repository’s history most commonly used to denote versions of releases. Creating a tag is as simple as <code>git tag &lt;tagname&gt;</code>, or you can tag a historical commit with <code>git tag -a v4.2.0 &lt;commit sha&gt;</code>. Like with commits, you can include a message alongside a tag, using <code>-m</code>.</p>\n<p>Don’t forget to push your tag to remote, with <code>git push origin &lt;tagname&gt;</code>.<br>To list all tags, just run <code>git tag</code>, and optionally use <code>-l</code> for a wildcard search.<br>You’ll then be able to checkout a specific tag, with <code>git checkout &lt;tagname&gt;</code></p>\n<hr>\n<h2 id=\"Git-Reflog\"><a href=\"#Git-Reflog\" class=\"headerlink\" title=\"Git Reflog\"></a><a href=\"#git-reflog\"></a>Git Reflog</h2><blockquote>\n<p>List all updates made on your repo using <a href=\"https://git-scm.com/docs/git-reflog\"><code>git reflog</code></a></p>\n</blockquote>\n<p>Git keeps track of updates to the tip of branches using a mechanism called reference logs, or “reflogs”. Various events are tracked, including: clone, pull, push, commit, checkout and merge. It’s often useful to be able to find an events reference, as many commands accept a ref as a parameter. Just run <code>git reflog</code> to view recent events on <code>HEAD</code>.</p>\n<p>One thing that reflog is really useful for is recovering lost commits. Git never really loses anything, even when rewriting history (like rebasing or commit amending). Reflog allows you to go back to commits even though they are not referenced by any branch or tag.</p>\n<p>By default reflog uses <code>HEAD</code> (your current branch), but you can run reflog on any ref. For example <code>git reflog show &lt;branch name&gt;</code>, or to see stashed changes with <code>git reflog stash</code>. Or show all references with <code>git reflog show --all</code></p>\n<hr>\n<h2 id=\"Git-Log\"><a href=\"#Git-Log\" class=\"headerlink\" title=\"Git Log\"></a><a href=\"#git-log\"></a>Git Log</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-log\"><code>git log</code></a> to view a list of commits</p>\n</blockquote>\n<p>You’re likely already familiar with running <code>git log</code> to view a list of recent commits on your current branch. But there’s a few things more you can do with git log.</p>\n<p>Using <code>git log --graph --decorate --oneline</code> will show a nice neat commit graph along with ref pointers.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--EtfqYNeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/c1WByg8/Screenshot-from-2022-12-17-20-43-56.png\" alt=\"example git log output\"></a></p>\n<p>You also often need to be able to filter logs based on various parameters, the most useful of which are:</p>\n<ul>\n<li><code>git log --search=&quot;&lt;anything&gt;&quot;</code> - Search logs for specific code changes</li>\n<li><code>git log --author=&quot;&lt;pattern&gt;&quot;</code> - Show log only for specific author(s)</li>\n<li><code>git log --grep=&quot;&lt;pattern&gt;&quot;</code> - Filter log using search term or regex</li>\n<li><code>git log &lt;since&gt;..&lt;until&gt;</code> - Show all commits between two references</li>\n<li><code>git log -- &lt;file&gt;</code> - Show all commits made only to a specific file</li>\n</ul>\n<p>Or, just run <code>git shortlog</code> for a summerized list of commits.</p>\n<hr>\n<h2 id=\"Git-Cherry-Pick\"><a href=\"#Git-Cherry-Pick\" class=\"headerlink\" title=\"Git Cherry Pick\"></a><a href=\"#git-cherry-pick\"></a>Git Cherry Pick</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-cherry-pick\"><code>git cherry-pick</code></a> to pick specified commit(s) by reference and append them to the working HEAD</p>\n</blockquote>\n<p>Sometimes you need to pull a specific commit from elsewhere, into your current branch. This can be very useful for applying hot fixes, undoing changes, restoring lost commits and in certain team collaboration settings. Note that often traditional merges are better practice, since cherry picking commits can cause duplicate commits in the log.</p>\n<p>Usage is straightforward, just run <code>git cherry-pick &lt;commit-hash&gt;</code>. This will pull the specified commit into your current branch.</p>\n<hr>\n<h2 id=\"Git-Switch\"><a href=\"#Git-Switch\" class=\"headerlink\" title=\"Git Switch\"></a><a href=\"#git-switch\"></a>Git Switch</h2><blockquote>\n<p>Use <a href=\"https://git-scm.com/docs/git-switch\"><code>git switch</code></a></p>\n</blockquote>\n<p>Moving between branches is something that we do often, the <code>switch</code> command is like a simplified version of <code>git checkout</code>, it can be used to create and navigate between branches, but unlike checkout does not copy modified files when you move between branches.</p>\n<p>Similar to <code>checkout -b</code>, with the switch command you can append the <code>-c</code> flag to create a new branch, and jump strait into it, e.g. <code>git switch -c &lt;new branch&gt;</code>. And running <code>git switch -</code> will discard any experimental changes you’ve made, and return you to your previous branch.</p>\n<hr>\n<h2 id=\"Git-Standup\"><a href=\"#Git-Standup\" class=\"headerlink\" title=\"Git Standup\"></a><a href=\"#git-standup\"></a>Git Standup</h2><blockquote>\n<p>Use <a href=\"https://github.com/kamranahmedse/git-standup\"><code>git standup</code></a> to recall what you did on the last working day , based on git commits</p>\n</blockquote>\n<p>I’ve put this one at the end, as it’s not included with most git clients, but you can <a href=\"https://github.com/kamranahmedse/git-standup#install\">easily install it</a> either with your systems package manager, using a 1-line curl script, or by building from source.</p>\n<p>If your boss requires you do a daily standup, to give updates on yesterdays work, but you can never remember what you actually did - this one is for you! It’ll show a nicely formatted list of everything done in a given time frame. Usage is simple, just run <code>git standup</code>, or use <a href=\"https://github.com/kamranahmedse/git-standup#options\">these options</a> to specify what data should be shown (author, timeframe, branches, etc.</p>\n<hr>\n<h2 id=\"Bonus\"><a href=\"#Bonus\" class=\"headerlink\" title=\"Bonus\"></a><a href=\"#bonus\"></a>Bonus</h2><p>Git can be easily extended with add-ons, to add extra commands that do useful tasks. One of the most complete extensions is <a href=\"https://github.com/tj/git-extras/blob/master/Commands.md\">git-extras</a> by <a href=\"https://github.com/tj\">@tj</a>. It gives you 70+ <a href=\"https://github.com/tj/git-extras/blob/master/Commands.md\">extra commands</a> to automate common git jobs.</p>\n<p>For a list of more useful git add-ons, see <a href=\"https://github.com/stevemao/awesome-git-addons\">stevemao&#x2F;awesome-git-addons</a>.</p>\n<p>If you’re working with GitHub repos, then the <a href=\"https://cli.github.com/\">GitHub CLI</a> let’s you do common tasks (managing PRs, issues, code reviews, etc) from the command line.</p>\n<hr>\n<p>If you like this kind of stuff,<br>consider following for more :)</p>\n<p><a href=\"https://github.com/Lissy93\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8_HGggCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-Lissy93-3a3a3a%3Fstyle%3Dflat%26logo%3DGitHub%26logoColor%3Dwhite\" alt=\"Follow Lissy93 on GitHub\"></a><a href=\"https://twitter.com/Lissy_Sykes\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BhCWBIgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-%40Lissy_Sykes-00acee%3Fstyle%3Dflat%26logo%3DTwitter%26logoColor%3Dwhite\" alt=\"Follow Lissy_Sykes on Twitter\"></a></p>\n"},{"title":"How to Create a Google Maps Clone Using OpenStreetMap API","date":"2022-12-17T16:11:14.000Z","_content":"![$cover](images/maps.webp)\n\nRecently, I have been interested in making some projects such as a MERN stack Zillow clone, or a Django travel booking site. However, in researching the tools needed to create both of these, one critical piece was always too expensive: the google maps api. This API is billed per request, so if you are attaching it to a client application that end users can interact with, this will potentially drain your bank account (without proper captcha & security). The solution to this, instead, is to use a free and open source location data API. You can also follow along with this guide with the full Github [source code](https://github.com/brandonbyr4/maps-clone).\n\n**What we are building**  \nInstead of relying on a paid service, this project uses completely free tools. It is built with the following.\n\n*   Node.js\n*   Express.js (server)\n*   EJS (JavaScript templates)\n*   OpenStreetMap (Location data API)\n*   Leaflet.js (Interactive map widget)\n\n**Getting started**  \nTo start, create a new folder, and open a command line in the directory. From there, initialize a new npm / node.js project.  \n\n    npm init\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow, install the required dependencies. We are using express for the web server and EJS (JavaScript HTML templates) for the frontend. Also install nodemon so we don't have to refresh the server after every change.  \n\n    npm install express ejs\n    npm install --save-dev nodemon\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLastly, open package.json and replace \"scripts\" with the following.  \n\n    \"scripts\": {\n        \"dev\": \"nodemon server.js\",\n        \"start\": \"node server.js\"\n     },\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n**Building the server**  \nNow, we are ready to build the express.js server to render our site. Copy and paste the following into a new file in the root of your project named \"server.js\".  \n\n    const express = require(\"express\");\n    const app = express()\n    \n    app.set(\"view engine\", \"ejs\")\n    app.use(express.urlencoded({ extended: false }))\n    app.use(express.static(__dirname + '/static'));\n    \n    app.get(\"/\", (req, res) => {\n        res.render('index')\n    })\n    \n    app.listen(process.env.PORT || 8000)\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis gives us a basic express server that renders our index page. It is also setup to load CSS, images, and JavaScript from a folder named \"static\" in the root as well.\n\n**Adding the frontend**  \nOur web server should be running, however, there is no index file to render yet. Create a file named \"index.ejs\" inside a new folder named \"views\". Then, type \"!\" and hit enter (if your using VS code) to create a new HTML file. Paste the following into the body of your HTML file.  \n\n    <div class=\"map-container\">\n        <header>\n            <form id=\"search-form\" class=\"nav-bar\">\n                <h1 class=\"nav-logo\">\n                    Maps Clone\n                </h1>\n                <input type=\"text\" class=\"search\" name=\"searchTerm\" required />\n                <button type=\"submit\" class=\"submit-btn\">\n                    Search    \n                </button>\n            </form>\n        </header>\n        <div id=\"map\"></div>\n    </div>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLastly, we need to add some basic styling. Create a file named \"style.css\" in /static/css. Then, import your style sheet, and paste in [these styles](https://github.com/brandonbyr4/maps-clone/blob/main/static/css/style.css) from the [Github reposory](https://github.com/brandonbyr4/maps-clone).\n\n**Adding the map**  \nWe have an HTML div element with an id of map, but there is no actual map being rendered yet. To render the map, paste the CSS and script import for leaflet JS into the head of index.ejs.  \n\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" integrity=\"sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=\" crossorigin=\"\" />\n    <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\" integrity=\"sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=\" crossorigin=\"\"></script>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLast but not least, paste the following code into a new JavaScript file in /static/js/maplogic.js.  \n\n    var map = L.map('map').setView([33.659541, -118.1552947], 9)\n    \n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n    }).addTo(map);\n    \n    const updateMap = (coordinates) => {\n        map.setView([coordinates[0], coordinates[2]], 9)\n    }\n    \n    document.getElementById(\"search-form\").addEventListener('submit', (event) => {\n        event.preventDefault()\n        const searchTerm = event.target.searchTerm.value\n        fetch((\"https://nominatim.openstreetmap.org/search?format=json&limit=3&q=\" + searchTerm), {\n            method: \"GET\",\n            headers: {\n                'Content-Type':'application/json',\n            }\n        }).then((response) => response.json())\n        .then((responseJson) => {\n            if(responseJson[0]) {\n                const coordinates = responseJson[0].boundingbox\n                updateMap(coordinates)\n            } else {\n                alert(\"No locations found.\")\n            }\n        })\n        .catch((error) => {\n            console.error(error)\n        })\n    });\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis renders out the map using the Leaflet script we imported, as well as sets up an event listener to re-render the map when we search for a location.\n\n**Conclusion**  \nI hope you enjoy this map project as much as I did making it. I think these open source map libraries have huge potential, and I hope you can get this project running locally to test them out. If you want to download the full source code for this project the repo can be found on Github [here](https://github.com/Phantasm0009/Maps-Clone).\n","source":"_posts/maps.md","raw":"---\ntitle: How to Create a Google Maps Clone Using OpenStreetMap API\ndate: 2022-12-17 11:11:14\ntags:\n    - API\n    - Node.js\n---\n![$cover](images/maps.webp)\n\nRecently, I have been interested in making some projects such as a MERN stack Zillow clone, or a Django travel booking site. However, in researching the tools needed to create both of these, one critical piece was always too expensive: the google maps api. This API is billed per request, so if you are attaching it to a client application that end users can interact with, this will potentially drain your bank account (without proper captcha & security). The solution to this, instead, is to use a free and open source location data API. You can also follow along with this guide with the full Github [source code](https://github.com/brandonbyr4/maps-clone).\n\n**What we are building**  \nInstead of relying on a paid service, this project uses completely free tools. It is built with the following.\n\n*   Node.js\n*   Express.js (server)\n*   EJS (JavaScript templates)\n*   OpenStreetMap (Location data API)\n*   Leaflet.js (Interactive map widget)\n\n**Getting started**  \nTo start, create a new folder, and open a command line in the directory. From there, initialize a new npm / node.js project.  \n\n    npm init\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nNow, install the required dependencies. We are using express for the web server and EJS (JavaScript HTML templates) for the frontend. Also install nodemon so we don't have to refresh the server after every change.  \n\n    npm install express ejs\n    npm install --save-dev nodemon\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLastly, open package.json and replace \"scripts\" with the following.  \n\n    \"scripts\": {\n        \"dev\": \"nodemon server.js\",\n        \"start\": \"node server.js\"\n     },\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n**Building the server**  \nNow, we are ready to build the express.js server to render our site. Copy and paste the following into a new file in the root of your project named \"server.js\".  \n\n    const express = require(\"express\");\n    const app = express()\n    \n    app.set(\"view engine\", \"ejs\")\n    app.use(express.urlencoded({ extended: false }))\n    app.use(express.static(__dirname + '/static'));\n    \n    app.get(\"/\", (req, res) => {\n        res.render('index')\n    })\n    \n    app.listen(process.env.PORT || 8000)\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis gives us a basic express server that renders our index page. It is also setup to load CSS, images, and JavaScript from a folder named \"static\" in the root as well.\n\n**Adding the frontend**  \nOur web server should be running, however, there is no index file to render yet. Create a file named \"index.ejs\" inside a new folder named \"views\". Then, type \"!\" and hit enter (if your using VS code) to create a new HTML file. Paste the following into the body of your HTML file.  \n\n    <div class=\"map-container\">\n        <header>\n            <form id=\"search-form\" class=\"nav-bar\">\n                <h1 class=\"nav-logo\">\n                    Maps Clone\n                </h1>\n                <input type=\"text\" class=\"search\" name=\"searchTerm\" required />\n                <button type=\"submit\" class=\"submit-btn\">\n                    Search    \n                </button>\n            </form>\n        </header>\n        <div id=\"map\"></div>\n    </div>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLastly, we need to add some basic styling. Create a file named \"style.css\" in /static/css. Then, import your style sheet, and paste in [these styles](https://github.com/brandonbyr4/maps-clone/blob/main/static/css/style.css) from the [Github reposory](https://github.com/brandonbyr4/maps-clone).\n\n**Adding the map**  \nWe have an HTML div element with an id of map, but there is no actual map being rendered yet. To render the map, paste the CSS and script import for leaflet JS into the head of index.ejs.  \n\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" integrity=\"sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=\" crossorigin=\"\" />\n    <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\" integrity=\"sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=\" crossorigin=\"\"></script>\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nLast but not least, paste the following code into a new JavaScript file in /static/js/maplogic.js.  \n\n    var map = L.map('map').setView([33.659541, -118.1552947], 9)\n    \n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n    }).addTo(map);\n    \n    const updateMap = (coordinates) => {\n        map.setView([coordinates[0], coordinates[2]], 9)\n    }\n    \n    document.getElementById(\"search-form\").addEventListener('submit', (event) => {\n        event.preventDefault()\n        const searchTerm = event.target.searchTerm.value\n        fetch((\"https://nominatim.openstreetmap.org/search?format=json&limit=3&q=\" + searchTerm), {\n            method: \"GET\",\n            headers: {\n                'Content-Type':'application/json',\n            }\n        }).then((response) => response.json())\n        .then((responseJson) => {\n            if(responseJson[0]) {\n                const coordinates = responseJson[0].boundingbox\n                updateMap(coordinates)\n            } else {\n                alert(\"No locations found.\")\n            }\n        })\n        .catch((error) => {\n            console.error(error)\n        })\n    });\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThis renders out the map using the Leaflet script we imported, as well as sets up an event listener to re-render the map when we search for a location.\n\n**Conclusion**  \nI hope you enjoy this map project as much as I did making it. I think these open source map libraries have huge potential, and I hope you can get this project running locally to test them out. If you want to download the full source code for this project the repo can be found on Github [here](https://github.com/Phantasm0009/Maps-Clone).\n","slug":"maps","published":1,"updated":"2022-12-22T15:14:59.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93iro0007twlh8bfxbnly","content":"<p><img src=\"/images/maps.webp\" alt=\"$cover\"></p>\n<p>Recently, I have been interested in making some projects such as a MERN stack Zillow clone, or a Django travel booking site. However, in researching the tools needed to create both of these, one critical piece was always too expensive: the google maps api. This API is billed per request, so if you are attaching it to a client application that end users can interact with, this will potentially drain your bank account (without proper captcha &amp; security). The solution to this, instead, is to use a free and open source location data API. You can also follow along with this guide with the full Github <a href=\"https://github.com/brandonbyr4/maps-clone\">source code</a>.</p>\n<p><strong>What we are building</strong><br>Instead of relying on a paid service, this project uses completely free tools. It is built with the following.</p>\n<ul>\n<li>Node.js</li>\n<li>Express.js (server)</li>\n<li>EJS (JavaScript templates)</li>\n<li>OpenStreetMap (Location data API)</li>\n<li>Leaflet.js (Interactive map widget)</li>\n</ul>\n<p><strong>Getting started</strong><br>To start, create a new folder, and open a command line in the directory. From there, initialize a new npm &#x2F; node.js project.  </p>\n<pre><code>npm init\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now, install the required dependencies. We are using express for the web server and EJS (JavaScript HTML templates) for the frontend. Also install nodemon so we don’t have to refresh the server after every change.  </p>\n<pre><code>npm install express ejs\nnpm install --save-dev nodemon\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Lastly, open package.json and replace “scripts” with the following.  </p>\n<pre><code>&quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;nodemon server.js&quot;,\n    &quot;start&quot;: &quot;node server.js&quot;\n &#125;,\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p><strong>Building the server</strong><br>Now, we are ready to build the express.js server to render our site. Copy and paste the following into a new file in the root of your project named “server.js”.  </p>\n<pre><code>const express = require(&quot;express&quot;);\nconst app = express()\n\napp.set(&quot;view engine&quot;, &quot;ejs&quot;)\napp.use(express.urlencoded(&#123; extended: false &#125;))\napp.use(express.static(__dirname + &#39;/static&#39;));\n\napp.get(&quot;/&quot;, (req, res) =&gt; &#123;\n    res.render(&#39;index&#39;)\n&#125;)\n\napp.listen(process.env.PORT || 8000)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This gives us a basic express server that renders our index page. It is also setup to load CSS, images, and JavaScript from a folder named “static” in the root as well.</p>\n<p><strong>Adding the frontend</strong><br>Our web server should be running, however, there is no index file to render yet. Create a file named “index.ejs” inside a new folder named “views”. Then, type “!” and hit enter (if your using VS code) to create a new HTML file. Paste the following into the body of your HTML file.  </p>\n<pre><code>&lt;div class=&quot;map-container&quot;&gt;\n    &lt;header&gt;\n        &lt;form id=&quot;search-form&quot; class=&quot;nav-bar&quot;&gt;\n            &lt;h1 class=&quot;nav-logo&quot;&gt;\n                Maps Clone\n            &lt;/h1&gt;\n            &lt;input type=&quot;text&quot; class=&quot;search&quot; name=&quot;searchTerm&quot; required /&gt;\n            &lt;button type=&quot;submit&quot; class=&quot;submit-btn&quot;&gt;\n                Search    \n            &lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/header&gt;\n    &lt;div id=&quot;map&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Lastly, we need to add some basic styling. Create a file named “style.css” in &#x2F;static&#x2F;css. Then, import your style sheet, and paste in <a href=\"https://github.com/brandonbyr4/maps-clone/blob/main/static/css/style.css\">these styles</a> from the <a href=\"https://github.com/brandonbyr4/maps-clone\">Github reposory</a>.</p>\n<p><strong>Adding the map</strong><br>We have an HTML div element with an id of map, but there is no actual map being rendered yet. To render the map, paste the CSS and script import for leaflet JS into the head of index.ejs.  </p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.css&quot; integrity=&quot;sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=&quot; crossorigin=&quot;&quot; /&gt;\n&lt;script src=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.js&quot; integrity=&quot;sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=&quot; crossorigin=&quot;&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Last but not least, paste the following code into a new JavaScript file in &#x2F;static&#x2F;js&#x2F;maplogic.js.  </p>\n<pre><code>var map = L.map(&#39;map&#39;).setView([33.659541, -118.1552947], 9)\n\nL.tileLayer(&#39;https://tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#39;, &#123;\n    maxZoom: 19,\n    attribution: &#39;&amp;copy; &lt;a href=&quot;http://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt;&#39;\n&#125;).addTo(map);\n\nconst updateMap = (coordinates) =&gt; &#123;\n    map.setView([coordinates[0], coordinates[2]], 9)\n&#125;\n\ndocument.getElementById(&quot;search-form&quot;).addEventListener(&#39;submit&#39;, (event) =&gt; &#123;\n    event.preventDefault()\n    const searchTerm = event.target.searchTerm.value\n    fetch((&quot;https://nominatim.openstreetmap.org/search?format=json&amp;limit=3&amp;q=&quot; + searchTerm), &#123;\n        method: &quot;GET&quot;,\n        headers: &#123;\n            &#39;Content-Type&#39;:&#39;application/json&#39;,\n        &#125;\n    &#125;).then((response) =&gt; response.json())\n    .then((responseJson) =&gt; &#123;\n        if(responseJson[0]) &#123;\n            const coordinates = responseJson[0].boundingbox\n            updateMap(coordinates)\n        &#125; else &#123;\n            alert(&quot;No locations found.&quot;)\n        &#125;\n    &#125;)\n    .catch((error) =&gt; &#123;\n        console.error(error)\n    &#125;)\n&#125;);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This renders out the map using the Leaflet script we imported, as well as sets up an event listener to re-render the map when we search for a location.</p>\n<p><strong>Conclusion</strong><br>I hope you enjoy this map project as much as I did making it. I think these open source map libraries have huge potential, and I hope you can get this project running locally to test them out. If you want to download the full source code for this project the repo can be found on Github <a href=\"https://github.com/Phantasm0009/Maps-Clone\">here</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/maps.webp\" alt=\"$cover\"></p>\n<p>Recently, I have been interested in making some projects such as a MERN stack Zillow clone, or a Django travel booking site. However, in researching the tools needed to create both of these, one critical piece was always too expensive: the google maps api. This API is billed per request, so if you are attaching it to a client application that end users can interact with, this will potentially drain your bank account (without proper captcha &amp; security). The solution to this, instead, is to use a free and open source location data API. You can also follow along with this guide with the full Github <a href=\"https://github.com/brandonbyr4/maps-clone\">source code</a>.</p>\n<p><strong>What we are building</strong><br>Instead of relying on a paid service, this project uses completely free tools. It is built with the following.</p>\n<ul>\n<li>Node.js</li>\n<li>Express.js (server)</li>\n<li>EJS (JavaScript templates)</li>\n<li>OpenStreetMap (Location data API)</li>\n<li>Leaflet.js (Interactive map widget)</li>\n</ul>\n<p><strong>Getting started</strong><br>To start, create a new folder, and open a command line in the directory. From there, initialize a new npm &#x2F; node.js project.  </p>\n<pre><code>npm init\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Now, install the required dependencies. We are using express for the web server and EJS (JavaScript HTML templates) for the frontend. Also install nodemon so we don’t have to refresh the server after every change.  </p>\n<pre><code>npm install express ejs\nnpm install --save-dev nodemon\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Lastly, open package.json and replace “scripts” with the following.  </p>\n<pre><code>&quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;nodemon server.js&quot;,\n    &quot;start&quot;: &quot;node server.js&quot;\n &#125;,\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p><strong>Building the server</strong><br>Now, we are ready to build the express.js server to render our site. Copy and paste the following into a new file in the root of your project named “server.js”.  </p>\n<pre><code>const express = require(&quot;express&quot;);\nconst app = express()\n\napp.set(&quot;view engine&quot;, &quot;ejs&quot;)\napp.use(express.urlencoded(&#123; extended: false &#125;))\napp.use(express.static(__dirname + &#39;/static&#39;));\n\napp.get(&quot;/&quot;, (req, res) =&gt; &#123;\n    res.render(&#39;index&#39;)\n&#125;)\n\napp.listen(process.env.PORT || 8000)\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This gives us a basic express server that renders our index page. It is also setup to load CSS, images, and JavaScript from a folder named “static” in the root as well.</p>\n<p><strong>Adding the frontend</strong><br>Our web server should be running, however, there is no index file to render yet. Create a file named “index.ejs” inside a new folder named “views”. Then, type “!” and hit enter (if your using VS code) to create a new HTML file. Paste the following into the body of your HTML file.  </p>\n<pre><code>&lt;div class=&quot;map-container&quot;&gt;\n    &lt;header&gt;\n        &lt;form id=&quot;search-form&quot; class=&quot;nav-bar&quot;&gt;\n            &lt;h1 class=&quot;nav-logo&quot;&gt;\n                Maps Clone\n            &lt;/h1&gt;\n            &lt;input type=&quot;text&quot; class=&quot;search&quot; name=&quot;searchTerm&quot; required /&gt;\n            &lt;button type=&quot;submit&quot; class=&quot;submit-btn&quot;&gt;\n                Search    \n            &lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/header&gt;\n    &lt;div id=&quot;map&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Lastly, we need to add some basic styling. Create a file named “style.css” in &#x2F;static&#x2F;css. Then, import your style sheet, and paste in <a href=\"https://github.com/brandonbyr4/maps-clone/blob/main/static/css/style.css\">these styles</a> from the <a href=\"https://github.com/brandonbyr4/maps-clone\">Github reposory</a>.</p>\n<p><strong>Adding the map</strong><br>We have an HTML div element with an id of map, but there is no actual map being rendered yet. To render the map, paste the CSS and script import for leaflet JS into the head of index.ejs.  </p>\n<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.css&quot; integrity=&quot;sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=&quot; crossorigin=&quot;&quot; /&gt;\n&lt;script src=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.js&quot; integrity=&quot;sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=&quot; crossorigin=&quot;&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Last but not least, paste the following code into a new JavaScript file in &#x2F;static&#x2F;js&#x2F;maplogic.js.  </p>\n<pre><code>var map = L.map(&#39;map&#39;).setView([33.659541, -118.1552947], 9)\n\nL.tileLayer(&#39;https://tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#39;, &#123;\n    maxZoom: 19,\n    attribution: &#39;&amp;copy; &lt;a href=&quot;http://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt;&#39;\n&#125;).addTo(map);\n\nconst updateMap = (coordinates) =&gt; &#123;\n    map.setView([coordinates[0], coordinates[2]], 9)\n&#125;\n\ndocument.getElementById(&quot;search-form&quot;).addEventListener(&#39;submit&#39;, (event) =&gt; &#123;\n    event.preventDefault()\n    const searchTerm = event.target.searchTerm.value\n    fetch((&quot;https://nominatim.openstreetmap.org/search?format=json&amp;limit=3&amp;q=&quot; + searchTerm), &#123;\n        method: &quot;GET&quot;,\n        headers: &#123;\n            &#39;Content-Type&#39;:&#39;application/json&#39;,\n        &#125;\n    &#125;).then((response) =&gt; response.json())\n    .then((responseJson) =&gt; &#123;\n        if(responseJson[0]) &#123;\n            const coordinates = responseJson[0].boundingbox\n            updateMap(coordinates)\n        &#125; else &#123;\n            alert(&quot;No locations found.&quot;)\n        &#125;\n    &#125;)\n    .catch((error) =&gt; &#123;\n        console.error(error)\n    &#125;)\n&#125;);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>This renders out the map using the Leaflet script we imported, as well as sets up an event listener to re-render the map when we search for a location.</p>\n<p><strong>Conclusion</strong><br>I hope you enjoy this map project as much as I did making it. I think these open source map libraries have huge potential, and I hope you can get this project running locally to test them out. If you want to download the full source code for this project the repo can be found on Github <a href=\"https://github.com/Phantasm0009/Maps-Clone\">here</a>.</p>\n"},{"title":"Simple Search Box With Icon","date":"2022-12-17T16:06:07.000Z","_content":"\nIt's like this:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png)\n\nHere is the code:  \n\n    \n    <input class=\"search\" type=\"search\" placeholder=\"Search...\">\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n        input.search {\n            width: 260px;\n            border: 1px solid #555;\n            display: block;\n            padding: 9px 4px 9px 40px;\n            background: transparent url(\"/assets/search.svg\") no-repeat 13px;\n        }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n`padding` top, left, bottom, right - Places `placeholder` named `Search` just beside icon inside input.\n\ndownload `svg` from any icon store say [bootstrap](https://icons.getbootstrap.com/icons/search/) and place inside folder.\n\n`background` property - color, image, repeat, position - Places search icon in proper place in search box.\n\nThanks.","source":"_posts/search.md","raw":"---\ntitle: Simple Search Box With Icon\ndate: 2022-12-17 11:06:07\ntags:\n    - Search\n    - Html\n---\n\nIt's like this:\n\n[![Image description](https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png)\n\nHere is the code:  \n\n    \n    <input class=\"search\" type=\"search\" placeholder=\"Search...\">\n    \n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n        input.search {\n            width: 260px;\n            border: 1px solid #555;\n            display: block;\n            padding: 9px 4px 9px 40px;\n            background: transparent url(\"/assets/search.svg\") no-repeat 13px;\n        }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n`padding` top, left, bottom, right - Places `placeholder` named `Search` just beside icon inside input.\n\ndownload `svg` from any icon store say [bootstrap](https://icons.getbootstrap.com/icons/search/) and place inside folder.\n\n`background` property - color, image, repeat, position - Places search icon in proper place in search box.\n\nThanks.","slug":"search","published":1,"updated":"2022-12-22T15:14:16.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irp0008twlh1u3a4mgm","content":"<p>It’s like this:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png\" alt=\"Image description\"></a></p>\n<p>Here is the code:  </p>\n<pre><code>&lt;input class=&quot;search&quot; type=&quot;search&quot; placeholder=&quot;Search...&quot;&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<pre><code>    input.search &#123;\n        width: 260px;\n        border: 1px solid #555;\n        display: block;\n        padding: 9px 4px 9px 40px;\n        background: transparent url(&quot;/assets/search.svg&quot;) no-repeat 13px;\n    &#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p><code>padding</code> top, left, bottom, right - Places <code>placeholder</code> named <code>Search</code> just beside icon inside input.</p>\n<p>download <code>svg</code> from any icon store say <a href=\"https://icons.getbootstrap.com/icons/search/\">bootstrap</a> and place inside folder.</p>\n<p><code>background</code> property - color, image, repeat, position - Places search icon in proper place in search box.</p>\n<p>Thanks.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s like this:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--W7qvCPMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyknz8xfm7e5d5qcag7t.png\" alt=\"Image description\"></a></p>\n<p>Here is the code:  </p>\n<pre><code>&lt;input class=&quot;search&quot; type=&quot;search&quot; placeholder=&quot;Search...&quot;&gt;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<pre><code>    input.search &#123;\n        width: 260px;\n        border: 1px solid #555;\n        display: block;\n        padding: 9px 4px 9px 40px;\n        background: transparent url(&quot;/assets/search.svg&quot;) no-repeat 13px;\n    &#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p><code>padding</code> top, left, bottom, right - Places <code>placeholder</code> named <code>Search</code> just beside icon inside input.</p>\n<p>download <code>svg</code> from any icon store say <a href=\"https://icons.getbootstrap.com/icons/search/\">bootstrap</a> and place inside folder.</p>\n<p><code>background</code> property - color, image, repeat, position - Places search icon in proper place in search box.</p>\n<p>Thanks.</p>\n"},{"title":"React.js - Custom Hooks","date":"2022-12-19T19:56:06.000Z","_content":"![$cover](images/react.webp)\n\nThe topic of hooks in React development is quite popular and has been analyzed more than once by various specialists. The purpose of our material is not so much to bring something new as to analyze a sufficiently important and relevant topic in the most accessible and understandable language, so that it does not cause difficulties even for beginners in the development of applications on React.\n\nFirst appeared in React version 16.8. The structure of applications based on the use of hooks was very pleasant to the community for its flexibility and simplicity, which allowed it to practically replace classes.\n\n[](#its-easier-with-hooks)It's easier with hooks!\n-------------------------------------------------\n\nMany newcomers were scared away by the classes with their cumbersomeness and less transparency. The mechanisms of state and reusable use looked much more complicated than in reality. The introduction of hooks has largely solved this problem and significantly increased the popularity of the library, which has been steadily growing for several years.\n\n[](#reacts-main-hooks-out-of-the-box)React's main hooks out of the box\n----------------------------------------------------------------------\n\nReact out of the box contains several very important hooks.\n\n### [](#usestate-manage-the-state-in-functional-components)useState - manage the state in functional components\n\nOne of the most important hooks is useState. Its name immediately makes it clear what it is used for - it is responsible for the state. This hook allows you to influence the state like the this.setState() method. First of all, let's look at a simple example of its use:  \n\n    const MyComponent = () => {\n      const [counter, setCounter] = useState(1);\n      return (\n        <button onClick={() => setCounter(counter + 1)}>\n          +1 to the previous value\n        </button>\n    );\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, after the functional element is declared, we call the useState method, passing it the default value:  \n\n    const [counter, setCounter] = useState(1);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThe method returns an array of 2 elements. The 1st element is a state variable, the 2nd element contains a function to change this state. The button is set to the onClick event, which allows you to change the state by increasing the value by 1 from the previous one:  \n\n    onClick={() => setCounter(counter + 1)}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#usecontext-we-transfer-information-to-any-levels-of-nesting)useContext - we transfer information to any levels of nesting\n\nAs a rule, the parent component shares data with children using props. However, there is a need to transfer this data not only to the nearest \"children\" of this component, but also to more nested components. Transmitting \"relatives\" along the entire chain is terribly inconvenient and can lead to mistakes. In this case, it is convenient to use useContext.  \n\n    import {createContext, useContext} from \"react\";\n    \n    const MyContext = createContext(\"no data\");\n    \n    const Bookcase = () =⟩ {\n      return (\n        ⟨MyContext.Provider value=\"шкаф #1 \"⟩\n          ⟨Bookshelf /⟩\n        ⟨/MyContext.Provider⟩\n      );\n    };\n    \n    const Bookshelf = () =⟩ {\n      return ⟨Book /⟩;\n    };\n    \n    const Book = () =⟩ {\n      const context = useContext(MyContext);\n      return `Book in is \"${context}\"`;\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, thanks to the useContext hook, each book can have information about which cabinet it is located in, and there is no need to receive it from the direct parent (book shelf).\n\n### [](#useeffect-we-implement-lifecycle-functionality)useEffect - we implement lifecycle functionality\n\nUsed to simulate the lifecycle, as well as the componentDidMount, componentDidUpdate, componentWillUnmount methods do when using the React structure on classes. A callback function is passed as arguments, which performs the necessary actions and an array with variables, the change of which must be monitored and callback when they are changed.\n\n### [](#useref-link-variables-directly-to-dom)useRef - link variables directly to DOM\n\nTo access DOM elements directly in functional components, you must use useRef. In the example below, we bind the button to the buttonRef variable and can use this link in the callback function passed as the 1st argument in useRef.  \n\n    const MyButton = () =⟩ {\n      const buttonRef = useRef();\n      useEffect(() =⟩ {\n        console.log(buttonRef.current.innerHTML);\n      }, []);\n      return ⟨button ref={ref}⟩My button⟨/button⟩;\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n[](#more-hooks)More hooks!\n--------------------------\n\nuseReducer: allows you to store the status value regardless of nesting, is an analogue of Redux.\n\nuseMemo: allows you to store the value and recalculate only when constraints change.\n\nuseCallback: used to memoize functions, avoids unnecessary rendering and re-creation of functions. Very useful for optimization.\n\n[](#were-writing-our-own-hook)We're writing our own hook\n--------------------------------------------------------\n\nIn essence, hooks are common functions, the name of which begins with the prefix \"use\". They can use other hooks, accept arguments and return the result.\n\nIt is convenient to create your own hooks when you need to learn the logic that is often used in different components of the application. It is necessary to remember about important restrictions for hooks: you can't call inside conditional constructions and loops - this will cause an error in the application.\n\nLet's look at an example from the official react documentation. It is interesting because it describes an example of creating a useReducer hook using an existing useState.\n\nLet's say we work with a component that has a fairly developed state management logic depending on their type. In this case, useState is not very convenient to use with centralized state management logic and Redux-reducer is more suitable:  \n\n    function todosReducer(state, action) {\n      switch (action.type) {\n        case 'add':\n          return [...state, {\n            text: action.text,\n            completed: false\n          }];\n        // ... other actions ...\n        default:\n          return state;\n      }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOur hook will look like this (simplified):  \n\n    function useReducer(reducer, initialState) {\n      const [state, setState] = useState(initialState)\n    \n      function dispatch(action) {\n        const nextState = reducer(state, action)\n        setState(nextState)\n      }\n    \n      return [state, dispatch]\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we accept as parameters - a reworker function responsible for the log of state change, initial state, and return the current state and function to change it. At the same time, we can very easily modify the logic of changing states by adding/changing types in the todosReducer function. After that, it is convenient to use this logic in your component:  \n\n    function Todos() {\n      const [todos, dispatch] = useReducer(todosReducer, [])\n      function handleAddClick(text) {\n        dispatch({ type: 'add', text })\n      }\n      // ...\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nHooks can be used for a wide variety of purposes. Let's look at an example of a hook for working with local browser storage:  \n\n    function getStorageValue(key, defaultValue) {\n      const saved = localStorage.getItem(key);\n      const initial = !saved || saved === 'undefined' ? null : JSON.parse(saved);\n      return initial || defaultValue;\n    }\n    export default  function useLocalStorage (key, defaultValue){\n      const [value, setValue] = useState(() =⟩ {\n        return getStorageValue(key, defaultValue);\n      });\n    \n      useEffect(() =⟩ {\n        localStorage.setItem(key, JSON.stringify(value));\n      }, [key, value]);\n    \n      return [value, setValue];\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe defined the function of working with localStorage by writing our own logic for obtaining primary data from the repository. Then we created a hook that initializes the state using the result of this function. We also use useEffect to write to localStorage when changing the value of the key or value variables. In our component, we can use the hook in this way:  \n\n    const [storageData, setStorageData] = useLocalStorage('my-data');\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nSo, we managed to link data in the state with the data in the local browser storage.\n\nThat's all for now, I hope this article helped make understanding the topic of hooks easier for you!\n\nThanks for reading. Leave your comments below and follow my [GitHub](https://github.com/Phantasm0009) <3","source":"_posts/react.md","raw":"---\ntitle: React.js - Custom Hooks\ndate: 2022-12-19 14:56:06\ntags:\n    - React\n---\n![$cover](images/react.webp)\n\nThe topic of hooks in React development is quite popular and has been analyzed more than once by various specialists. The purpose of our material is not so much to bring something new as to analyze a sufficiently important and relevant topic in the most accessible and understandable language, so that it does not cause difficulties even for beginners in the development of applications on React.\n\nFirst appeared in React version 16.8. The structure of applications based on the use of hooks was very pleasant to the community for its flexibility and simplicity, which allowed it to practically replace classes.\n\n[](#its-easier-with-hooks)It's easier with hooks!\n-------------------------------------------------\n\nMany newcomers were scared away by the classes with their cumbersomeness and less transparency. The mechanisms of state and reusable use looked much more complicated than in reality. The introduction of hooks has largely solved this problem and significantly increased the popularity of the library, which has been steadily growing for several years.\n\n[](#reacts-main-hooks-out-of-the-box)React's main hooks out of the box\n----------------------------------------------------------------------\n\nReact out of the box contains several very important hooks.\n\n### [](#usestate-manage-the-state-in-functional-components)useState - manage the state in functional components\n\nOne of the most important hooks is useState. Its name immediately makes it clear what it is used for - it is responsible for the state. This hook allows you to influence the state like the this.setState() method. First of all, let's look at a simple example of its use:  \n\n    const MyComponent = () => {\n      const [counter, setCounter] = useState(1);\n      return (\n        <button onClick={() => setCounter(counter + 1)}>\n          +1 to the previous value\n        </button>\n    );\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, after the functional element is declared, we call the useState method, passing it the default value:  \n\n    const [counter, setCounter] = useState(1);\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nThe method returns an array of 2 elements. The 1st element is a state variable, the 2nd element contains a function to change this state. The button is set to the onClick event, which allows you to change the state by increasing the value by 1 from the previous one:  \n\n    onClick={() => setCounter(counter + 1)}\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n### [](#usecontext-we-transfer-information-to-any-levels-of-nesting)useContext - we transfer information to any levels of nesting\n\nAs a rule, the parent component shares data with children using props. However, there is a need to transfer this data not only to the nearest \"children\" of this component, but also to more nested components. Transmitting \"relatives\" along the entire chain is terribly inconvenient and can lead to mistakes. In this case, it is convenient to use useContext.  \n\n    import {createContext, useContext} from \"react\";\n    \n    const MyContext = createContext(\"no data\");\n    \n    const Bookcase = () =⟩ {\n      return (\n        ⟨MyContext.Provider value=\"шкаф #1 \"⟩\n          ⟨Bookshelf /⟩\n        ⟨/MyContext.Provider⟩\n      );\n    };\n    \n    const Bookshelf = () =⟩ {\n      return ⟨Book /⟩;\n    };\n    \n    const Book = () =⟩ {\n      const context = useContext(MyContext);\n      return `Book in is \"${context}\"`;\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nIn this example, thanks to the useContext hook, each book can have information about which cabinet it is located in, and there is no need to receive it from the direct parent (book shelf).\n\n### [](#useeffect-we-implement-lifecycle-functionality)useEffect - we implement lifecycle functionality\n\nUsed to simulate the lifecycle, as well as the componentDidMount, componentDidUpdate, componentWillUnmount methods do when using the React structure on classes. A callback function is passed as arguments, which performs the necessary actions and an array with variables, the change of which must be monitored and callback when they are changed.\n\n### [](#useref-link-variables-directly-to-dom)useRef - link variables directly to DOM\n\nTo access DOM elements directly in functional components, you must use useRef. In the example below, we bind the button to the buttonRef variable and can use this link in the callback function passed as the 1st argument in useRef.  \n\n    const MyButton = () =⟩ {\n      const buttonRef = useRef();\n      useEffect(() =⟩ {\n        console.log(buttonRef.current.innerHTML);\n      }, []);\n      return ⟨button ref={ref}⟩My button⟨/button⟩;\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\n[](#more-hooks)More hooks!\n--------------------------\n\nuseReducer: allows you to store the status value regardless of nesting, is an analogue of Redux.\n\nuseMemo: allows you to store the value and recalculate only when constraints change.\n\nuseCallback: used to memoize functions, avoids unnecessary rendering and re-creation of functions. Very useful for optimization.\n\n[](#were-writing-our-own-hook)We're writing our own hook\n--------------------------------------------------------\n\nIn essence, hooks are common functions, the name of which begins with the prefix \"use\". They can use other hooks, accept arguments and return the result.\n\nIt is convenient to create your own hooks when you need to learn the logic that is often used in different components of the application. It is necessary to remember about important restrictions for hooks: you can't call inside conditional constructions and loops - this will cause an error in the application.\n\nLet's look at an example from the official react documentation. It is interesting because it describes an example of creating a useReducer hook using an existing useState.\n\nLet's say we work with a component that has a fairly developed state management logic depending on their type. In this case, useState is not very convenient to use with centralized state management logic and Redux-reducer is more suitable:  \n\n    function todosReducer(state, action) {\n      switch (action.type) {\n        case 'add':\n          return [...state, {\n            text: action.text,\n            completed: false\n          }];\n        // ... other actions ...\n        default:\n          return state;\n      }\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nOur hook will look like this (simplified):  \n\n    function useReducer(reducer, initialState) {\n      const [state, setState] = useState(initialState)\n    \n      function dispatch(action) {\n        const nextState = reducer(state, action)\n        setState(nextState)\n      }\n    \n      return [state, dispatch]\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nHere we accept as parameters - a reworker function responsible for the log of state change, initial state, and return the current state and function to change it. At the same time, we can very easily modify the logic of changing states by adding/changing types in the todosReducer function. After that, it is convenient to use this logic in your component:  \n\n    function Todos() {\n      const [todos, dispatch] = useReducer(todosReducer, [])\n      function handleAddClick(text) {\n        dispatch({ type: 'add', text })\n      }\n      // ...\n    }\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nHooks can be used for a wide variety of purposes. Let's look at an example of a hook for working with local browser storage:  \n\n    function getStorageValue(key, defaultValue) {\n      const saved = localStorage.getItem(key);\n      const initial = !saved || saved === 'undefined' ? null : JSON.parse(saved);\n      return initial || defaultValue;\n    }\n    export default  function useLocalStorage (key, defaultValue){\n      const [value, setValue] = useState(() =⟩ {\n        return getStorageValue(key, defaultValue);\n      });\n    \n      useEffect(() =⟩ {\n        localStorage.setItem(key, JSON.stringify(value));\n      }, [key, value]);\n    \n      return [value, setValue];\n    };\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nWe defined the function of working with localStorage by writing our own logic for obtaining primary data from the repository. Then we created a hook that initializes the state using the result of this function. We also use useEffect to write to localStorage when changing the value of the key or value variables. In our component, we can use the hook in this way:  \n\n    const [storageData, setStorageData] = useLocalStorage('my-data');\n    \n\nEnter fullscreen mode Exit fullscreen mode\n\nSo, we managed to link data in the state with the data in the local browser storage.\n\nThat's all for now, I hope this article helped make understanding the topic of hooks easier for you!\n\nThanks for reading. Leave your comments below and follow my [GitHub](https://github.com/Phantasm0009) <3","slug":"react","published":1,"updated":"2022-12-22T15:14:24.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irp000atwlh3qe67ra3","content":"<p><img src=\"/images/react.webp\" alt=\"$cover\"></p>\n<p>The topic of hooks in React development is quite popular and has been analyzed more than once by various specialists. The purpose of our material is not so much to bring something new as to analyze a sufficiently important and relevant topic in the most accessible and understandable language, so that it does not cause difficulties even for beginners in the development of applications on React.</p>\n<p>First appeared in React version 16.8. The structure of applications based on the use of hooks was very pleasant to the community for its flexibility and simplicity, which allowed it to practically replace classes.</p>\n<h2 id=\"It’s-easier-with-hooks\"><a href=\"#It’s-easier-with-hooks\" class=\"headerlink\" title=\"It’s easier with hooks!\"></a><a href=\"#its-easier-with-hooks\"></a>It’s easier with hooks!</h2><p>Many newcomers were scared away by the classes with their cumbersomeness and less transparency. The mechanisms of state and reusable use looked much more complicated than in reality. The introduction of hooks has largely solved this problem and significantly increased the popularity of the library, which has been steadily growing for several years.</p>\n<h2 id=\"React’s-main-hooks-out-of-the-box\"><a href=\"#React’s-main-hooks-out-of-the-box\" class=\"headerlink\" title=\"React’s main hooks out of the box\"></a><a href=\"#reacts-main-hooks-out-of-the-box\"></a>React’s main hooks out of the box</h2><p>React out of the box contains several very important hooks.</p>\n<h3 id=\"useState-manage-the-state-in-functional-components\"><a href=\"#useState-manage-the-state-in-functional-components\" class=\"headerlink\" title=\"useState - manage the state in functional components\"></a><a href=\"#usestate-manage-the-state-in-functional-components\"></a>useState - manage the state in functional components</h3><p>One of the most important hooks is useState. Its name immediately makes it clear what it is used for - it is responsible for the state. This hook allows you to influence the state like the this.setState() method. First of all, let’s look at a simple example of its use:  </p>\n<pre><code>const MyComponent = () =&gt; &#123;\n  const [counter, setCounter] = useState(1);\n  return (\n    &lt;button onClick=&#123;() =&gt; setCounter(counter + 1)&#125;&gt;\n      +1 to the previous value\n    &lt;/button&gt;\n);\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In this example, after the functional element is declared, we call the useState method, passing it the default value:  </p>\n<pre><code>const [counter, setCounter] = useState(1);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>The method returns an array of 2 elements. The 1st element is a state variable, the 2nd element contains a function to change this state. The button is set to the onClick event, which allows you to change the state by increasing the value by 1 from the previous one:  </p>\n<pre><code>onClick=&#123;() =&gt; setCounter(counter + 1)&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h3 id=\"useContext-we-transfer-information-to-any-levels-of-nesting\"><a href=\"#useContext-we-transfer-information-to-any-levels-of-nesting\" class=\"headerlink\" title=\"useContext - we transfer information to any levels of nesting\"></a><a href=\"#usecontext-we-transfer-information-to-any-levels-of-nesting\"></a>useContext - we transfer information to any levels of nesting</h3><p>As a rule, the parent component shares data with children using props. However, there is a need to transfer this data not only to the nearest “children” of this component, but also to more nested components. Transmitting “relatives” along the entire chain is terribly inconvenient and can lead to mistakes. In this case, it is convenient to use useContext.  </p>\n<pre><code>import &#123;createContext, useContext&#125; from &quot;react&quot;;\n\nconst MyContext = createContext(&quot;no data&quot;);\n\nconst Bookcase = () =⟩ &#123;\n  return (\n    ⟨MyContext.Provider value=&quot;шкаф #1 &quot;⟩\n      ⟨Bookshelf /⟩\n    ⟨/MyContext.Provider⟩\n  );\n&#125;;\n\nconst Bookshelf = () =⟩ &#123;\n  return ⟨Book /⟩;\n&#125;;\n\nconst Book = () =⟩ &#123;\n  const context = useContext(MyContext);\n  return `Book in is &quot;$&#123;context&#125;&quot;`;\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In this example, thanks to the useContext hook, each book can have information about which cabinet it is located in, and there is no need to receive it from the direct parent (book shelf).</p>\n<h3 id=\"useEffect-we-implement-lifecycle-functionality\"><a href=\"#useEffect-we-implement-lifecycle-functionality\" class=\"headerlink\" title=\"useEffect - we implement lifecycle functionality\"></a><a href=\"#useeffect-we-implement-lifecycle-functionality\"></a>useEffect - we implement lifecycle functionality</h3><p>Used to simulate the lifecycle, as well as the componentDidMount, componentDidUpdate, componentWillUnmount methods do when using the React structure on classes. A callback function is passed as arguments, which performs the necessary actions and an array with variables, the change of which must be monitored and callback when they are changed.</p>\n<h3 id=\"useRef-link-variables-directly-to-DOM\"><a href=\"#useRef-link-variables-directly-to-DOM\" class=\"headerlink\" title=\"useRef - link variables directly to DOM\"></a><a href=\"#useref-link-variables-directly-to-dom\"></a>useRef - link variables directly to DOM</h3><p>To access DOM elements directly in functional components, you must use useRef. In the example below, we bind the button to the buttonRef variable and can use this link in the callback function passed as the 1st argument in useRef.  </p>\n<pre><code>const MyButton = () =⟩ &#123;\n  const buttonRef = useRef();\n  useEffect(() =⟩ &#123;\n    console.log(buttonRef.current.innerHTML);\n  &#125;, []);\n  return ⟨button ref=&#123;ref&#125;⟩My button⟨/button⟩;\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h2 id=\"More-hooks\"><a href=\"#More-hooks\" class=\"headerlink\" title=\"More hooks!\"></a><a href=\"#more-hooks\"></a>More hooks!</h2><p>useReducer: allows you to store the status value regardless of nesting, is an analogue of Redux.</p>\n<p>useMemo: allows you to store the value and recalculate only when constraints change.</p>\n<p>useCallback: used to memoize functions, avoids unnecessary rendering and re-creation of functions. Very useful for optimization.</p>\n<h2 id=\"We’re-writing-our-own-hook\"><a href=\"#We’re-writing-our-own-hook\" class=\"headerlink\" title=\"We’re writing our own hook\"></a><a href=\"#were-writing-our-own-hook\"></a>We’re writing our own hook</h2><p>In essence, hooks are common functions, the name of which begins with the prefix “use”. They can use other hooks, accept arguments and return the result.</p>\n<p>It is convenient to create your own hooks when you need to learn the logic that is often used in different components of the application. It is necessary to remember about important restrictions for hooks: you can’t call inside conditional constructions and loops - this will cause an error in the application.</p>\n<p>Let’s look at an example from the official react documentation. It is interesting because it describes an example of creating a useReducer hook using an existing useState.</p>\n<p>Let’s say we work with a component that has a fairly developed state management logic depending on their type. In this case, useState is not very convenient to use with centralized state management logic and Redux-reducer is more suitable:  </p>\n<pre><code>function todosReducer(state, action) &#123;\n  switch (action.type) &#123;\n    case &#39;add&#39;:\n      return [...state, &#123;\n        text: action.text,\n        completed: false\n      &#125;];\n    // ... other actions ...\n    default:\n      return state;\n  &#125;\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Our hook will look like this (simplified):  </p>\n<pre><code>function useReducer(reducer, initialState) &#123;\n  const [state, setState] = useState(initialState)\n\n  function dispatch(action) &#123;\n    const nextState = reducer(state, action)\n    setState(nextState)\n  &#125;\n\n  return [state, dispatch]\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Here we accept as parameters - a reworker function responsible for the log of state change, initial state, and return the current state and function to change it. At the same time, we can very easily modify the logic of changing states by adding&#x2F;changing types in the todosReducer function. After that, it is convenient to use this logic in your component:  </p>\n<pre><code>function Todos() &#123;\n  const [todos, dispatch] = useReducer(todosReducer, [])\n  function handleAddClick(text) &#123;\n    dispatch(&#123; type: &#39;add&#39;, text &#125;)\n  &#125;\n  // ...\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Hooks can be used for a wide variety of purposes. Let’s look at an example of a hook for working with local browser storage:  </p>\n<pre><code>function getStorageValue(key, defaultValue) &#123;\n  const saved = localStorage.getItem(key);\n  const initial = !saved || saved === &#39;undefined&#39; ? null : JSON.parse(saved);\n  return initial || defaultValue;\n&#125;\nexport default  function useLocalStorage (key, defaultValue)&#123;\n  const [value, setValue] = useState(() =⟩ &#123;\n    return getStorageValue(key, defaultValue);\n  &#125;);\n\n  useEffect(() =⟩ &#123;\n    localStorage.setItem(key, JSON.stringify(value));\n  &#125;, [key, value]);\n\n  return [value, setValue];\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We defined the function of working with localStorage by writing our own logic for obtaining primary data from the repository. Then we created a hook that initializes the state using the result of this function. We also use useEffect to write to localStorage when changing the value of the key or value variables. In our component, we can use the hook in this way:  </p>\n<pre><code>const [storageData, setStorageData] = useLocalStorage(&#39;my-data&#39;);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>So, we managed to link data in the state with the data in the local browser storage.</p>\n<p>That’s all for now, I hope this article helped make understanding the topic of hooks easier for you!</p>\n<p>Thanks for reading. Leave your comments below and follow my <a href=\"https://github.com/Phantasm0009\">GitHub</a> &lt;3</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/react.webp\" alt=\"$cover\"></p>\n<p>The topic of hooks in React development is quite popular and has been analyzed more than once by various specialists. The purpose of our material is not so much to bring something new as to analyze a sufficiently important and relevant topic in the most accessible and understandable language, so that it does not cause difficulties even for beginners in the development of applications on React.</p>\n<p>First appeared in React version 16.8. The structure of applications based on the use of hooks was very pleasant to the community for its flexibility and simplicity, which allowed it to practically replace classes.</p>\n<h2 id=\"It’s-easier-with-hooks\"><a href=\"#It’s-easier-with-hooks\" class=\"headerlink\" title=\"It’s easier with hooks!\"></a><a href=\"#its-easier-with-hooks\"></a>It’s easier with hooks!</h2><p>Many newcomers were scared away by the classes with their cumbersomeness and less transparency. The mechanisms of state and reusable use looked much more complicated than in reality. The introduction of hooks has largely solved this problem and significantly increased the popularity of the library, which has been steadily growing for several years.</p>\n<h2 id=\"React’s-main-hooks-out-of-the-box\"><a href=\"#React’s-main-hooks-out-of-the-box\" class=\"headerlink\" title=\"React’s main hooks out of the box\"></a><a href=\"#reacts-main-hooks-out-of-the-box\"></a>React’s main hooks out of the box</h2><p>React out of the box contains several very important hooks.</p>\n<h3 id=\"useState-manage-the-state-in-functional-components\"><a href=\"#useState-manage-the-state-in-functional-components\" class=\"headerlink\" title=\"useState - manage the state in functional components\"></a><a href=\"#usestate-manage-the-state-in-functional-components\"></a>useState - manage the state in functional components</h3><p>One of the most important hooks is useState. Its name immediately makes it clear what it is used for - it is responsible for the state. This hook allows you to influence the state like the this.setState() method. First of all, let’s look at a simple example of its use:  </p>\n<pre><code>const MyComponent = () =&gt; &#123;\n  const [counter, setCounter] = useState(1);\n  return (\n    &lt;button onClick=&#123;() =&gt; setCounter(counter + 1)&#125;&gt;\n      +1 to the previous value\n    &lt;/button&gt;\n);\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In this example, after the functional element is declared, we call the useState method, passing it the default value:  </p>\n<pre><code>const [counter, setCounter] = useState(1);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>The method returns an array of 2 elements. The 1st element is a state variable, the 2nd element contains a function to change this state. The button is set to the onClick event, which allows you to change the state by increasing the value by 1 from the previous one:  </p>\n<pre><code>onClick=&#123;() =&gt; setCounter(counter + 1)&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h3 id=\"useContext-we-transfer-information-to-any-levels-of-nesting\"><a href=\"#useContext-we-transfer-information-to-any-levels-of-nesting\" class=\"headerlink\" title=\"useContext - we transfer information to any levels of nesting\"></a><a href=\"#usecontext-we-transfer-information-to-any-levels-of-nesting\"></a>useContext - we transfer information to any levels of nesting</h3><p>As a rule, the parent component shares data with children using props. However, there is a need to transfer this data not only to the nearest “children” of this component, but also to more nested components. Transmitting “relatives” along the entire chain is terribly inconvenient and can lead to mistakes. In this case, it is convenient to use useContext.  </p>\n<pre><code>import &#123;createContext, useContext&#125; from &quot;react&quot;;\n\nconst MyContext = createContext(&quot;no data&quot;);\n\nconst Bookcase = () =⟩ &#123;\n  return (\n    ⟨MyContext.Provider value=&quot;шкаф #1 &quot;⟩\n      ⟨Bookshelf /⟩\n    ⟨/MyContext.Provider⟩\n  );\n&#125;;\n\nconst Bookshelf = () =⟩ &#123;\n  return ⟨Book /⟩;\n&#125;;\n\nconst Book = () =⟩ &#123;\n  const context = useContext(MyContext);\n  return `Book in is &quot;$&#123;context&#125;&quot;`;\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>In this example, thanks to the useContext hook, each book can have information about which cabinet it is located in, and there is no need to receive it from the direct parent (book shelf).</p>\n<h3 id=\"useEffect-we-implement-lifecycle-functionality\"><a href=\"#useEffect-we-implement-lifecycle-functionality\" class=\"headerlink\" title=\"useEffect - we implement lifecycle functionality\"></a><a href=\"#useeffect-we-implement-lifecycle-functionality\"></a>useEffect - we implement lifecycle functionality</h3><p>Used to simulate the lifecycle, as well as the componentDidMount, componentDidUpdate, componentWillUnmount methods do when using the React structure on classes. A callback function is passed as arguments, which performs the necessary actions and an array with variables, the change of which must be monitored and callback when they are changed.</p>\n<h3 id=\"useRef-link-variables-directly-to-DOM\"><a href=\"#useRef-link-variables-directly-to-DOM\" class=\"headerlink\" title=\"useRef - link variables directly to DOM\"></a><a href=\"#useref-link-variables-directly-to-dom\"></a>useRef - link variables directly to DOM</h3><p>To access DOM elements directly in functional components, you must use useRef. In the example below, we bind the button to the buttonRef variable and can use this link in the callback function passed as the 1st argument in useRef.  </p>\n<pre><code>const MyButton = () =⟩ &#123;\n  const buttonRef = useRef();\n  useEffect(() =⟩ &#123;\n    console.log(buttonRef.current.innerHTML);\n  &#125;, []);\n  return ⟨button ref=&#123;ref&#125;⟩My button⟨/button⟩;\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<h2 id=\"More-hooks\"><a href=\"#More-hooks\" class=\"headerlink\" title=\"More hooks!\"></a><a href=\"#more-hooks\"></a>More hooks!</h2><p>useReducer: allows you to store the status value regardless of nesting, is an analogue of Redux.</p>\n<p>useMemo: allows you to store the value and recalculate only when constraints change.</p>\n<p>useCallback: used to memoize functions, avoids unnecessary rendering and re-creation of functions. Very useful for optimization.</p>\n<h2 id=\"We’re-writing-our-own-hook\"><a href=\"#We’re-writing-our-own-hook\" class=\"headerlink\" title=\"We’re writing our own hook\"></a><a href=\"#were-writing-our-own-hook\"></a>We’re writing our own hook</h2><p>In essence, hooks are common functions, the name of which begins with the prefix “use”. They can use other hooks, accept arguments and return the result.</p>\n<p>It is convenient to create your own hooks when you need to learn the logic that is often used in different components of the application. It is necessary to remember about important restrictions for hooks: you can’t call inside conditional constructions and loops - this will cause an error in the application.</p>\n<p>Let’s look at an example from the official react documentation. It is interesting because it describes an example of creating a useReducer hook using an existing useState.</p>\n<p>Let’s say we work with a component that has a fairly developed state management logic depending on their type. In this case, useState is not very convenient to use with centralized state management logic and Redux-reducer is more suitable:  </p>\n<pre><code>function todosReducer(state, action) &#123;\n  switch (action.type) &#123;\n    case &#39;add&#39;:\n      return [...state, &#123;\n        text: action.text,\n        completed: false\n      &#125;];\n    // ... other actions ...\n    default:\n      return state;\n  &#125;\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Our hook will look like this (simplified):  </p>\n<pre><code>function useReducer(reducer, initialState) &#123;\n  const [state, setState] = useState(initialState)\n\n  function dispatch(action) &#123;\n    const nextState = reducer(state, action)\n    setState(nextState)\n  &#125;\n\n  return [state, dispatch]\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Here we accept as parameters - a reworker function responsible for the log of state change, initial state, and return the current state and function to change it. At the same time, we can very easily modify the logic of changing states by adding&#x2F;changing types in the todosReducer function. After that, it is convenient to use this logic in your component:  </p>\n<pre><code>function Todos() &#123;\n  const [todos, dispatch] = useReducer(todosReducer, [])\n  function handleAddClick(text) &#123;\n    dispatch(&#123; type: &#39;add&#39;, text &#125;)\n  &#125;\n  // ...\n&#125;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>Hooks can be used for a wide variety of purposes. Let’s look at an example of a hook for working with local browser storage:  </p>\n<pre><code>function getStorageValue(key, defaultValue) &#123;\n  const saved = localStorage.getItem(key);\n  const initial = !saved || saved === &#39;undefined&#39; ? null : JSON.parse(saved);\n  return initial || defaultValue;\n&#125;\nexport default  function useLocalStorage (key, defaultValue)&#123;\n  const [value, setValue] = useState(() =⟩ &#123;\n    return getStorageValue(key, defaultValue);\n  &#125;);\n\n  useEffect(() =⟩ &#123;\n    localStorage.setItem(key, JSON.stringify(value));\n  &#125;, [key, value]);\n\n  return [value, setValue];\n&#125;;\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>We defined the function of working with localStorage by writing our own logic for obtaining primary data from the repository. Then we created a hook that initializes the state using the result of this function. We also use useEffect to write to localStorage when changing the value of the key or value variables. In our component, we can use the hook in this way:  </p>\n<pre><code>const [storageData, setStorageData] = useLocalStorage(&#39;my-data&#39;);\n</code></pre>\n<p>Enter fullscreen mode Exit fullscreen mode</p>\n<p>So, we managed to link data in the state with the data in the local browser storage.</p>\n<p>That’s all for now, I hope this article helped make understanding the topic of hooks easier for you!</p>\n<p>Thanks for reading. Leave your comments below and follow my <a href=\"https://github.com/Phantasm0009\">GitHub</a> &lt;3</p>\n"},{"title":"VueJS vs ReactJS","date":"2022-12-16T11:45:36.000Z","_content":"![$cover](images/vue.webp)\n**VueJS and ReactJS** are both popular JavaScript libraries for building user interfaces. They are both open-source and are maintained by a large community of developers.\n\n**Here are some key differences between the two:**\n\n1)VueJS is a progressive framework, which means it can be used for building small, simple apps or large, complex ones. React, on the other hand, is a declarative library, which is better suited for building large-scale applications.\n\n2)VueJS uses a component-based architecture, which makes it easy to reuse components and build large, scalable applications. React, on the other hand, uses a virtual DOM (Document Object Model) that allows for efficient updates and rendering of components.\n\n3)VueJS has a more straightforward and easier to learn syntax, which makes it a good choice for developers who are new to JavaScript. React, on the other hand, has a steep learning curve and requires more advanced knowledge of JavaScript.\n\nALso,VueJS and ReactJS are both popular JavaScript libraries for building user interfaces. They are both open-source and maintained by Facebook.\n\nVueJS was created by Evan You, a former Google employee, in 2014. It is a progressive framework, which means it can be used to build both small and large-scale applications. It is known for its simplicity, flexibility, and intuitive API.\n\nReactJS was created by Facebook in 2013. It is a declarative, efficient, and flexible JavaScript library for building user interfaces. It is used by many large companies, including Facebook, Netflix, and Airbnb.\n\nWhen it comes to choosing between VueJS and ReactJS, it ultimately comes down to personal preference and the specific needs of your project. Both libraries have their own strengths and weaknesses, and both are widely used and well-supported by a large and active community.\n\nIf you're just starting out with JavaScript and are looking for a framework that is easy to learn and use, VueJS may be a good choice. If you're working on a large-scale project with a lot of data, ReactJS may be a better option because of its performance and scalability. Ultimately, the best choice will depend on your specific needs and requirements.","source":"_posts/vue-js.md","raw":"---\ntitle: VueJS vs ReactJS\ndate: 2022-12-16 06:45:36\ntags: \n    - Vue.js\n    - React\n---\n![$cover](images/vue.webp)\n**VueJS and ReactJS** are both popular JavaScript libraries for building user interfaces. They are both open-source and are maintained by a large community of developers.\n\n**Here are some key differences between the two:**\n\n1)VueJS is a progressive framework, which means it can be used for building small, simple apps or large, complex ones. React, on the other hand, is a declarative library, which is better suited for building large-scale applications.\n\n2)VueJS uses a component-based architecture, which makes it easy to reuse components and build large, scalable applications. React, on the other hand, uses a virtual DOM (Document Object Model) that allows for efficient updates and rendering of components.\n\n3)VueJS has a more straightforward and easier to learn syntax, which makes it a good choice for developers who are new to JavaScript. React, on the other hand, has a steep learning curve and requires more advanced knowledge of JavaScript.\n\nALso,VueJS and ReactJS are both popular JavaScript libraries for building user interfaces. They are both open-source and maintained by Facebook.\n\nVueJS was created by Evan You, a former Google employee, in 2014. It is a progressive framework, which means it can be used to build both small and large-scale applications. It is known for its simplicity, flexibility, and intuitive API.\n\nReactJS was created by Facebook in 2013. It is a declarative, efficient, and flexible JavaScript library for building user interfaces. It is used by many large companies, including Facebook, Netflix, and Airbnb.\n\nWhen it comes to choosing between VueJS and ReactJS, it ultimately comes down to personal preference and the specific needs of your project. Both libraries have their own strengths and weaknesses, and both are widely used and well-supported by a large and active community.\n\nIf you're just starting out with JavaScript and are looking for a framework that is easy to learn and use, VueJS may be a good choice. If you're working on a large-scale project with a lot of data, ReactJS may be a better option because of its performance and scalability. Ultimately, the best choice will depend on your specific needs and requirements.","slug":"vue-js","published":1,"updated":"2022-12-22T15:00:19.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irq000ctwlhcx6i7k7h","content":"<p><img src=\"/images/vue.webp\" alt=\"$cover\"><br><strong>VueJS and ReactJS</strong> are both popular JavaScript libraries for building user interfaces. They are both open-source and are maintained by a large community of developers.</p>\n<p><strong>Here are some key differences between the two:</strong></p>\n<p>1)VueJS is a progressive framework, which means it can be used for building small, simple apps or large, complex ones. React, on the other hand, is a declarative library, which is better suited for building large-scale applications.</p>\n<p>2)VueJS uses a component-based architecture, which makes it easy to reuse components and build large, scalable applications. React, on the other hand, uses a virtual DOM (Document Object Model) that allows for efficient updates and rendering of components.</p>\n<p>3)VueJS has a more straightforward and easier to learn syntax, which makes it a good choice for developers who are new to JavaScript. React, on the other hand, has a steep learning curve and requires more advanced knowledge of JavaScript.</p>\n<p>ALso,VueJS and ReactJS are both popular JavaScript libraries for building user interfaces. They are both open-source and maintained by Facebook.</p>\n<p>VueJS was created by Evan You, a former Google employee, in 2014. It is a progressive framework, which means it can be used to build both small and large-scale applications. It is known for its simplicity, flexibility, and intuitive API.</p>\n<p>ReactJS was created by Facebook in 2013. It is a declarative, efficient, and flexible JavaScript library for building user interfaces. It is used by many large companies, including Facebook, Netflix, and Airbnb.</p>\n<p>When it comes to choosing between VueJS and ReactJS, it ultimately comes down to personal preference and the specific needs of your project. Both libraries have their own strengths and weaknesses, and both are widely used and well-supported by a large and active community.</p>\n<p>If you’re just starting out with JavaScript and are looking for a framework that is easy to learn and use, VueJS may be a good choice. If you’re working on a large-scale project with a lot of data, ReactJS may be a better option because of its performance and scalability. Ultimately, the best choice will depend on your specific needs and requirements.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/vue.webp\" alt=\"$cover\"><br><strong>VueJS and ReactJS</strong> are both popular JavaScript libraries for building user interfaces. They are both open-source and are maintained by a large community of developers.</p>\n<p><strong>Here are some key differences between the two:</strong></p>\n<p>1)VueJS is a progressive framework, which means it can be used for building small, simple apps or large, complex ones. React, on the other hand, is a declarative library, which is better suited for building large-scale applications.</p>\n<p>2)VueJS uses a component-based architecture, which makes it easy to reuse components and build large, scalable applications. React, on the other hand, uses a virtual DOM (Document Object Model) that allows for efficient updates and rendering of components.</p>\n<p>3)VueJS has a more straightforward and easier to learn syntax, which makes it a good choice for developers who are new to JavaScript. React, on the other hand, has a steep learning curve and requires more advanced knowledge of JavaScript.</p>\n<p>ALso,VueJS and ReactJS are both popular JavaScript libraries for building user interfaces. They are both open-source and maintained by Facebook.</p>\n<p>VueJS was created by Evan You, a former Google employee, in 2014. It is a progressive framework, which means it can be used to build both small and large-scale applications. It is known for its simplicity, flexibility, and intuitive API.</p>\n<p>ReactJS was created by Facebook in 2013. It is a declarative, efficient, and flexible JavaScript library for building user interfaces. It is used by many large companies, including Facebook, Netflix, and Airbnb.</p>\n<p>When it comes to choosing between VueJS and ReactJS, it ultimately comes down to personal preference and the specific needs of your project. Both libraries have their own strengths and weaknesses, and both are widely used and well-supported by a large and active community.</p>\n<p>If you’re just starting out with JavaScript and are looking for a framework that is easy to learn and use, VueJS may be a good choice. If you’re working on a large-scale project with a lot of data, ReactJS may be a better option because of its performance and scalability. Ultimately, the best choice will depend on your specific needs and requirements.</p>\n"},{"title":"How to Build a Todo App With React and Firebase Database","date":"2022-12-17T01:00:19.000Z","_content":"[How to build a todo app with React and Firebase Database (3 Part Series)](/rossanodan/series/1157)\n---------------------------------------------------------------------------------------------------\n\n[1 How to build a todo app with React and Firebase Database](/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-1kik \"Published Jun 11 '19\") [2 How to build a todo app with React and Firebase Database](/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-coh \"Published Jun 11 '19\") [3 How to build a todo app with React and Firebase Database](/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-3gmh \"Published Jun 28 '19\")\n\n[](#day-1)Day 1\n---------------\n\n📅 11-06-2019  \n🕐 1h  \n🏁 Initial setup and getting ready\n\n[](#initial-setup)Initial setup\n===============================\n\nI’m going to use `create-react-app` tool to scaffold the project folder. It’s a tool provided by Facebook that allow to easy scaffold a pre-configured starter project.\n\n    npx create-react-app todo-app\n    \n\nThe initial project consists of\n\n*   `node_modules`: contains all necessary dependencies. It’s generated scaffolding the app with `create-react-app` tool (there’s a `npm install` into it)\n*   `public`: contains few files like the `index.html`, the `application favicon` and a `manifest` that contains few basic application settings\n*   `src`: contains the code\n*   `.gitignore`\n*   `package.json`: there are all the project information like the version, the author and mainly the dependencies the application needs to work properly\n*   `yarn.lock`: contains all the dependencies Yarn needs with relative versions\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png)\n\nTo run the starter basic application it’s enough to do\n\n    cd todo-app\n    npm start\n    \n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png)\n\n`npm start` is one of several pre-configured commands I’m going to use to develop this application. Other commands are:\n\n*   `npm test`\n*   `npm build`\n*   `npm eject` (stay away from it for now)\n\n[](#get-ready-for-components)Get ready for components\n=====================================================\n\nIn order to work with a sustainable and scalable structure, I like to keep things separated. I’m going to create two folders for components.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png)\n\nThese two folders will contains (surprise) components!  \nThe only difference between them is that a **container** is a component that **manages the application state** so it’s a **stateful component**. Other components are **stateless components**.\n\n[](#the-main-component-raw-ltapp-gt-endraw-)The main component `<App />`\n========================================================================\n\nLet’s create the first component.  \nI’m going go to move the `App.js`, `App.test.js` and `App.css` into their own folder `./containers/App/`:\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png)\n\n    // App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            Placeholder\n          </div>\n        );\n      }\n    }\n    \n    export default App;\n    \n\n    /* App.css */\n    .App {\n      text-align: center;\n    }\n    \n\nNo changes to the `App.test.js` at the moment.\n\nUpdate `index.js` - importing App component - because files location is changed and delete useless files like `logo.svg`.\n\n[](#the-raw-lttodo-gt-endraw-component)The `<Todo />` component\n===============================================================\n\nLet’s create the `<Todo />` component into the `./components` folder. Create `Todo.js`, `Todo.test.js` and `Todo.css`.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png)\n\n    // Todo.js\n    import React from 'react';\n    import './Todo.css';\n    \n    const todo = () => (\n        <div className=\"Todo\">\n            <p>Placeholder</p>\n        </div>\n    )\n    \n    export default todo;\n    \n\n    /* Todo.css */\n    .Todo {} /* Empty for now */\n    \n\n`Todo.test.js` is similar to `App.test.js`:\n\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import Todo from './Todo';\n    \n    it('renders without crashing', () => {\n      const div = document.createElement('div');\n      ReactDOM.render(<Todo />, div);\n      ReactDOM.unmountComponentAtNode(div);\n    });\n    \n\nNow I can use the `<Todo />` component into the `<App />` component, doing:\n\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    import Todo from '../../components/Todo/Todo';\n    \n    class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            <Todo />\n          </div>\n        );\n      }\n    }\n    \n    export default App;\n    \n    \n\nCheck out the code here  \n\n![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--qF2jUiUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-6a5bca60a4ebf959a6df7f08217acd07ac2bc285164fae041eacb8a148b1bab9.svg) [rossanodan](https://github.com/Phantasm0009) / [todo-app](https://github.com/Phantasm0009/TodoList)\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n### Simple to-do app built with React.\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\nHow to run locally\n------------------\n\n    git clone https://github.com/Phantasm0009/TodoList.git\n    cd todo-app\n    npm install\n    npm start\n    \n\n  \n\n[View on GitHub](https://github.com/Phantasm0009/TodoList)\n\n  \n\n  \n\n---------------------------------------------------------------------------------------------------\n","source":"_posts/todo.md","raw":"---\ntitle: How to Build a Todo App With React and Firebase Database\ndate: 2022-12-16 20:00:19\ntags:\n    - React\n    - Firebase\n---\n[How to build a todo app with React and Firebase Database (3 Part Series)](/rossanodan/series/1157)\n---------------------------------------------------------------------------------------------------\n\n[1 How to build a todo app with React and Firebase Database](/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-1kik \"Published Jun 11 '19\") [2 How to build a todo app with React and Firebase Database](/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-coh \"Published Jun 11 '19\") [3 How to build a todo app with React and Firebase Database](/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-3gmh \"Published Jun 28 '19\")\n\n[](#day-1)Day 1\n---------------\n\n📅 11-06-2019  \n🕐 1h  \n🏁 Initial setup and getting ready\n\n[](#initial-setup)Initial setup\n===============================\n\nI’m going to use `create-react-app` tool to scaffold the project folder. It’s a tool provided by Facebook that allow to easy scaffold a pre-configured starter project.\n\n    npx create-react-app todo-app\n    \n\nThe initial project consists of\n\n*   `node_modules`: contains all necessary dependencies. It’s generated scaffolding the app with `create-react-app` tool (there’s a `npm install` into it)\n*   `public`: contains few files like the `index.html`, the `application favicon` and a `manifest` that contains few basic application settings\n*   `src`: contains the code\n*   `.gitignore`\n*   `package.json`: there are all the project information like the version, the author and mainly the dependencies the application needs to work properly\n*   `yarn.lock`: contains all the dependencies Yarn needs with relative versions\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png)\n\nTo run the starter basic application it’s enough to do\n\n    cd todo-app\n    npm start\n    \n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png)\n\n`npm start` is one of several pre-configured commands I’m going to use to develop this application. Other commands are:\n\n*   `npm test`\n*   `npm build`\n*   `npm eject` (stay away from it for now)\n\n[](#get-ready-for-components)Get ready for components\n=====================================================\n\nIn order to work with a sustainable and scalable structure, I like to keep things separated. I’m going to create two folders for components.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png)\n\nThese two folders will contains (surprise) components!  \nThe only difference between them is that a **container** is a component that **manages the application state** so it’s a **stateful component**. Other components are **stateless components**.\n\n[](#the-main-component-raw-ltapp-gt-endraw-)The main component `<App />`\n========================================================================\n\nLet’s create the first component.  \nI’m going go to move the `App.js`, `App.test.js` and `App.css` into their own folder `./containers/App/`:\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png)\n\n    // App.js\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            Placeholder\n          </div>\n        );\n      }\n    }\n    \n    export default App;\n    \n\n    /* App.css */\n    .App {\n      text-align: center;\n    }\n    \n\nNo changes to the `App.test.js` at the moment.\n\nUpdate `index.js` - importing App component - because files location is changed and delete useless files like `logo.svg`.\n\n[](#the-raw-lttodo-gt-endraw-component)The `<Todo />` component\n===============================================================\n\nLet’s create the `<Todo />` component into the `./components` folder. Create `Todo.js`, `Todo.test.js` and `Todo.css`.\n\n[![](https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png)](https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png)\n\n    // Todo.js\n    import React from 'react';\n    import './Todo.css';\n    \n    const todo = () => (\n        <div className=\"Todo\">\n            <p>Placeholder</p>\n        </div>\n    )\n    \n    export default todo;\n    \n\n    /* Todo.css */\n    .Todo {} /* Empty for now */\n    \n\n`Todo.test.js` is similar to `App.test.js`:\n\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import Todo from './Todo';\n    \n    it('renders without crashing', () => {\n      const div = document.createElement('div');\n      ReactDOM.render(<Todo />, div);\n      ReactDOM.unmountComponentAtNode(div);\n    });\n    \n\nNow I can use the `<Todo />` component into the `<App />` component, doing:\n\n    import React, { Component } from 'react';\n    import './App.css';\n    \n    import Todo from '../../components/Todo/Todo';\n    \n    class App extends Component {\n      render() {\n        return (\n          <div className=\"App\">\n            <Todo />\n          </div>\n        );\n      }\n    }\n    \n    export default App;\n    \n    \n\nCheck out the code here  \n\n![GitHub logo](https://res.cloudinary.com/practicaldev/image/fetch/s--qF2jUiUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-6a5bca60a4ebf959a6df7f08217acd07ac2bc285164fae041eacb8a148b1bab9.svg) [rossanodan](https://github.com/Phantasm0009) / [todo-app](https://github.com/Phantasm0009/TodoList)\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n### Simple to-do app built with React.\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\nHow to run locally\n------------------\n\n    git clone https://github.com/Phantasm0009/TodoList.git\n    cd todo-app\n    npm install\n    npm start\n    \n\n  \n\n[View on GitHub](https://github.com/Phantasm0009/TodoList)\n\n  \n\n  \n\n---------------------------------------------------------------------------------------------------\n","slug":"todo","published":1,"updated":"2022-12-22T15:14:00.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clbz93irs000ftwlh6gc2bzo0","content":"<h2 id=\"How-to-build-a-todo-app-with-React-and-Firebase-Database-3-Part-Series\"><a href=\"#How-to-build-a-todo-app-with-React-and-Firebase-Database-3-Part-Series\" class=\"headerlink\" title=\"How to build a todo app with React and Firebase Database (3 Part Series)\"></a><a href=\"/rossanodan/series/1157\">How to build a todo app with React and Firebase Database (3 Part Series)</a></h2><p><a href=\"/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-1kik\" title=\"Published Jun 11 &#39;19\">1 How to build a todo app with React and Firebase Database</a> <a href=\"/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-coh\" title=\"Published Jun 11 &#39;19\">2 How to build a todo app with React and Firebase Database</a> <a href=\"/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-3gmh\" title=\"Published Jun 28 &#39;19\">3 How to build a todo app with React and Firebase Database</a></p>\n<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a><a href=\"#day-1\"></a>Day 1</h2><p>📅 11-06-2019<br>🕐 1h<br>🏁 Initial setup and getting ready</p>\n<h1 id=\"Initial-setup\"><a href=\"#Initial-setup\" class=\"headerlink\" title=\"Initial setup\"></a><a href=\"#initial-setup\"></a>Initial setup</h1><p>I’m going to use <code>create-react-app</code> tool to scaffold the project folder. It’s a tool provided by Facebook that allow to easy scaffold a pre-configured starter project.</p>\n<pre><code>npx create-react-app todo-app\n</code></pre>\n<p>The initial project consists of</p>\n<ul>\n<li><code>node_modules</code>: contains all necessary dependencies. It’s generated scaffolding the app with <code>create-react-app</code> tool (there’s a <code>npm install</code> into it)</li>\n<li><code>public</code>: contains few files like the <code>index.html</code>, the <code>application favicon</code> and a <code>manifest</code> that contains few basic application settings</li>\n<li><code>src</code>: contains the code</li>\n<li><code>.gitignore</code></li>\n<li><code>package.json</code>: there are all the project information like the version, the author and mainly the dependencies the application needs to work properly</li>\n<li><code>yarn.lock</code>: contains all the dependencies Yarn needs with relative versions</li>\n</ul>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png\"></a></p>\n<p>To run the starter basic application it’s enough to do</p>\n<pre><code>cd todo-app\nnpm start\n</code></pre>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png\"></a></p>\n<p><code>npm start</code> is one of several pre-configured commands I’m going to use to develop this application. Other commands are:</p>\n<ul>\n<li><code>npm test</code></li>\n<li><code>npm build</code></li>\n<li><code>npm eject</code> (stay away from it for now)</li>\n</ul>\n<h1 id=\"Get-ready-for-components\"><a href=\"#Get-ready-for-components\" class=\"headerlink\" title=\"Get ready for components\"></a><a href=\"#get-ready-for-components\"></a>Get ready for components</h1><p>In order to work with a sustainable and scalable structure, I like to keep things separated. I’m going to create two folders for components.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png\"></a></p>\n<p>These two folders will contains (surprise) components!<br>The only difference between them is that a <strong>container</strong> is a component that <strong>manages the application state</strong> so it’s a <strong>stateful component</strong>. Other components are <strong>stateless components</strong>.</p>\n<h1 id=\"The-main-component-lt-App-gt\"><a href=\"#The-main-component-lt-App-gt\" class=\"headerlink\" title=\"The main component &lt;App /&gt;\"></a><a href=\"#the-main-component-raw-ltapp-gt-endraw-\"></a>The main component <code>&lt;App /&gt;</code></h1><p>Let’s create the first component.<br>I’m going go to move the <code>App.js</code>, <code>App.test.js</code> and <code>App.css</code> into their own folder <code>./containers/App/</code>:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png\"></a></p>\n<pre><code>// App.js\nimport React, &#123; Component &#125; from &#39;react&#39;;\nimport &#39;./App.css&#39;;\n\nclass App extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div className=&quot;App&quot;&gt;\n        Placeholder\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default App;\n\n\n/* App.css */\n.App &#123;\n  text-align: center;\n&#125;\n</code></pre>\n<p>No changes to the <code>App.test.js</code> at the moment.</p>\n<p>Update <code>index.js</code> - importing App component - because files location is changed and delete useless files like <code>logo.svg</code>.</p>\n<h1 id=\"The-lt-Todo-gt-component\"><a href=\"#The-lt-Todo-gt-component\" class=\"headerlink\" title=\"The &lt;Todo /&gt; component\"></a><a href=\"#the-raw-lttodo-gt-endraw-component\"></a>The <code>&lt;Todo /&gt;</code> component</h1><p>Let’s create the <code>&lt;Todo /&gt;</code> component into the <code>./components</code> folder. Create <code>Todo.js</code>, <code>Todo.test.js</code> and <code>Todo.css</code>.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png\"></a></p>\n<pre><code>// Todo.js\nimport React from &#39;react&#39;;\nimport &#39;./Todo.css&#39;;\n\nconst todo = () =&gt; (\n    &lt;div className=&quot;Todo&quot;&gt;\n        &lt;p&gt;Placeholder&lt;/p&gt;\n    &lt;/div&gt;\n)\n\nexport default todo;\n\n\n/* Todo.css */\n.Todo &#123;&#125; /* Empty for now */\n</code></pre>\n<p><code>Todo.test.js</code> is similar to <code>App.test.js</code>:</p>\n<pre><code>import React from &#39;react&#39;;\nimport ReactDOM from &#39;react-dom&#39;;\nimport Todo from &#39;./Todo&#39;;\n\nit(&#39;renders without crashing&#39;, () =&gt; &#123;\n  const div = document.createElement(&#39;div&#39;);\n  ReactDOM.render(&lt;Todo /&gt;, div);\n  ReactDOM.unmountComponentAtNode(div);\n&#125;);\n</code></pre>\n<p>Now I can use the <code>&lt;Todo /&gt;</code> component into the <code>&lt;App /&gt;</code> component, doing:</p>\n<pre><code>import React, &#123; Component &#125; from &#39;react&#39;;\nimport &#39;./App.css&#39;;\n\nimport Todo from &#39;../../components/Todo/Todo&#39;;\n\nclass App extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div className=&quot;App&quot;&gt;\n        &lt;Todo /&gt;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default App;\n</code></pre>\n<p>Check out the code here  </p>\n<h2 id=\"rossanodan-x2F-todo-app\"><a href=\"#rossanodan-x2F-todo-app\" class=\"headerlink\" title=\" rossanodan &#x2F; todo-app\"></a><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qF2jUiUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-6a5bca60a4ebf959a6df7f08217acd07ac2bc285164fae041eacb8a148b1bab9.svg\" alt=\"GitHub logo\"> <a href=\"https://github.com/Phantasm0009\">rossanodan</a> &#x2F; <a href=\"https://github.com/Phantasm0009/TodoList\">todo-app</a></h2><h3 id=\"Simple-to-do-app-built-with-React\"><a href=\"#Simple-to-do-app-built-with-React\" class=\"headerlink\" title=\"Simple to-do app built with React.\"></a>Simple to-do app built with React.</h3><p>This project was bootstrapped with <a href=\"https://github.com/facebook/create-react-app\">Create React App</a>.</p>\n<h2 id=\"How-to-run-locally\"><a href=\"#How-to-run-locally\" class=\"headerlink\" title=\"How to run locally\"></a>How to run locally</h2><pre><code>git clone https://github.com/Phantasm0009/TodoList.git\ncd todo-app\nnpm install\nnpm start\n</code></pre>\n<p><a href=\"https://github.com/Phantasm0009/TodoList\">View on GitHub</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"How-to-build-a-todo-app-with-React-and-Firebase-Database-3-Part-Series\"><a href=\"#How-to-build-a-todo-app-with-React-and-Firebase-Database-3-Part-Series\" class=\"headerlink\" title=\"How to build a todo app with React and Firebase Database (3 Part Series)\"></a><a href=\"/rossanodan/series/1157\">How to build a todo app with React and Firebase Database (3 Part Series)</a></h2><p><a href=\"/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-1kik\" title=\"Published Jun 11 &#39;19\">1 How to build a todo app with React and Firebase Database</a> <a href=\"/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-coh\" title=\"Published Jun 11 &#39;19\">2 How to build a todo app with React and Firebase Database</a> <a href=\"/rossanodan/how-to-build-a-todo-app-with-react-and-firebase-database-3gmh\" title=\"Published Jun 28 &#39;19\">3 How to build a todo app with React and Firebase Database</a></p>\n<h2 id=\"Day-1\"><a href=\"#Day-1\" class=\"headerlink\" title=\"Day 1\"></a><a href=\"#day-1\"></a>Day 1</h2><p>📅 11-06-2019<br>🕐 1h<br>🏁 Initial setup and getting ready</p>\n<h1 id=\"Initial-setup\"><a href=\"#Initial-setup\" class=\"headerlink\" title=\"Initial setup\"></a><a href=\"#initial-setup\"></a>Initial setup</h1><p>I’m going to use <code>create-react-app</code> tool to scaffold the project folder. It’s a tool provided by Facebook that allow to easy scaffold a pre-configured starter project.</p>\n<pre><code>npx create-react-app todo-app\n</code></pre>\n<p>The initial project consists of</p>\n<ul>\n<li><code>node_modules</code>: contains all necessary dependencies. It’s generated scaffolding the app with <code>create-react-app</code> tool (there’s a <code>npm install</code> into it)</li>\n<li><code>public</code>: contains few files like the <code>index.html</code>, the <code>application favicon</code> and a <code>manifest</code> that contains few basic application settings</li>\n<li><code>src</code>: contains the code</li>\n<li><code>.gitignore</code></li>\n<li><code>package.json</code>: there are all the project information like the version, the author and mainly the dependencies the application needs to work properly</li>\n<li><code>yarn.lock</code>: contains all the dependencies Yarn needs with relative versions</li>\n</ul>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--8RpZVUt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ac9cpb4bpprx03cm8euv.png\"></a></p>\n<p>To run the starter basic application it’s enough to do</p>\n<pre><code>cd todo-app\nnpm start\n</code></pre>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SAZJSz6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/r7rniixpbddwys3hx554.png\"></a></p>\n<p><code>npm start</code> is one of several pre-configured commands I’m going to use to develop this application. Other commands are:</p>\n<ul>\n<li><code>npm test</code></li>\n<li><code>npm build</code></li>\n<li><code>npm eject</code> (stay away from it for now)</li>\n</ul>\n<h1 id=\"Get-ready-for-components\"><a href=\"#Get-ready-for-components\" class=\"headerlink\" title=\"Get ready for components\"></a><a href=\"#get-ready-for-components\"></a>Get ready for components</h1><p>In order to work with a sustainable and scalable structure, I like to keep things separated. I’m going to create two folders for components.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TvKQxUZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/ty6xjeagmabliffuwtvi.png\"></a></p>\n<p>These two folders will contains (surprise) components!<br>The only difference between them is that a <strong>container</strong> is a component that <strong>manages the application state</strong> so it’s a <strong>stateful component</strong>. Other components are <strong>stateless components</strong>.</p>\n<h1 id=\"The-main-component-lt-App-gt\"><a href=\"#The-main-component-lt-App-gt\" class=\"headerlink\" title=\"The main component &lt;App /&gt;\"></a><a href=\"#the-main-component-raw-ltapp-gt-endraw-\"></a>The main component <code>&lt;App /&gt;</code></h1><p>Let’s create the first component.<br>I’m going go to move the <code>App.js</code>, <code>App.test.js</code> and <code>App.css</code> into their own folder <code>./containers/App/</code>:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--HAJq00-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/hm7jg5fkc8x2vifhr40h.png\"></a></p>\n<pre><code>// App.js\nimport React, &#123; Component &#125; from &#39;react&#39;;\nimport &#39;./App.css&#39;;\n\nclass App extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div className=&quot;App&quot;&gt;\n        Placeholder\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default App;\n\n\n/* App.css */\n.App &#123;\n  text-align: center;\n&#125;\n</code></pre>\n<p>No changes to the <code>App.test.js</code> at the moment.</p>\n<p>Update <code>index.js</code> - importing App component - because files location is changed and delete useless files like <code>logo.svg</code>.</p>\n<h1 id=\"The-lt-Todo-gt-component\"><a href=\"#The-lt-Todo-gt-component\" class=\"headerlink\" title=\"The &lt;Todo /&gt; component\"></a><a href=\"#the-raw-lttodo-gt-endraw-component\"></a>The <code>&lt;Todo /&gt;</code> component</h1><p>Let’s create the <code>&lt;Todo /&gt;</code> component into the <code>./components</code> folder. Create <code>Todo.js</code>, <code>Todo.test.js</code> and <code>Todo.css</code>.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJb-pF1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/1z32qe9hv618920cfdwx.png\"></a></p>\n<pre><code>// Todo.js\nimport React from &#39;react&#39;;\nimport &#39;./Todo.css&#39;;\n\nconst todo = () =&gt; (\n    &lt;div className=&quot;Todo&quot;&gt;\n        &lt;p&gt;Placeholder&lt;/p&gt;\n    &lt;/div&gt;\n)\n\nexport default todo;\n\n\n/* Todo.css */\n.Todo &#123;&#125; /* Empty for now */\n</code></pre>\n<p><code>Todo.test.js</code> is similar to <code>App.test.js</code>:</p>\n<pre><code>import React from &#39;react&#39;;\nimport ReactDOM from &#39;react-dom&#39;;\nimport Todo from &#39;./Todo&#39;;\n\nit(&#39;renders without crashing&#39;, () =&gt; &#123;\n  const div = document.createElement(&#39;div&#39;);\n  ReactDOM.render(&lt;Todo /&gt;, div);\n  ReactDOM.unmountComponentAtNode(div);\n&#125;);\n</code></pre>\n<p>Now I can use the <code>&lt;Todo /&gt;</code> component into the <code>&lt;App /&gt;</code> component, doing:</p>\n<pre><code>import React, &#123; Component &#125; from &#39;react&#39;;\nimport &#39;./App.css&#39;;\n\nimport Todo from &#39;../../components/Todo/Todo&#39;;\n\nclass App extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div className=&quot;App&quot;&gt;\n        &lt;Todo /&gt;\n      &lt;/div&gt;\n    );\n  &#125;\n&#125;\n\nexport default App;\n</code></pre>\n<p>Check out the code here  </p>\n<h2 id=\"rossanodan-x2F-todo-app\"><a href=\"#rossanodan-x2F-todo-app\" class=\"headerlink\" title=\" rossanodan &#x2F; todo-app\"></a><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--qF2jUiUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-6a5bca60a4ebf959a6df7f08217acd07ac2bc285164fae041eacb8a148b1bab9.svg\" alt=\"GitHub logo\"> <a href=\"https://github.com/Phantasm0009\">rossanodan</a> &#x2F; <a href=\"https://github.com/Phantasm0009/TodoList\">todo-app</a></h2><h3 id=\"Simple-to-do-app-built-with-React\"><a href=\"#Simple-to-do-app-built-with-React\" class=\"headerlink\" title=\"Simple to-do app built with React.\"></a>Simple to-do app built with React.</h3><p>This project was bootstrapped with <a href=\"https://github.com/facebook/create-react-app\">Create React App</a>.</p>\n<h2 id=\"How-to-run-locally\"><a href=\"#How-to-run-locally\" class=\"headerlink\" title=\"How to run locally\"></a>How to run locally</h2><pre><code>git clone https://github.com/Phantasm0009/TodoList.git\ncd todo-app\nnpm install\nnpm start\n</code></pre>\n<p><a href=\"https://github.com/Phantasm0009/TodoList\">View on GitHub</a></p>\n<hr>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clbz93irg0000twlh05zt02y7","tag_id":"clbz93irl0002twlhgp4y98ue","_id":"clbz93irq000btwlh65gi8cp6"},{"post_id":"clbz93irg0000twlh05zt02y7","tag_id":"clbz93iro0006twlh39pb8fqe","_id":"clbz93irs000dtwlh27er44s7"},{"post_id":"clbz93irk0001twlh6ul1g6f1","tag_id":"clbz93irp0009twlh2val5bvr","_id":"clbz93iru000jtwlh4gck72nw"},{"post_id":"clbz93irk0001twlh6ul1g6f1","tag_id":"clbz93irs000etwlh10fc6os4","_id":"clbz93iru000ktwlh7yppbjhx"},{"post_id":"clbz93irk0001twlh6ul1g6f1","tag_id":"clbz93irt000gtwlhd7cve75q","_id":"clbz93iru000mtwlhdg6l0490"},{"post_id":"clbz93irk0001twlh6ul1g6f1","tag_id":"clbz93irt000htwlha1embi66","_id":"clbz93iru000ntwlh4g7fdspv"},{"post_id":"clbz93irm0003twlha0n5eage","tag_id":"clbz93irt000itwlh41m1fxii","_id":"clbz93iru000qtwlhhwdy778k"},{"post_id":"clbz93irm0003twlha0n5eage","tag_id":"clbz93iru000ltwlhe6ibg7i6","_id":"clbz93iru000rtwlh8d1chub7"},{"post_id":"clbz93irm0003twlha0n5eage","tag_id":"clbz93iru000otwlh8bwtgnpe","_id":"clbz93irv000ttwlhdcfwgtg8"},{"post_id":"clbz93irn0004twlhebwfbu9r","tag_id":"clbz93iru000ptwlheblr1euk","_id":"clbz93irv000utwlh17dffzxy"},{"post_id":"clbz93irn0005twlh0yv14ihx","tag_id":"clbz93iru000stwlh0kpe8ue9","_id":"clbz93irv000wtwlh6d4o18rx"},{"post_id":"clbz93iro0007twlh8bfxbnly","tag_id":"clbz93irv000vtwlh0co04le5","_id":"clbz93irw000ztwlhh7vlgxpl"},{"post_id":"clbz93iro0007twlh8bfxbnly","tag_id":"clbz93irv000xtwlh984vcpj6","_id":"clbz93irw0010twlh43aee2xw"},{"post_id":"clbz93irp0008twlh1u3a4mgm","tag_id":"clbz93irv000ytwlh9n4i94dl","_id":"clbz93irx0013twlhhxaf8v41"},{"post_id":"clbz93irp0008twlh1u3a4mgm","tag_id":"clbz93iru000otwlh8bwtgnpe","_id":"clbz93irx0014twlhfjxq3xo7"},{"post_id":"clbz93irp000atwlh3qe67ra3","tag_id":"clbz93irt000itwlh41m1fxii","_id":"clbz93irx0016twlhf6hoclrf"},{"post_id":"clbz93irq000ctwlhcx6i7k7h","tag_id":"clbz93irx0015twlhc2qjaf19","_id":"clbz93irx0019twlhhxmi1bp5"},{"post_id":"clbz93irq000ctwlhcx6i7k7h","tag_id":"clbz93irt000itwlh41m1fxii","_id":"clbz93iry001atwlh2f1x45ij"},{"post_id":"clbz93irs000ftwlh6gc2bzo0","tag_id":"clbz93irt000itwlh41m1fxii","_id":"clbz93iry001ctwlhgdak899a"},{"post_id":"clbz93irs000ftwlh6gc2bzo0","tag_id":"clbz93iry001btwlh79wc5u5n","_id":"clbz93iry001dtwlham6jbgq2"}],"Tag":[{"name":"typography","_id":"clbz93irl0002twlhgp4y98ue"},{"name":"hexo","_id":"clbz93iro0006twlh39pb8fqe"},{"name":"Python Flask","_id":"clbz93irp0009twlh2val5bvr"},{"name":"Heroku","_id":"clbz93irs000etwlh10fc6os4"},{"name":"Tailwind","_id":"clbz93irt000gtwlhd7cve75q"},{"name":"Application","_id":"clbz93irt000htwlha1embi66"},{"name":"React","_id":"clbz93irt000itwlh41m1fxii"},{"name":"Javascript","_id":"clbz93iru000ltwlhe6ibg7i6"},{"name":"Html","_id":"clbz93iru000otwlh8bwtgnpe"},{"name":"typescript","_id":"clbz93iru000ptwlheblr1euk"},{"name":"Git","_id":"clbz93iru000stwlh0kpe8ue9"},{"name":"API","_id":"clbz93irv000vtwlh0co04le5"},{"name":"Node.js","_id":"clbz93irv000xtwlh984vcpj6"},{"name":"Search","_id":"clbz93irv000ytwlh9n4i94dl"},{"name":"Vue.js","_id":"clbz93irx0015twlhc2qjaf19"},{"name":"Firebase","_id":"clbz93iry001btwlh79wc5u5n"}]}}